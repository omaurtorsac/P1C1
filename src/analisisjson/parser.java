
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjson;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\017\000\002\013" +
    "\007\000\002\020\011\000\002\021\011\000\002\021\007" +
    "\000\002\014\007\000\002\022\027\000\002\022\025\000" +
    "\002\015\007\000\002\023\027\000\002\023\025\000\002" +
    "\016\007\000\002\024\013\000\002\024\011\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\004\004\001\002\000\004\023\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\022\001\002\000\004\011\011\001\002\000" +
    "\004\006\012\001\002\000\014\003\015\034\017\035\013" +
    "\036\016\041\020\001\002\000\006\007\ufff0\012\ufff0\001" +
    "\002\000\004\007\021\001\002\000\006\007\uffee\012\uffee" +
    "\001\002\000\006\007\ufff1\012\ufff1\001\002\000\006\007" +
    "\ufff2\012\ufff2\001\002\000\006\007\uffef\012\uffef\001\002" +
    "\000\004\010\uffff\001\002\000\004\024\024\001\002\000" +
    "\004\010\042\001\002\000\004\011\025\001\002\000\004" +
    "\006\026\001\002\000\004\004\027\001\002\000\004\027" +
    "\031\001\002\000\004\005\040\001\002\000\004\011\032" +
    "\001\002\000\004\012\033\001\002\000\014\003\015\034" +
    "\017\035\013\036\016\041\020\001\002\000\004\012\035" +
    "\001\002\000\006\005\ufffc\010\036\001\002\000\004\027" +
    "\031\001\002\000\004\005\ufffd\001\002\000\004\007\041" +
    "\001\002\000\004\010\ufffe\001\002\000\004\025\044\001" +
    "\002\000\004\010\116\001\002\000\004\011\045\001\002" +
    "\000\004\006\046\001\002\000\004\004\047\001\002\000" +
    "\004\027\052\001\002\000\004\007\051\001\002\000\004" +
    "\010\ufffb\001\002\000\004\011\053\001\002\000\004\012" +
    "\054\001\002\000\014\003\015\034\017\035\013\036\016" +
    "\041\020\001\002\000\004\012\056\001\002\000\004\010" +
    "\057\001\002\000\004\022\060\001\002\000\004\011\061" +
    "\001\002\000\004\012\062\001\002\000\032\003\015\013" +
    "\063\014\065\015\073\016\067\017\072\020\064\021\066" +
    "\034\017\035\013\036\016\041\020\001\002\000\004\012" +
    "\uffed\001\002\000\004\012\uffe8\001\002\000\004\012\uffec" +
    "\001\002\000\004\012\uffe7\001\002\000\004\012\uffea\001" +
    "\002\000\004\012\106\001\002\000\004\012\074\001\002" +
    "\000\004\012\uffe9\001\002\000\004\012\uffeb\001\002\000" +
    "\004\010\075\001\002\000\004\026\076\001\002\000\004" +
    "\011\077\001\002\000\004\012\100\001\002\000\014\003" +
    "\015\034\017\035\013\036\016\041\020\001\002\000\004" +
    "\012\102\001\002\000\004\005\103\001\002\000\004\010" +
    "\104\001\002\000\004\004\047\001\002\000\004\007\ufffa" +
    "\001\002\000\004\010\107\001\002\000\004\026\110\001" +
    "\002\000\004\011\111\001\002\000\004\012\112\001\002" +
    "\000\014\003\015\034\017\035\013\036\016\041\020\001" +
    "\002\000\004\012\114\001\002\000\004\005\115\001\002" +
    "\000\004\007\ufff9\001\002\000\004\033\117\001\002\000" +
    "\004\011\144\001\002\000\004\010\121\001\002\000\004" +
    "\030\123\001\002\000\004\010\141\001\002\000\004\011" +
    "\124\001\002\000\004\006\125\001\002\000\004\004\126" +
    "\001\002\000\004\031\131\001\002\000\004\007\130\001" +
    "\002\000\004\010\ufff5\001\002\000\004\011\132\001\002" +
    "\000\004\012\133\001\002\000\004\042\134\001\002\000" +
    "\004\012\135\001\002\000\004\005\136\001\002\000\006" +
    "\007\ufff3\010\137\001\002\000\004\004\126\001\002\000" +
    "\004\007\ufff4\001\002\000\002\001\002\000\004\005\143" +
    "\001\002\000\004\002\000\001\002\000\004\006\145\001" +
    "\002\000\004\004\146\001\002\000\004\027\151\001\002" +
    "\000\004\007\150\001\002\000\004\010\ufff8\001\002\000" +
    "\004\011\152\001\002\000\004\012\153\001\002\000\014" +
    "\003\015\034\017\035\013\036\016\041\020\001\002\000" +
    "\004\012\155\001\002\000\004\010\156\001\002\000\004" +
    "\022\157\001\002\000\004\011\160\001\002\000\004\012" +
    "\161\001\002\000\020\013\063\014\065\015\073\016\067" +
    "\017\072\020\064\021\066\001\002\000\004\012\163\001" +
    "\002\000\004\010\164\001\002\000\004\032\165\001\002" +
    "\000\004\011\166\001\002\000\004\012\167\001\002\000" +
    "\014\003\015\034\017\035\013\036\016\041\020\001\002" +
    "\000\004\012\171\001\002\000\004\005\172\001\002\000" +
    "\006\007\ufff6\010\173\001\002\000\004\004\146\001\002" +
    "\000\004\007\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\004\001\001\000\004\013\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\070\017\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\137\001\001\000\002\001\001" +
    "\000\004\003\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\173\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAV_A ESCORE COMA ECLASES COMA EVARIAB COMA EMETOD COMA ECOMEN COMA A1 LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESCORE ::= SCORE DOSPU COR_A VALORES COR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCORE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ECLASES ::= CLASES DOSPU COR_A LLAV_A C1 LLAV_C COR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECLASES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // C1 ::= NOMBRE DOSPU COMIL VALORES COMIL COMA C1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C1 ::= NOMBRE DOSPU COMIL VALORES COMIL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EVARIAB ::= VARIAB DOSPU COR_A V1 COR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVARIAB",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // V1 ::= LLAV_A NOMBRE DOSPU COMIL VALORES COMIL COMA TIPOS DOSPU COMIL TIPO COMIL COMA CLASE DOSPU COMIL VALORES COMIL LLAV_C COMA V1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("V1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // V1 ::= LLAV_A NOMBRE DOSPU COMIL VALORES COMIL COMA TIPOS DOSPU COMIL VALORES COMIL COMA CLASE DOSPU COMIL VALORES COMIL LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("V1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EMETOD ::= METODO DOSPU COR_A M1 COR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EMETOD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M1 ::= LLAV_A NOMBRE DOSPU COMIL VALORES COMIL COMA TIPOS DOSPU COMIL TIPO COMIL COMA PARAME DOSPU COMIL VALORES COMIL LLAV_C COMA M1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // M1 ::= LLAV_A NOMBRE DOSPU COMIL VALORES COMIL COMA TIPOS DOSPU COMIL TIPO COMIL COMA PARAME DOSPU COMIL VALORES COMIL LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ECOMEN ::= COMENT DOSPU COR_A T1 COR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECOMEN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T1 ::= LLAV_A TEXTO DOSPU COMIL CONT COMIL LLAV_C COMA T1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T1 ::= LLAV_A TEXTO DOSPU COMIL CONT COMIL LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALORES ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
