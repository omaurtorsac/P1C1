
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjson;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserj extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserj() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\015\000\002\013" +
    "\007\000\002\020\011\000\002\021\005\000\002\021\003" +
    "\000\002\025\005\000\002\014\007\000\002\022\005\000" +
    "\002\022\003\000\002\026\023\000\002\015\007\000\002" +
    "\023\005\000\002\023\003\000\002\027\017\000\002\016" +
    "\007\000\002\024\005\000\002\024\003\000\002\030\007" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\004\004\001\002\000\004\023\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\022\001\002\000\004\011\011\001\002\000" +
    "\004\006\012\001\002\000\014\003\015\035\020\036\013" +
    "\037\016\042\017\001\002\000\010\005\uffec\007\uffec\010" +
    "\uffec\001\002\000\004\007\021\001\002\000\010\005\uffea" +
    "\007\uffea\010\uffea\001\002\000\010\005\uffed\007\uffed\010" +
    "\uffed\001\002\000\010\005\uffeb\007\uffeb\010\uffeb\001\002" +
    "\000\010\005\uffee\007\uffee\010\uffee\001\002\000\004\010" +
    "\uffff\001\002\000\004\024\024\001\002\000\004\010\041" +
    "\001\002\000\004\011\025\001\002\000\004\006\026\001" +
    "\002\000\004\004\027\001\002\000\004\027\032\001\002" +
    "\000\006\005\ufffc\010\ufffc\001\002\000\006\005\036\010" +
    "\035\001\002\000\004\011\033\001\002\000\014\003\015" +
    "\035\020\036\013\037\016\042\017\001\002\000\006\005" +
    "\ufffb\010\ufffb\001\002\000\004\027\032\001\002\000\004" +
    "\007\037\001\002\000\004\010\ufffe\001\002\000\006\005" +
    "\ufffd\010\ufffd\001\002\000\004\025\043\001\002\000\004" +
    "\010\104\001\002\000\004\011\044\001\002\000\004\006" +
    "\045\001\002\000\004\004\047\001\002\000\006\007\ufff8" +
    "\010\ufff8\001\002\000\004\027\054\001\002\000\006\007" +
    "\052\010\051\001\002\000\004\004\047\001\002\000\004" +
    "\010\ufffa\001\002\000\006\007\ufff9\010\ufff9\001\002\000" +
    "\004\011\055\001\002\000\014\003\015\035\020\036\013" +
    "\037\016\042\017\001\002\000\004\010\057\001\002\000" +
    "\004\022\060\001\002\000\004\011\061\001\002\000\022" +
    "\003\071\013\062\014\064\015\072\016\066\017\070\020" +
    "\063\021\065\001\002\000\004\010\uffe9\001\002\000\004" +
    "\010\uffe4\001\002\000\004\010\uffe8\001\002\000\004\010" +
    "\uffe3\001\002\000\004\010\uffe6\001\002\000\004\010\073" +
    "\001\002\000\004\010\uffe5\001\002\000\004\010\uffe2\001" +
    "\002\000\004\010\uffe7\001\002\000\004\034\074\001\002" +
    "\000\004\011\075\001\002\000\014\003\015\035\020\036" +
    "\013\037\016\042\017\001\002\000\004\010\077\001\002" +
    "\000\004\026\100\001\002\000\004\011\101\001\002\000" +
    "\014\003\015\035\020\036\013\037\016\042\017\001\002" +
    "\000\004\005\103\001\002\000\006\007\ufff7\010\ufff7\001" +
    "\002\000\004\033\105\001\002\000\004\011\127\001\002" +
    "\000\004\010\107\001\002\000\004\030\111\001\002\000" +
    "\004\005\126\001\002\000\004\011\112\001\002\000\004" +
    "\006\113\001\002\000\004\004\114\001\002\000\004\031" +
    "\122\001\002\000\006\007\ufff0\010\ufff0\001\002\000\006" +
    "\007\120\010\117\001\002\000\004\004\114\001\002\000" +
    "\004\005\ufff2\001\002\000\006\007\ufff1\010\ufff1\001\002" +
    "\000\004\011\123\001\002\000\004\042\124\001\002\000" +
    "\004\005\125\001\002\000\006\007\uffef\010\uffef\001\002" +
    "\000\004\002\000\001\002\000\004\006\130\001\002\000" +
    "\004\004\131\001\002\000\004\027\137\001\002\000\006" +
    "\007\ufff4\010\ufff4\001\002\000\006\007\135\010\134\001" +
    "\002\000\004\004\131\001\002\000\004\010\ufff6\001\002" +
    "\000\006\007\ufff5\010\ufff5\001\002\000\004\011\140\001" +
    "\002\000\014\003\015\035\020\036\013\037\016\042\017" +
    "\001\002\000\004\010\142\001\002\000\004\022\143\001" +
    "\002\000\004\011\144\001\002\000\022\003\071\013\062" +
    "\014\064\015\072\016\066\017\070\020\063\021\065\001" +
    "\002\000\004\010\146\001\002\000\004\032\147\001\002" +
    "\000\004\011\150\001\002\000\014\003\015\035\020\036" +
    "\013\037\016\042\017\001\002\000\004\005\152\001\002" +
    "\000\006\007\ufff3\010\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\002\004\001\001\000\004\013\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\030\025\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\033\001\001\000" +
    "\002\001\001\000\004\025\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\047\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\115\030\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\132\027\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\150\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserj$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parserj parser;

  /** Constructor */
  CUP$parserj$actions(parserj parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserj$do_action_part00000000(
    int                        CUP$parserj$act_num,
    java_cup.runtime.lr_parser CUP$parserj$parser,
    java.util.Stack            CUP$parserj$stack,
    int                        CUP$parserj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserj$result;

      /* select the action based on the action number */
      switch (CUP$parserj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserj$stack.elementAt(CUP$parserj$top-1)).value;
		RESULT = start_val;
              CUP$parserj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-1)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserj$parser.done_parsing();
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAV_A ESCORE COMA ECLASES COMA EVARIAB COMA EMETOD COMA ECOMEN LLAV_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-10)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESCORE ::= SCORE DOSPU COR_A VALORES COR_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("ESCORE",9, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-4)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ECLASES ::= CLASES DOSPU COR_A LLAV_A C1 LLAV_C COR_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("ECLASES",14, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-6)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // C1 ::= C1 COMA C2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("C1",15, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-2)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C1 ::= C2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("C1",15, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C2 ::= NOMBRE DOSPU VALORES 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("C2",19, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-2)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EVARIAB ::= VARIAB DOSPU COR_A V1 COR_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("EVARIAB",10, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-4)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // V1 ::= V1 COMA V2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("V1",16, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-2)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // V1 ::= V2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("V1",16, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // V2 ::= LLAV_A NOMBRE DOSPU VALORES COMA TIPOS DOSPU TIPO COMA FUNCION DOSPU VALORES COMA CLASE DOSPU VALORES LLAV_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("V2",20, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-16)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EMETOD ::= METODO DOSPU COR_A M1 COR_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("EMETOD",11, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-4)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // M1 ::= M1 COMA M2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-2)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // M1 ::= M2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // M2 ::= LLAV_A NOMBRE DOSPU VALORES COMA TIPOS DOSPU TIPO COMA PARAME DOSPU VALORES LLAV_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("M2",21, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-12)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ECOMEN ::= COMENT DOSPU COR_A T1 COR_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("ECOMEN",12, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-4)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T1 ::= T1 COMA T2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("T1",18, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-2)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // T1 ::= T2 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("T1",18, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T2 ::= LLAV_A TEXTO DOSPU CADENA LLAV_C 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("T2",22, ((java_cup.runtime.Symbol)CUP$parserj$stack.elementAt(CUP$parserj$top-4)), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALORES ::= error 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("VALORES",13, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$parserj$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserj$stack.peek()), RESULT);
            }
          return CUP$parserj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserj$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserj$do_action(
    int                        CUP$parserj$act_num,
    java_cup.runtime.lr_parser CUP$parserj$parser,
    java.util.Stack            CUP$parserj$stack,
    int                        CUP$parserj$top)
    throws java.lang.Exception
    {
              return CUP$parserj$do_action_part00000000(
                               CUP$parserj$act_num,
                               CUP$parserj$parser,
                               CUP$parserj$stack,
                               CUP$parserj$top);
    }
}

}
