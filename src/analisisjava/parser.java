
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjava;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\004\005\000\002\004\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\003\000\002\032" +
    "\002\000\002\041\003\000\002\041\002\000\002\035\014" +
    "\000\002\035\013\000\002\035\012\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\002\000\002\053\014\000\002\051" +
    "\014\000\002\051\002\000\002\052\007\000\002\052\002" +
    "\000\002\056\024\000\002\037\004\000\002\037\004\000" +
    "\002\046\005\000\002\046\005\000\002\046\003\000\002" +
    "\047\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\042\012\000\002\011\004\000\002\011\003\000" +
    "\002\045\003\000\002\045\002\000\002\044\010\000\002" +
    "\043\007\000\002\043\002\000\002\021\003\000\002\021" +
    "\003\000\002\035\006\000\002\033\007\000\002\012\004" +
    "\000\002\012\003\000\002\012\002\000\002\025\003\000" +
    "\002\025\003\000\002\023\005\000\002\024\007\000\002" +
    "\026\004\000\002\026\003\000\002\034\005\000\002\034" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\007\006\000\002\007" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\013\004\000" +
    "\002\013\005\000\002\013\006\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\002\000\002\016\004\000\002\016\003" +
    "\000\002\016\002\000\002\014\005\000\002\014\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\016\022\016\033\017\034\013\035\006\036" +
    "\014\056\020\001\002\000\004\057\047\001\002\000\056" +
    "\003\uffc4\007\uffc4\013\uffc4\022\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\052\uffc4\053\uffc4\055\uffc4\056" +
    "\uffc4\060\uffc4\077\uffc4\001\002\000\022\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\057\uffbb\001" +
    "\002\000\056\003\uffc5\007\uffc5\013\uffc5\022\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\056\uffc5\060\uffc5\077\uffc5\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\000\001\002\000\004\002\046" +
    "\001\002\000\022\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\057\uffbc\001\002\000\022\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\057" +
    "\uffba\001\002\000\016\022\016\033\017\034\013\035\006" +
    "\036\014\056\020\001\002\000\006\021\030\022\027\001" +
    "\002\000\022\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\057\uffbd\001\002\000\004\077\021\001" +
    "\002\000\010\006\ufff7\013\ufff7\015\ufff7\001\002\000\006" +
    "\013\024\015\023\001\002\000\004\077\026\001\002\000" +
    "\016\022\016\033\017\034\013\035\006\036\014\056\020" +
    "\001\002\000\004\002\uffff\001\002\000\012\004\ufff8\006" +
    "\ufff8\013\ufff8\015\ufff8\001\002\000\016\026\034\027\033" +
    "\076\037\077\031\100\036\103\040\001\002\000\016\026" +
    "\034\027\033\076\037\077\031\100\036\103\040\001\002" +
    "\000\102\003\uff9b\004\uff9b\005\uff9b\007\uff9b\013\uff9b\014" +
    "\uff9b\017\uff9b\021\uff9b\022\uff9b\026\uff9b\027\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\052\uff9b\053\uff9b" +
    "\055\uff9b\056\uff9b\060\uff9b\076\uff9b\077\uff9b\100\uff9b\103" +
    "\uff9b\001\002\000\072\003\uffc0\007\uffc0\013\uffc0\021\uffc0" +
    "\022\uffc0\026\uffc0\027\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\060" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\103\uffc0\001\002\000\124" +
    "\003\uff98\004\uff98\005\uff98\007\uff98\012\uff98\013\uff98\014" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\052" +
    "\uff98\053\uff98\055\uff98\056\uff98\060\uff98\076\uff98\077\uff98" +
    "\100\uff98\103\uff98\001\002\000\124\003\uff99\004\uff99\005" +
    "\uff99\007\uff99\012\uff99\013\uff99\014\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\052\uff99\053\uff99\055\uff99" +
    "\056\uff99\060\uff99\076\uff99\077\uff99\100\uff99\103\uff99\001" +
    "\002\000\020\021\042\026\034\027\033\076\037\077\031" +
    "\100\036\103\040\001\002\000\124\003\uff9c\004\uff9c\005" +
    "\uff9c\007\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\052\uff9c\053\uff9c\055\uff9c" +
    "\056\uff9c\060\uff9c\076\uff9c\077\uff9c\100\uff9c\103\uff9c\001" +
    "\002\000\124\003\uff9d\004\uff9d\005\uff9d\007\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\060\uff9d\076" +
    "\uff9d\077\uff9d\100\uff9d\103\uff9d\001\002\000\124\003\uff9a" +
    "\004\uff9a\005\uff9a\007\uff9a\012\uff9a\013\uff9a\014\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\052\uff9a\053" +
    "\uff9a\055\uff9a\056\uff9a\060\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\103\uff9a\001\002\000\072\003\uffc1\007\uffc1\013\uffc1\021" +
    "\uffc1\022\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\060\uffc1\076\uffc1\077\uffc1\100\uffc1\103\uffc1\001\002\000" +
    "\004\022\043\001\002\000\056\003\uffc2\007\uffc2\013\uffc2" +
    "\022\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\060\uffc2\077\uffc2\001" +
    "\002\000\070\003\uffc3\007\uffc3\013\uffc3\022\uffc3\026\034" +
    "\027\033\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\056\uffc3\060\uffc3\076\037\077" +
    "\uffc3\100\036\103\040\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\001\001\002\000\004\077\050\001\002\000" +
    "\010\003\052\006\ufff9\073\053\001\002\000\004\006\055" +
    "\001\002\000\004\006\ufffa\001\002\000\004\077\021\001" +
    "\002\000\006\006\ufffb\015\023\001\002\000\040\003\072" +
    "\007\ufff2\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\077\064\001\002\000\004\077\uffb6\001\002\000\004\077" +
    "\uffb8\001\002\000\004\077\uffb9\001\002\000\040\003\072" +
    "\007\ufff2\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\077\064\001\002\000\004\077\uffb7\001\002\000\040\003" +
    "\072\007\ufff2\022\016\033\017\034\013\035\006\036\014" +
    "\037\060\040\057\041\062\042\056\043\071\044\070\045" +
    "\074\077\064\001\002\000\004\004\336\001\002\000\004" +
    "\077\323\001\002\000\040\003\072\007\ufff2\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\077\064\001\002\000" +
    "\020\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\001\002\000\004\077\uffb4\001\002\000\004\077" +
    "\uffb5\001\002\000\004\007\ufff3\001\002\000\004\007\075" +
    "\001\002\000\004\077\uffb3\001\002\000\004\002\ufffc\001" +
    "\002\000\004\077\077\001\002\000\014\003\uffbe\004\143" +
    "\012\uffbe\013\uffbe\025\uffbe\001\002\000\012\003\103\012" +
    "\101\013\uffc6\025\104\001\002\000\004\077\142\001\002" +
    "\000\004\013\141\001\002\000\004\013\uffc7\001\002\000" +
    "\016\026\034\027\033\076\037\077\106\100\036\103\040" +
    "\001\002\000\004\013\uffb1\001\002\000\010\004\ufff7\013" +
    "\uff9b\015\ufff7\001\002\000\006\004\111\015\023\001\002" +
    "\000\004\013\uffc8\001\002\000\026\003\117\004\112\005" +
    "\uffa3\017\120\026\034\027\033\076\037\077\116\100\036" +
    "\103\040\001\002\000\022\004\112\017\120\026\034\027" +
    "\033\076\037\077\116\100\036\103\040\001\002\000\020" +
    "\005\uffa5\012\122\016\125\017\123\020\124\021\130\022" +
    "\126\001\002\000\036\005\uffa6\012\uffa6\013\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\001\002\000\004\005\136" +
    "\001\002\000\040\004\133\005\uff9b\012\uff9b\013\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\030\uff9b\031\uff9b\032\uff9b\001\002\000\004\005" +
    "\uffa4\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\076\037\077\116\100\036\103\040\001\002\000\036\005" +
    "\uffab\012\uffab\013\uffab\016\uffab\017\uffab\020\124\021\130" +
    "\022\126\023\uffab\024\uffab\025\uffab\030\uffab\031\uffab\032" +
    "\uffab\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\076\037\077\116\100\036\103\040\001\002\000\034\004" +
    "\uffaf\005\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\026\uffaf\027\uffaf\076\uffaf\077\uffaf\100\uffaf\103\uffaf\001" +
    "\002\000\034\004\uffac\005\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\026\uffac\027\uffac\076\uffac\077\uffac\100" +
    "\uffac\103\uffac\001\002\000\034\004\uffb0\005\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0\027\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\103\uffb0\001\002\000\034\004\uffae" +
    "\005\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\026" +
    "\uffae\027\uffae\076\uffae\077\uffae\100\uffae\103\uffae\001\002" +
    "\000\022\004\112\017\120\026\034\027\033\076\037\077" +
    "\116\100\036\103\040\001\002\000\034\004\uffad\005\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\026\uffad\027" +
    "\uffad\076\uffad\077\uffad\100\uffad\103\uffad\001\002\000\036" +
    "\005\uffa8\012\122\013\uffa8\016\125\017\123\020\124\021" +
    "\130\022\126\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\001\002\000\036\005\uffa7\012\uffa7\013\uffa7\016" +
    "\125\017\123\020\124\021\130\022\126\023\uffa7\024\uffa7" +
    "\025\uffa7\030\uffa7\031\uffa7\032\uffa7\001\002\000\022\004" +
    "\112\017\120\026\034\027\033\076\037\077\116\100\036" +
    "\103\040\001\002\000\020\005\135\012\122\016\125\017" +
    "\123\020\124\021\130\022\126\001\002\000\036\005\uffa9" +
    "\012\uffa9\013\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\001\002\000\004\013\uffb2\001\002\000\020\005\140\012" +
    "\122\016\125\017\123\020\124\021\130\022\126\001\002" +
    "\000\036\005\uffaa\012\uffaa\013\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\001\002\000\040\003\uffc9\007\uffc9\022" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\077\uffc9\001" +
    "\002\000\012\003\uffbf\012\uffbf\013\uffbf\025\uffbf\001\002" +
    "\000\024\003\147\005\uffa0\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\001\002\000\024\003\147" +
    "\005\uffa0\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\001\002\000\004\005\152\001\002\000\004" +
    "\077\150\001\002\000\004\005\uffa1\001\002\000\026\003" +
    "\uff9e\005\uff9e\012\151\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\001\002\000\024\003\uff9f\005" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\001\002\000\004\006\153\001\002\000\046\007" +
    "\uffe7\022\016\033\017\034\013\035\006\036\014\037\060" +
    "\040\057\041\062\042\056\043\071\044\070\045\074\046" +
    "\157\052\156\053\165\060\uffe7\077\064\001\002\000\052" +
    "\007\uffe7\013\uffe7\022\016\033\017\034\013\035\006\036" +
    "\014\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\046\157\052\156\053\165\055\uffe7\060\uffe7\077" +
    "\064\001\002\000\052\007\uffe7\013\uffe7\022\016\033\017" +
    "\034\013\035\006\036\014\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\046\157\052\156\053\165" +
    "\055\uffe7\060\uffe7\077\064\001\002\000\004\004\271\001" +
    "\002\000\004\004\233\001\002\000\052\007\uffe7\013\uffe7" +
    "\022\016\033\017\034\013\035\006\036\014\037\060\040" +
    "\057\041\062\042\056\043\071\044\070\045\074\046\157" +
    "\052\156\053\165\055\uffe7\060\uffe7\077\064\001\002\000" +
    "\020\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\001\002\000\052\007\uffe7\013\uffe7\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\046\157\052\156\053" +
    "\165\055\uffe7\060\uffe7\077\064\001\002\000\052\007\uffe7" +
    "\013\uffe7\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\046\157\052\156\053\165\055\uffe7\060\uffe7\077\064\001" +
    "\002\000\006\007\ufff0\060\216\001\002\000\004\004\166" +
    "\001\002\000\020\037\060\040\057\041\062\042\056\043" +
    "\071\044\070\045\074\001\002\000\004\077\170\001\002" +
    "\000\004\013\171\001\002\000\004\077\172\001\002\000" +
    "\012\023\177\024\176\025\175\032\174\001\002\000\016" +
    "\026\034\027\033\076\037\077\031\100\036\103\040\001" +
    "\002\000\004\025\203\001\002\000\004\025\202\001\002" +
    "\000\024\004\uffd9\017\uffd9\025\201\026\uffd9\027\uffd9\076" +
    "\uffd9\077\uffd9\100\uffd9\103\uffd9\001\002\000\024\004\uffda" +
    "\017\uffda\025\200\026\uffda\027\uffda\076\uffda\077\uffda\100" +
    "\uffda\103\uffda\001\002\000\022\004\uffd6\017\uffd6\026\uffd6" +
    "\027\uffd6\076\uffd6\077\uffd6\100\uffd6\103\uffd6\001\002\000" +
    "\022\004\uffd5\017\uffd5\026\uffd5\027\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\103\uffd5\001\002\000\022\004\uffd8\017\uffd8\026" +
    "\uffd8\027\uffd8\076\uffd8\077\uffd8\100\uffd8\103\uffd8\001\002" +
    "\000\022\004\uffd7\017\uffd7\026\uffd7\027\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\103\uffd7\001\002\000\022\004\112\017\120" +
    "\026\034\027\033\076\037\077\116\100\036\103\040\001" +
    "\002\000\020\012\122\013\206\016\125\017\123\020\124" +
    "\021\130\022\126\001\002\000\004\077\207\001\002\000" +
    "\014\016\125\017\123\020\124\021\130\022\126\001\002" +
    "\000\030\016\125\017\123\020\124\021\130\022\126\026" +
    "\034\027\033\076\037\077\031\100\036\103\040\001\002" +
    "\000\004\005\212\001\002\000\004\006\213\001\002\000" +
    "\050\007\uffe7\022\016\033\017\034\013\035\006\036\014" +
    "\037\060\040\057\041\062\042\056\043\071\044\070\045" +
    "\074\046\157\052\156\053\165\055\uffe7\060\uffe7\077\064" +
    "\001\002\000\010\007\ufff0\055\ufff0\060\216\001\002\000" +
    "\006\007\uffd0\055\217\001\002\000\006\007\ufff1\055\ufff1" +
    "\001\002\000\006\007\uffd1\013\uffd1\001\002\000\004\007" +
    "\221\001\002\000\052\007\uffe1\013\uffe1\022\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\060\uffe1\077\uffe1\001\002\000\004\005\uffe0\001" +
    "\002\000\004\005\uffdf\001\002\000\004\007\225\001\002" +
    "\000\054\003\uffef\007\uffef\013\uffef\022\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\052\uffef\053\uffef\055" +
    "\uffef\060\uffef\077\uffef\001\002\000\012\007\uffe8\013\uffe8" +
    "\055\uffe8\060\uffe8\001\002\000\012\007\uffea\013\uffea\055" +
    "\uffea\060\uffea\001\002\000\004\077\231\001\002\000\004" +
    "\004\143\001\002\000\012\007\uffeb\013\uffeb\055\uffeb\060" +
    "\uffeb\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\076\037\077\116\100\036\103\040\001\002\000\026\012" +
    "\122\016\125\017\123\020\124\021\130\022\126\023\177" +
    "\024\176\025\175\032\174\001\002\000\010\005\uffdc\030" +
    "\uffdc\031\uffdc\001\002\000\010\005\237\030\240\031\241" +
    "\001\002\000\004\006\244\001\002\000\022\004\112\017" +
    "\120\026\034\027\033\076\037\077\116\100\036\103\040" +
    "\001\002\000\022\004\112\017\120\026\034\027\033\076" +
    "\037\077\116\100\036\103\040\001\002\000\010\005\uffde" +
    "\030\uffde\031\uffde\001\002\000\010\005\uffdd\030\uffdd\031" +
    "\uffdd\001\002\000\046\007\uffe7\022\016\033\017\034\013" +
    "\035\006\036\014\037\060\040\057\041\062\042\056\043" +
    "\071\044\070\045\074\046\157\052\156\053\165\060\uffe7" +
    "\077\064\001\002\000\006\007\ufff0\060\216\001\002\000" +
    "\004\007\247\001\002\000\054\007\uffe4\013\uffe4\022\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\060\uffe4\077\uffe4\001\002\000" +
    "\054\007\uffe2\013\uffe2\022\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\252\052\uffe2\053\uffe2\055\uffe2" +
    "\060\uffe2\077\uffe2\001\002\000\052\007\uffe6\013\uffe6\022" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\052" +
    "\uffe6\053\uffe6\055\uffe6\060\uffe6\077\uffe6\001\002\000\006" +
    "\006\253\046\254\001\002\000\046\007\uffe7\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\046\157\052\156\053" +
    "\165\060\uffe7\077\064\001\002\000\004\004\255\001\002" +
    "\000\022\004\112\017\120\026\034\027\033\076\037\077" +
    "\116\100\036\103\040\001\002\000\010\005\257\030\240" +
    "\031\241\001\002\000\004\006\260\001\002\000\046\007" +
    "\uffe7\022\016\033\017\034\013\035\006\036\014\037\060" +
    "\040\057\041\062\042\056\043\071\044\070\045\074\046" +
    "\157\052\156\053\165\060\uffe7\077\064\001\002\000\006" +
    "\007\ufff0\060\216\001\002\000\004\007\263\001\002\000" +
    "\054\007\uffe5\013\uffe5\022\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\060\uffe5\077\uffe5\001\002\000\006\007\ufff0\060\216\001" +
    "\002\000\004\007\266\001\002\000\052\007\uffe3\013\uffe3" +
    "\022\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\052\uffe3\053\uffe3\055\uffe3\060\uffe3\077\uffe3\001\002\000" +
    "\022\004\112\017\120\026\034\027\033\076\037\077\116" +
    "\100\036\103\040\001\002\000\024\005\uffdb\012\122\016" +
    "\125\017\123\020\124\021\130\022\126\030\uffdb\031\uffdb" +
    "\001\002\000\024\003\273\004\112\017\120\026\034\027" +
    "\033\076\037\077\116\100\036\103\040\001\002\000\020" +
    "\005\uffcc\012\122\016\125\017\123\020\124\021\130\022" +
    "\126\001\002\000\004\005\uffcb\001\002\000\004\005\275" +
    "\001\002\000\004\006\276\001\002\000\004\054\277\001" +
    "\002\000\016\026\034\027\033\076\037\077\031\100\036" +
    "\103\040\001\002\000\010\007\uffd2\054\uffd2\075\uffd2\001" +
    "\002\000\010\007\uffcd\054\277\075\303\001\002\000\004" +
    "\007\311\001\002\000\004\014\305\001\002\000\010\007" +
    "\uffd3\054\uffd3\075\uffd3\001\002\000\046\013\uffe7\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\046\157\052\156" +
    "\053\165\055\uffe7\077\064\001\002\000\006\013\uffd0\055" +
    "\217\001\002\000\004\013\310\001\002\000\004\007\uffce" +
    "\001\002\000\052\007\uffd4\013\uffd4\022\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\052\uffd4\053\uffd4\055" +
    "\uffd4\060\uffd4\077\uffd4\001\002\000\004\014\313\001\002" +
    "\000\046\013\uffe7\022\016\033\017\034\013\035\006\036" +
    "\014\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\046\157\052\156\053\165\055\uffe7\077\064\001" +
    "\002\000\006\013\uffd0\055\217\001\002\000\004\013\316" +
    "\001\002\000\010\007\uffcf\054\uffcf\075\uffcf\001\002\000" +
    "\012\007\uffec\013\uffec\055\uffec\060\uffec\001\002\000\012" +
    "\007\uffe9\013\uffe9\055\uffe9\060\uffe9\001\002\000\004\005" +
    "\uffa2\001\002\000\004\007\ufff5\001\002\000\014\003\uffbe" +
    "\004\327\012\uffbe\013\uffbe\025\uffbe\001\002\000\012\003" +
    "\103\012\101\013\uffc6\025\104\001\002\000\004\013\326" +
    "\001\002\000\054\003\uffca\007\uffca\013\uffca\022\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\052\uffca\053" +
    "\uffca\055\uffca\060\uffca\077\uffca\001\002\000\024\003\147" +
    "\005\uffa0\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\001\002\000\004\005\331\001\002\000\004" +
    "\006\332\001\002\000\046\007\uffe7\022\016\033\017\034" +
    "\013\035\006\036\014\037\060\040\057\041\062\042\056" +
    "\043\071\044\070\045\074\046\157\052\156\053\165\060" +
    "\uffe7\077\064\001\002\000\006\007\ufff0\060\216\001\002" +
    "\000\004\007\335\001\002\000\054\003\uffee\007\uffee\013" +
    "\uffee\022\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\052\uffee\053\uffee\055\uffee\060\uffee\077\uffee\001\002" +
    "\000\024\003\147\005\uffa0\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\001\002\000\004\005\340" +
    "\001\002\000\004\006\341\001\002\000\046\007\uffe7\022" +
    "\016\033\017\034\013\035\006\036\014\037\060\040\057" +
    "\041\062\042\056\043\071\044\070\045\074\046\157\052" +
    "\156\053\165\060\uffe7\077\064\001\002\000\006\007\ufff0" +
    "\060\216\001\002\000\004\007\344\001\002\000\054\003" +
    "\uffed\007\uffed\013\uffed\022\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\052\uffed\053\uffed\055\uffed\060\uffed" +
    "\077\uffed\001\002\000\004\007\ufff4\001\002\000\004\007" +
    "\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\020\002\011\003\010\005\007\023\006\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\044\005\007\023\006\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\024\005\007" +
    "\023\006\024\004\025\014\031\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\043\027\031\001\001" +
    "\000\006\026\034\027\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\053\001" +
    "\001\000\002\001\001\000\022\022\064\023\006\024\004" +
    "\025\065\031\066\032\072\033\060\035\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\022\064\023\006\024\004\025\065\031\066\032\345\033" +
    "\060\035\062\001\001\000\002\001\001\000\022\022\064" +
    "\023\006\024\004\025\065\031\066\032\344\033\060\035" +
    "\062\001\001\000\002\001\001\000\004\034\323\001\001" +
    "\000\022\022\064\023\006\024\004\025\065\031\066\032" +
    "\321\033\060\035\062\001\001\000\004\022\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\077\001\001\000\002\001\001\000\004\012\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\106\007\107\027\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\112\015\114\027\113\001\001\000\006\013" +
    "\136\027\113\001\001\000\004\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\120\027\113\001\001\000\004\020\126" +
    "\001\001\000\006\013\131\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\130\027\113\001\001\000\002\001\001\000" +
    "\004\020\126\001\001\000\004\020\126\001\001\000\006" +
    "\013\133\027\113\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\143\016\144\022\145\001\001\000\010\014\143" +
    "\016\320\022\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\022\064\023\006\024\004\025" +
    "\157\031\160\035\154\036\163\042\161\053\153\056\162" +
    "\001\001\000\026\022\064\023\006\024\004\025\157\031" +
    "\160\035\154\036\317\042\161\053\153\056\162\001\001" +
    "\000\026\022\064\023\006\024\004\025\157\031\160\035" +
    "\154\036\316\042\161\053\153\056\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\022\064\023\006\024" +
    "\004\025\157\031\160\035\154\036\231\042\161\053\153" +
    "\056\162\001\001\000\004\022\227\001\001\000\026\022" +
    "\064\023\006\024\004\025\157\031\160\035\154\036\226" +
    "\042\161\053\153\056\162\001\001\000\026\022\064\023" +
    "\006\024\004\025\157\031\160\035\154\036\225\042\161" +
    "\053\153\056\162\001\001\000\004\041\223\001\001\000" +
    "\002\001\001\000\004\022\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\172\001" +
    "\001\000\004\027\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\204\027\113\001\001\000\004\020\126\001" +
    "\001\000\002\001\001\000\006\020\207\037\210\001\001" +
    "\000\006\020\221\027\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\022\064\023\006\024\004\025\157" +
    "\031\160\035\154\036\213\042\161\053\153\056\162\001" +
    "\001\000\004\041\214\001\001\000\004\045\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\233\027\113\046\235\047\234\001\001\000" +
    "\006\020\126\050\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\233\027\113\046" +
    "\242\047\234\001\001\000\012\013\233\027\113\046\241" +
    "\047\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\064\023\006\024\004\025\157\031\160\035\154" +
    "\036\244\042\161\053\153\056\162\001\001\000\004\041" +
    "\245\001\001\000\002\001\001\000\004\051\247\001\001" +
    "\000\004\052\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\064\023\006\024\004\025\157\031\160" +
    "\035\154\036\263\042\161\053\153\056\162\001\001\000" +
    "\002\001\001\000\012\013\233\027\113\046\255\047\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\022" +
    "\064\023\006\024\004\025\157\031\160\035\154\036\260" +
    "\042\161\053\153\056\162\001\001\000\004\041\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\267\027\113\001\001\000\004\020\126\001\001\000\010" +
    "\013\271\021\273\027\113\001\001\000\004\020\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\300\044\277\001\001\000\004\027\311\001" +
    "\001\000\002\001\001\000\006\043\301\044\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\064\023\006\024\004\025\157\031\160\035\154" +
    "\036\305\042\161\053\153\056\162\001\001\000\004\045" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\022\064\023\006\024" +
    "\004\025\157\031\160\035\154\036\313\042\161\053\153" +
    "\056\162\001\001\000\004\045\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\143\016\327\022\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\064\023\006\024\004" +
    "\025\157\031\160\035\154\036\332\042\161\053\153\056" +
    "\162\001\001\000\004\041\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\143\016\336\022\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\022\064" +
    "\023\006\024\004\025\157\031\160\035\154\036\341\042" +
    "\161\053\153\056\162\001\001\000\004\041\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= IMPOR IMPORTS PYCOMA A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= COMENTARIOS A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A1 ::= A2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= VISIBILIDAD CLASS ID A3 LLAV_A EXPRESIONES LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A3 ::= EXTEN IMPORTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A3 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A3 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS ::= IMPORTS PUNTO ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTS ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= DECLARACION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= COMENTARIOS EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= DECLA2 EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RETURNS ::= RETUR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA2 ::= VISIBILIDAD TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA2 ::= TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA2 ::= ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE2 ::= DECLA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE2 ::= COMENTARIOS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE2 ::= SWITCHS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE2 ::= EXIF EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE2 ::= OFOR EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXIF ::= IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C OIF OE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXIF",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OIF ::= OIF ELSE IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OIF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OE ::= ELSE LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OFOR ::= FOR PAR_A TIPO ID PYCOMA ID OPREL VALORES PARAMETRO1 PYCOMA ID EXPRE3 PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OFOR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRE3 ::= OPERACION OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRE3 ::= OPERACION VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COND ::= COND OR COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND ::= COND AND COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND ::= REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REL ::= PARAMETRO1 OPREL PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPREL ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPREL ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPREL ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPREL ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCHS ::= SWITCH PAR_A PAR11 PAR_C LLAV_A A5 DEF LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // A5 ::= A5 CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A5 ::= CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BRE ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASO ::= CASE VALORES DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEF ::= DEFAU DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PAR11 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PAR11 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLA2 ::= TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= VISIBILIDAD TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A4 ::= IGUAL ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // A4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // A4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMENTARIOS ::= COMENTL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMENTARIOS ::= COMENTM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMENTL ::= DIVIS DIVIS VIENE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMENTM ::= DIVIS MULTI VIENE MULTI DIVIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VIENE ::= VIENE VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VIENE ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTAID ::= LISTAID COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTAID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VISIBILIDAD ::= PRIVAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VISIBILIDAD ::= PUBLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VISIBILIDAD ::= PROTEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VISIBILIDAD ::= FINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNA ::= IMPORTS PAR_A PAR1 PAR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNA ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION ::= DIVIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACION ::= MODS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETRO1 ::= RESTA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETRO1 ::= PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETRO1 ::= ID PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETRO1 ::= PARAMETRO1 OPERACION PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETRO1 ::= PARAMETRO1 COMA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETRO1 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PAR1 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PAR1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PAR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PAR2 ::= PARAMETRO2 PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PAR2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PAR2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETRO2 ::= TIPO ID COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETRO2 ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
