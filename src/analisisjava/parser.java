
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjava;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\004\005\000\002\004\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\003\000\002\032" +
    "\002\000\002\041\003\000\002\041\002\000\002\035\014" +
    "\000\002\035\013\000\002\035\012\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\002\000\002\052\012\000\002\046\005\000\002\046" +
    "\005\000\002\046\003\000\002\047\005\000\002\050\003" +
    "\000\002\050\003\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\042\012\000\002" +
    "\011\004\000\002\011\003\000\002\045\003\000\002\045" +
    "\002\000\002\044\010\000\002\043\007\000\002\043\002" +
    "\000\002\021\003\000\002\021\003\000\002\037\002\000" +
    "\002\035\006\000\002\033\007\000\002\012\004\000\002" +
    "\012\003\000\002\012\002\000\002\025\003\000\002\025" +
    "\003\000\002\023\005\000\002\024\007\000\002\026\004" +
    "\000\002\026\003\000\002\034\005\000\002\034\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\007\006\000\002\007\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\013\004\000\002\013" +
    "\005\000\002\013\006\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\002\000\002\016\004\000\002\016\003\000\002" +
    "\016\002\000\002\014\005\000\002\014\004\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\016\022\016\033\017\034\013\035\006\036" +
    "\014\055\020\001\002\000\004\056\047\001\002\000\054" +
    "\003\uffcb\007\uffcb\013\uffcb\022\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\052\uffcb\054\uffcb\055\uffcb\057" +
    "\uffcb\076\uffcb\001\002\000\022\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\056\uffc2\001\002\000" +
    "\054\003\uffcc\007\uffcc\013\uffcc\022\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc\054\uffcc\055\uffcc" +
    "\057\uffcc\076\uffcc\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\000\001\002\000\004\002\046\001\002\000\022" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\056\uffc3\001\002\000\022\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\056\uffc1\001\002\000" +
    "\016\022\016\033\017\034\013\035\006\036\014\055\020" +
    "\001\002\000\006\021\030\022\027\001\002\000\022\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\056\uffc4\001\002\000\004\076\021\001\002\000\010\006" +
    "\ufff7\013\ufff7\015\ufff7\001\002\000\006\013\024\015\023" +
    "\001\002\000\004\076\026\001\002\000\016\022\016\033" +
    "\017\034\013\035\006\036\014\055\020\001\002\000\004" +
    "\002\uffff\001\002\000\012\004\ufff8\006\ufff8\013\ufff8\015" +
    "\ufff8\001\002\000\016\026\034\027\033\075\037\076\031" +
    "\077\036\102\040\001\002\000\016\026\034\027\033\075" +
    "\037\076\031\077\036\102\040\001\002\000\072\003\uffa2" +
    "\007\uffa2\013\uffa2\014\uffa2\021\uffa2\022\uffa2\026\uffa2\027" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\052" +
    "\uffa2\054\uffa2\055\uffa2\057\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\102\uffa2\001\002\000\070\003\uffc7\007\uffc7\013\uffc7\021" +
    "\uffc7\022\uffc7\026\uffc7\027\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\052\uffc7\054\uffc7\055\uffc7\057\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\102\uffc7\001\002\000\120\003" +
    "\uff9f\005\uff9f\007\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\052\uff9f\054\uff9f" +
    "\055\uff9f\057\uff9f\075\uff9f\076\uff9f\077\uff9f\102\uff9f\001" +
    "\002\000\120\003\uffa0\005\uffa0\007\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\052\uffa0\054\uffa0\055\uffa0\057\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\102\uffa0\001\002\000\020\021\042\026\034\027\033" +
    "\075\037\076\031\077\036\102\040\001\002\000\120\003" +
    "\uffa3\005\uffa3\007\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\052\uffa3\054\uffa3" +
    "\055\uffa3\057\uffa3\075\uffa3\076\uffa3\077\uffa3\102\uffa3\001" +
    "\002\000\120\003\uffa4\005\uffa4\007\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\052\uffa4\054\uffa4\055\uffa4\057\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\102\uffa4\001\002\000\120\003\uffa1\005\uffa1\007\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\052\uffa1\054\uffa1\055\uffa1\057\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\102\uffa1\001\002\000\070\003\uffc8" +
    "\007\uffc8\013\uffc8\021\uffc8\022\uffc8\026\uffc8\027\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\052\uffc8\054" +
    "\uffc8\055\uffc8\057\uffc8\075\uffc8\076\uffc8\077\uffc8\102\uffc8" +
    "\001\002\000\004\022\043\001\002\000\054\003\uffc9\007" +
    "\uffc9\013\uffc9\022\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\052\uffc9\054\uffc9\055\uffc9\057\uffc9\076\uffc9" +
    "\001\002\000\066\003\uffca\007\uffca\013\uffca\022\uffca\026" +
    "\034\027\033\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\052\uffca\054\uffca\055\uffca\057\uffca\075\037\076\uffca" +
    "\077\036\102\040\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\076\050\001\002\000\010" +
    "\003\052\006\ufff9\072\053\001\002\000\004\006\055\001" +
    "\002\000\004\006\ufffa\001\002\000\004\076\021\001\002" +
    "\000\006\006\ufffb\015\023\001\002\000\040\003\072\007" +
    "\ufff2\022\016\033\017\034\013\035\006\036\014\037\060" +
    "\040\057\041\062\042\056\043\071\044\070\045\074\076" +
    "\064\001\002\000\004\076\uffbd\001\002\000\004\076\uffbf" +
    "\001\002\000\004\076\uffc0\001\002\000\040\003\072\007" +
    "\ufff2\022\016\033\017\034\013\035\006\036\014\037\060" +
    "\040\057\041\062\042\056\043\071\044\070\045\074\076" +
    "\064\001\002\000\004\076\uffbe\001\002\000\040\003\072" +
    "\007\ufff2\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\076\064\001\002\000\004\004\270\001\002\000\004\076" +
    "\255\001\002\000\040\003\072\007\ufff2\022\016\033\017" +
    "\034\013\035\006\036\014\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\076\064\001\002\000\020" +
    "\037\060\040\057\041\062\042\056\043\071\044\070\045" +
    "\074\001\002\000\004\076\uffbb\001\002\000\004\076\uffbc" +
    "\001\002\000\004\007\ufff3\001\002\000\004\007\075\001" +
    "\002\000\004\076\uffba\001\002\000\004\002\ufffc\001\002" +
    "\000\004\076\077\001\002\000\014\003\uffc5\004\143\012" +
    "\uffc5\013\uffc5\025\uffc5\001\002\000\012\003\103\012\102" +
    "\013\uffcd\025\104\001\002\000\004\013\142\001\002\000" +
    "\004\076\141\001\002\000\004\013\uffce\001\002\000\016" +
    "\026\034\027\033\075\037\076\106\077\036\102\040\001" +
    "\002\000\004\013\uffb8\001\002\000\010\004\ufff7\013\uffa2" +
    "\015\ufff7\001\002\000\006\004\111\015\023\001\002\000" +
    "\004\013\uffcf\001\002\000\026\003\117\004\112\005\uffaa" +
    "\017\120\026\034\027\033\075\037\076\116\077\036\102" +
    "\040\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\075\037\076\116\077\036\102\040\001\002\000\020\005" +
    "\uffac\012\122\016\125\017\123\020\124\021\130\022\126" +
    "\001\002\000\034\005\uffad\012\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad" +
    "\031\uffad\032\uffad\001\002\000\004\005\136\001\002\000" +
    "\036\004\133\005\uffa2\012\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\001\002\000\004\005\uffab\001\002\000\022" +
    "\004\112\017\120\026\034\027\033\075\037\076\116\077" +
    "\036\102\040\001\002\000\034\005\uffb2\012\uffb2\016\uffb2" +
    "\017\uffb2\020\124\021\130\022\126\023\uffb2\024\uffb2\025" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\001\002\000\022\004\112" +
    "\017\120\026\034\027\033\075\037\076\116\077\036\102" +
    "\040\001\002\000\022\004\uffb6\017\uffb6\026\uffb6\027\uffb6" +
    "\075\uffb6\076\uffb6\077\uffb6\102\uffb6\001\002\000\022\004" +
    "\uffb3\017\uffb3\026\uffb3\027\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\102\uffb3\001\002\000\022\004\uffb7\017\uffb7\026\uffb7\027" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\102\uffb7\001\002\000\022" +
    "\004\uffb5\017\uffb5\026\uffb5\027\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\102\uffb5\001\002\000\022\004\112\017\120\026\034" +
    "\027\033\075\037\076\116\077\036\102\040\001\002\000" +
    "\022\004\uffb4\017\uffb4\026\uffb4\027\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\102\uffb4\001\002\000\034\005\uffaf\012\122\016" +
    "\125\017\123\020\124\021\130\022\126\023\uffaf\024\uffaf" +
    "\025\uffaf\030\uffaf\031\uffaf\032\uffaf\001\002\000\034\005" +
    "\uffae\012\uffae\016\125\017\123\020\124\021\130\022\126" +
    "\023\uffae\024\uffae\025\uffae\030\uffae\031\uffae\032\uffae\001" +
    "\002\000\022\004\112\017\120\026\034\027\033\075\037" +
    "\076\116\077\036\102\040\001\002\000\020\005\135\012" +
    "\122\016\125\017\123\020\124\021\130\022\126\001\002" +
    "\000\034\005\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\001\002\000\004\013\uffb9\001\002\000\020\005" +
    "\140\012\122\016\125\017\123\020\124\021\130\022\126" +
    "\001\002\000\034\005\uffb1\012\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\001\002\000\012\003\uffc6\012\uffc6\013" +
    "\uffc6\025\uffc6\001\002\000\040\003\uffd0\007\uffd0\022\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\076\uffd0\001\002" +
    "\000\024\003\147\005\uffa7\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\001\002\000\024\003\147" +
    "\005\uffa7\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\001\002\000\004\005\152\001\002\000\004" +
    "\076\150\001\002\000\004\005\uffa8\001\002\000\026\003" +
    "\uffa5\005\uffa5\012\151\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\001\002\000\024\003\uffa6\005" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\001\002\000\004\006\153\001\002\000\044\007" +
    "\uffe8\022\016\033\017\034\013\035\006\036\014\037\060" +
    "\040\057\041\062\042\056\043\071\044\070\045\074\046" +
    "\157\052\155\057\uffe8\076\064\001\002\000\050\007\uffe8" +
    "\013\uffe8\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\046\157\052\155\054\uffe8\057\uffe8\076\064\001\002\000" +
    "\004\004\223\001\002\000\050\007\uffe8\013\uffe8\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\046\157\052\155" +
    "\054\uffe8\057\uffe8\076\064\001\002\000\004\004\173\001" +
    "\002\000\050\007\uffe8\013\uffe8\022\016\033\017\034\013" +
    "\035\006\036\014\037\060\040\057\041\062\042\056\043" +
    "\071\044\070\045\074\046\157\052\155\054\uffe8\057\uffe8" +
    "\076\064\001\002\000\020\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\001\002\000\050\007\uffe8" +
    "\013\uffe8\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\046\157\052\155\054\uffe8\057\uffe8\076\064\001\002\000" +
    "\006\007\ufff0\057\165\001\002\000\004\007\166\001\002" +
    "\000\004\007\ufff1\001\002\000\052\003\uffef\007\uffef\013" +
    "\uffef\022\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\052\uffef\054\uffef\057\uffef\076\uffef\001\002\000\012" +
    "\007\uffea\013\uffea\054\uffea\057\uffea\001\002\000\004\076" +
    "\171\001\002\000\004\004\143\001\002\000\012\007\uffeb" +
    "\013\uffeb\054\uffeb\057\uffeb\001\002\000\022\004\112\017" +
    "\120\026\034\027\033\075\037\076\116\077\036\102\040" +
    "\001\002\000\026\012\122\016\125\017\123\020\124\021" +
    "\130\022\126\023\211\024\210\025\212\032\214\001\002" +
    "\000\010\005\uffe4\030\uffe4\031\uffe4\001\002\000\010\005" +
    "\177\030\200\031\201\001\002\000\004\006\204\001\002" +
    "\000\022\004\112\017\120\026\034\027\033\075\037\076" +
    "\116\077\036\102\040\001\002\000\022\004\112\017\120" +
    "\026\034\027\033\075\037\076\116\077\036\102\040\001" +
    "\002\000\010\005\uffe6\030\uffe6\031\uffe6\001\002\000\010" +
    "\005\uffe5\030\uffe5\031\uffe5\001\002\000\044\007\uffe8\022" +
    "\016\033\017\034\013\035\006\036\014\037\060\040\057" +
    "\041\062\042\056\043\071\044\070\045\074\046\157\052" +
    "\155\057\uffe8\076\064\001\002\000\006\007\ufff0\057\165" +
    "\001\002\000\004\007\207\001\002\000\050\007\uffe7\013" +
    "\uffe7\022\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\052\uffe7\054\uffe7\057\uffe7\076\uffe7\001\002\000\024" +
    "\004\uffe1\017\uffe1\025\221\026\uffe1\027\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\102\uffe1\001\002\000\024\004\uffe2\017\uffe2" +
    "\025\220\026\uffe2\027\uffe2\075\uffe2\076\uffe2\077\uffe2\102" +
    "\uffe2\001\002\000\004\025\217\001\002\000\022\004\112" +
    "\017\120\026\034\027\033\075\037\076\116\077\036\102" +
    "\040\001\002\000\004\025\215\001\002\000\022\004\uffdf" +
    "\017\uffdf\026\uffdf\027\uffdf\075\uffdf\076\uffdf\077\uffdf\102" +
    "\uffdf\001\002\000\024\005\uffe3\012\122\016\125\017\123" +
    "\020\124\021\130\022\126\030\uffe3\031\uffe3\001\002\000" +
    "\022\004\uffe0\017\uffe0\026\uffe0\027\uffe0\075\uffe0\076\uffe0" +
    "\077\uffe0\102\uffe0\001\002\000\022\004\uffde\017\uffde\026" +
    "\uffde\027\uffde\075\uffde\076\uffde\077\uffde\102\uffde\001\002" +
    "\000\022\004\uffdd\017\uffdd\026\uffdd\027\uffdd\075\uffdd\076" +
    "\uffdd\077\uffdd\102\uffdd\001\002\000\012\007\uffec\013\uffec" +
    "\054\uffec\057\uffec\001\002\000\024\003\225\004\112\017" +
    "\120\026\034\027\033\075\037\076\116\077\036\102\040" +
    "\001\002\000\020\005\uffd4\012\122\016\125\017\123\020" +
    "\124\021\130\022\126\001\002\000\004\005\uffd3\001\002" +
    "\000\004\005\227\001\002\000\004\006\230\001\002\000" +
    "\004\053\231\001\002\000\016\026\034\027\033\075\037" +
    "\076\031\077\036\102\040\001\002\000\010\007\uffda\053" +
    "\uffda\074\uffda\001\002\000\010\007\uffd5\053\231\074\235" +
    "\001\002\000\004\007\244\001\002\000\004\014\237\001" +
    "\002\000\010\007\uffdb\053\uffdb\074\uffdb\001\002\000\044" +
    "\013\uffe8\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\046\157\052\155\054\uffe8\076\064\001\002\000\006\013" +
    "\uffd8\054\241\001\002\000\004\013\uffd9\001\002\000\004" +
    "\013\243\001\002\000\004\007\uffd6\001\002\000\050\007" +
    "\uffdc\013\uffdc\022\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\052\uffdc\054\uffdc\057\uffdc\076\uffdc\001\002" +
    "\000\004\014\246\001\002\000\044\013\uffe8\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\046\157\052\155\054" +
    "\uffe8\076\064\001\002\000\006\013\uffd8\054\241\001\002" +
    "\000\004\013\251\001\002\000\010\007\uffd7\053\uffd7\074" +
    "\uffd7\001\002\000\012\007\uffe9\013\uffe9\054\uffe9\057\uffe9" +
    "\001\002\000\004\005\uffa9\001\002\000\004\007\ufff5\001" +
    "\002\000\014\003\uffc5\004\261\012\uffc5\013\uffc5\025\uffc5" +
    "\001\002\000\012\003\103\012\102\013\uffcd\025\104\001" +
    "\002\000\004\013\260\001\002\000\052\003\uffd1\007\uffd1" +
    "\013\uffd1\022\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\052\uffd1\054\uffd1\057\uffd1\076\uffd1\001\002\000" +
    "\024\003\147\005\uffa7\037\060\040\057\041\062\042\056" +
    "\043\071\044\070\045\074\001\002\000\004\005\263\001" +
    "\002\000\004\006\264\001\002\000\044\007\uffe8\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\046\157\052\155" +
    "\057\uffe8\076\064\001\002\000\006\007\ufff0\057\165\001" +
    "\002\000\004\007\267\001\002\000\052\003\uffee\007\uffee" +
    "\013\uffee\022\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\052\uffee\054\uffee\057\uffee\076\uffee\001\002\000" +
    "\024\003\147\005\uffa7\037\060\040\057\041\062\042\056" +
    "\043\071\044\070\045\074\001\002\000\004\005\272\001" +
    "\002\000\004\006\273\001\002\000\044\007\uffe8\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\046\157\052\155" +
    "\057\uffe8\076\064\001\002\000\006\007\ufff0\057\165\001" +
    "\002\000\004\007\276\001\002\000\052\003\uffed\007\uffed" +
    "\013\uffed\022\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\052\uffed\054\uffed\057\uffed\076\uffed\001\002\000" +
    "\004\007\ufff4\001\002\000\004\007\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\020\002\011\003\010\005\007\023\006\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\044\005\007\023\006\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\024\005\007" +
    "\023\006\024\004\025\014\031\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\043\027\031\001\001" +
    "\000\006\026\034\027\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\053\001" +
    "\001\000\002\001\001\000\022\022\064\023\006\024\004" +
    "\025\065\031\066\032\072\033\060\035\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\022\064\023\006\024\004\025\065\031\066\032\277\033" +
    "\060\035\062\001\001\000\002\001\001\000\022\022\064" +
    "\023\006\024\004\025\065\031\066\032\276\033\060\035" +
    "\062\001\001\000\002\001\001\000\004\034\255\001\001" +
    "\000\022\022\064\023\006\024\004\025\065\031\066\032" +
    "\253\033\060\035\062\001\001\000\004\022\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\077\001\001\000\002\001\001\000\004\012\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\106\007\107\027\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\112\015\114\027\113\001\001\000\006\013" +
    "\136\027\113\001\001\000\004\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\120\027\113\001\001\000\004\020\126" +
    "\001\001\000\006\013\131\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\130\027\113\001\001\000\002\001\001\000" +
    "\004\020\126\001\001\000\004\020\126\001\001\000\006" +
    "\013\133\027\113\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\143\016\144\022\145\001\001\000\010\014\143" +
    "\016\252\022\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\064\023\006\024\004\025" +
    "\157\031\160\035\155\036\162\042\161\052\153\001\001" +
    "\000\024\022\064\023\006\024\004\025\157\031\160\035" +
    "\155\036\251\042\161\052\153\001\001\000\002\001\001" +
    "\000\024\022\064\023\006\024\004\025\157\031\160\035" +
    "\155\036\221\042\161\052\153\001\001\000\002\001\001" +
    "\000\024\022\064\023\006\024\004\025\157\031\160\035" +
    "\155\036\171\042\161\052\153\001\001\000\004\022\167" +
    "\001\001\000\024\022\064\023\006\024\004\025\157\031" +
    "\160\035\155\036\166\042\161\052\153\001\001\000\004" +
    "\041\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\173\027\113\046" +
    "\175\047\174\001\001\000\006\020\126\050\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\173\027\113\046\202\047\174\001\001\000\012" +
    "\013\173\027\113\046\201\047\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\022\064\023\006\024\004" +
    "\025\157\031\160\035\155\036\204\042\161\052\153\001" +
    "\001\000\004\041\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\215\027\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\223\021\225\027\113\001\001\000\004\020" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\232\044\231\001\001\000\004\027" +
    "\244\001\001\000\002\001\001\000\006\043\233\044\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\064\023\006\024\004\025\157\031\160" +
    "\035\155\036\237\042\161\052\153\001\001\000\004\045" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\022" +
    "\064\023\006\024\004\025\157\031\160\035\155\036\246" +
    "\042\161\052\153\001\001\000\004\045\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\143\016\261\022\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\022\064\023\006\024\004\025\157" +
    "\031\160\035\155\036\264\042\161\052\153\001\001\000" +
    "\004\041\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\143\016\270\022\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\022\064\023\006\024\004" +
    "\025\157\031\160\035\155\036\273\042\161\052\153\001" +
    "\001\000\004\041\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= IMPOR IMPORTS PYCOMA A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= COMENTARIOS A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A1 ::= A2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= VISIBILIDAD CLASS ID A3 LLAV_A EXPRESIONES LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A3 ::= EXTEN IMPORTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A3 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A3 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS ::= IMPORTS PUNTO ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTS ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= DECLARACION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= COMENTARIOS EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= DECLA2 EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RETURNS ::= RETUR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA2 ::= VISIBILIDAD TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA2 ::= TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA2 ::= ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE2 ::= DECLA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE2 ::= COMENTARIOS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE2 ::= SWITCHS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE2 ::= EXIF EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXIF ::= IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXIF",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COND ::= COND OR COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COND ::= COND AND COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COND ::= REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REL ::= PARAMETRO1 OPREL PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPREL ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPREL ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPREL ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPREL ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SWITCHS ::= SWITCH PAR_A PAR11 PAR_C LLAV_A A5 DEF LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // A5 ::= A5 CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // A5 ::= CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BRE ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASO ::= CASE VALORES DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEF ::= DEFAU DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PAR11 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PAR11 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRE3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLA2 ::= TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= VISIBILIDAD TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // A4 ::= IGUAL ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMENTARIOS ::= COMENTL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMENTARIOS ::= COMENTM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMENTL ::= DIVIS DIVIS VIENE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMENTM ::= DIVIS MULTI VIENE MULTI DIVIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VIENE ::= VIENE VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VIENE ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTAID ::= LISTAID COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTAID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VISIBILIDAD ::= PRIVAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VISIBILIDAD ::= PUBLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VISIBILIDAD ::= PROTEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VISIBILIDAD ::= FINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNA ::= IMPORTS PAR_A PAR1 PAR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNA ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION ::= DIVIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION ::= MODS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMETRO1 ::= RESTA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETRO1 ::= PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETRO1 ::= ID PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETRO1 ::= PARAMETRO1 OPERACION PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETRO1 ::= PARAMETRO1 COMA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETRO1 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PAR1 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PAR1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PAR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PAR2 ::= PARAMETRO2 PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PAR2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PAR2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETRO2 ::= TIPO ID COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETRO2 ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
