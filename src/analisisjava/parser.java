
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjava;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\004\005\000\002\004\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\003\000\002\032" +
    "\002\000\002\040\005\000\002\040\002\000\002\035\014" +
    "\000\002\035\013\000\002\035\003\000\002\035\013\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\002" +
    "\000\002\056\006\000\002\056\006\000\002\056\005\000" +
    "\002\057\005\000\002\061\003\000\002\061\003\000\002" +
    "\061\006\000\002\065\003\000\002\065\003\000\002\055" +
    "\013\000\002\052\014\000\002\050\014\000\002\050\002" +
    "\000\002\051\007\000\002\051\002\000\002\062\013\000" +
    "\002\063\015\000\002\064\023\000\002\064\022\000\002" +
    "\037\004\000\002\037\004\000\002\045\005\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\047\003" +
    "\000\002\047\003\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\041\012\000\002" +
    "\011\004\000\002\011\003\000\002\044\003\000\002\044" +
    "\002\000\002\043\010\000\002\042\007\000\002\042\002" +
    "\000\002\021\003\000\002\021\003\000\002\035\006\000" +
    "\002\033\007\000\002\012\004\000\002\012\003\000\002" +
    "\012\002\000\002\025\003\000\002\023\005\000\002\024" +
    "\007\000\002\026\004\000\002\026\003\000\002\034\005" +
    "\000\002\034\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\017\007" +
    "\000\002\017\007\000\002\054\006\000\002\054\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\013\004\000\002\013\005" +
    "\000\002\013\006\000\002\013\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\002\000\002\016\003\000\002\016" +
    "\002\000\002\014\006\000\002\014\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\016\033\014\034\011\035\005\036\012\056" +
    "\015\105\016\001\002\000\004\057\027\001\002\000\024" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\057\uffaa\100\uffaa\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\000\001\002\000\004\002\026\001\002\000" +
    "\024\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\057\uffab\100\uffab\001\002\000\024\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\057\uffa9" +
    "\100\uffa9\001\002\000\016\033\014\034\011\035\005\036" +
    "\012\056\015\105\016\001\002\000\024\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\057\uffac\100" +
    "\uffac\001\002\000\004\100\017\001\002\000\064\003\uffb3" +
    "\007\uffb3\013\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056" +
    "\uffb3\060\uffb3\064\uffb3\100\uffb3\105\uffb3\001\002\000\012" +
    "\004\ufff7\006\ufff7\013\ufff7\015\ufff7\001\002\000\006\013" +
    "\022\015\021\001\002\000\004\100\024\001\002\000\016" +
    "\033\014\034\011\035\005\036\012\056\015\105\016\001" +
    "\002\000\004\002\uffff\001\002\000\012\004\ufff8\006\ufff8" +
    "\013\ufff8\015\ufff8\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\100\030\001\002\000\010" +
    "\003\032\006\ufff9\073\033\001\002\000\004\006\035\001" +
    "\002\000\004\006\ufffa\001\002\000\004\100\017\001\002" +
    "\000\006\006\ufffb\015\021\001\002\000\040\003\052\007" +
    "\ufff2\033\014\034\011\035\005\036\012\037\040\040\037" +
    "\041\042\042\036\043\051\044\050\045\055\100\017\105" +
    "\016\001\002\000\004\100\uffa5\001\002\000\004\100\uffa7" +
    "\001\002\000\004\100\uffa8\001\002\000\040\003\052\007" +
    "\ufff2\033\014\034\011\035\005\036\012\037\040\040\037" +
    "\041\042\042\036\043\051\044\050\045\055\100\017\105" +
    "\016\001\002\000\004\100\uffa6\001\002\000\040\003\052" +
    "\007\ufff2\033\014\034\011\035\005\036\012\037\040\040" +
    "\037\041\042\042\036\043\051\044\050\045\055\100\017" +
    "\105\016\001\002\000\004\100\u0127\001\002\000\062\003" +
    "\uffed\007\uffed\013\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed" +
    "\060\uffed\064\uffed\100\uffed\105\uffed\001\002\000\040\003" +
    "\052\007\ufff2\033\014\034\011\035\005\036\012\037\040" +
    "\040\037\041\042\042\036\043\051\044\050\045\055\100" +
    "\017\105\016\001\002\000\022\037\040\040\037\041\042" +
    "\042\036\043\051\044\050\045\055\100\220\001\002\000" +
    "\004\100\uffa3\001\002\000\004\100\uffa4\001\002\000\004" +
    "\007\ufff3\001\002\000\004\007\u011b\001\002\000\006\004" +
    "\056\015\021\001\002\000\004\100\uffa2\001\002\000\042" +
    "\004\063\005\uff8a\017\073\026\070\027\067\037\040\040" +
    "\037\041\042\042\036\043\051\044\050\045\055\077\072" +
    "\100\064\101\060\104\057\001\002\000\042\005\uff84\011" +
    "\uff84\012\uff84\013\uff84\014\uff84\016\uff84\017\uff84\020\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\030\uff84\031" +
    "\uff84\032\uff84\001\002\000\042\005\uff86\011\uff86\012\uff86" +
    "\013\uff86\014\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\030\uff86\031\uff86\032\uff86" +
    "\001\002\000\004\005\uff8b\001\002\000\020\005\u0119\012" +
    "\075\016\100\017\076\020\077\021\103\022\101\001\002" +
    "\000\022\004\063\017\073\026\070\027\067\077\072\100" +
    "\064\101\060\104\057\001\002\000\044\004\u0111\005\uff85" +
    "\010\u0112\011\uff85\012\uff85\013\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\030\uff85" +
    "\031\uff85\032\uff85\001\002\000\004\100\u010e\001\002\000" +
    "\040\005\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\001\002\000\042\005\uff82\011\uff82" +
    "\012\uff82\013\uff82\014\uff82\016\uff82\017\uff82\020\uff82\021" +
    "\uff82\022\uff82\023\uff82\024\uff82\025\uff82\030\uff82\031\uff82" +
    "\032\uff82\001\002\000\042\005\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83" +
    "\023\uff83\024\uff83\025\uff83\030\uff83\031\uff83\032\uff83\001" +
    "\002\000\004\005\106\001\002\000\042\005\uff87\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\030\uff87\031\uff87" +
    "\032\uff87\001\002\000\022\004\063\017\073\026\070\027" +
    "\067\077\072\100\064\101\060\104\057\001\002\000\040" +
    "\005\uff95\011\uff95\012\uff95\013\uff95\016\uff95\017\uff95\020" +
    "\077\021\103\022\101\023\uff95\024\uff95\025\uff95\030\uff95" +
    "\031\uff95\032\uff95\001\002\000\022\004\063\017\073\026" +
    "\070\027\067\077\072\100\064\101\060\104\057\001\002" +
    "\000\034\004\uff99\005\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\026\uff99\027\uff99\077\uff99\100\uff99\101\uff99" +
    "\104\uff99\001\002\000\034\004\uff96\005\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\026\uff96\027\uff96\077\uff96" +
    "\100\uff96\101\uff96\104\uff96\001\002\000\034\004\uff9a\005" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\026\uff9a" +
    "\027\uff9a\077\uff9a\100\uff9a\101\uff9a\104\uff9a\001\002\000" +
    "\034\004\uff98\005\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\026\uff98\027\uff98\077\uff98\100\uff98\101\uff98\104" +
    "\uff98\001\002\000\022\004\063\017\073\026\070\027\067" +
    "\077\072\100\064\101\060\104\057\001\002\000\034\004" +
    "\uff97\005\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\026\uff97\027\uff97\077\uff97\100\uff97\101\uff97\104\uff97\001" +
    "\002\000\040\005\uff91\011\uff91\012\075\013\uff91\016\100" +
    "\017\076\020\077\021\103\022\101\023\uff91\024\uff91\025" +
    "\uff91\030\uff91\031\uff91\032\uff91\001\002\000\040\005\uff90" +
    "\011\uff90\012\uff90\013\uff90\016\100\017\076\020\077\021" +
    "\103\022\101\023\uff90\024\uff90\025\uff90\030\uff90\031\uff90" +
    "\032\uff90\001\002\000\006\006\107\013\110\001\002\000" +
    "\054\007\uffe2\033\014\034\011\035\005\036\012\037\040" +
    "\040\037\041\042\042\036\043\051\044\050\045\055\046" +
    "\117\050\123\051\113\052\115\053\133\060\uffe2\064\124" +
    "\100\121\105\016\001\002\000\062\003\uff9e\007\uff9e\013" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\060\uff9e\064\uff9e" +
    "\100\uff9e\105\uff9e\001\002\000\062\003\uffa0\007\uffa0\013" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\060\uffa0\064\uffa0" +
    "\100\uffa0\105\uffa0\001\002\000\060\007\uffe2\013\uffe2\033" +
    "\014\034\011\035\005\036\012\037\040\040\037\041\042" +
    "\042\036\043\051\044\050\045\055\046\117\050\123\051" +
    "\113\052\115\053\133\055\uffe2\060\uffe2\064\124\100\121" +
    "\105\016\001\002\000\004\004\u0105\001\002\000\060\007" +
    "\uffe2\013\uffe2\033\014\034\011\035\005\036\012\037\040" +
    "\040\037\041\042\042\036\043\051\044\050\045\055\046" +
    "\117\050\123\051\113\052\115\053\133\055\uffe2\060\uffe2" +
    "\064\124\100\121\105\016\001\002\000\004\004\356\001" +
    "\002\000\060\007\uffe2\013\uffe2\033\014\034\011\035\005" +
    "\036\012\037\040\040\037\041\042\042\036\043\051\044" +
    "\050\045\055\046\117\050\123\051\113\052\115\053\133" +
    "\055\uffe2\060\uffe2\064\124\100\121\105\016\001\002\000" +
    "\004\004\327\001\002\000\060\007\uffe2\013\uffe2\033\014" +
    "\034\011\035\005\036\012\037\040\040\037\041\042\042" +
    "\036\043\051\044\050\045\055\046\117\050\123\051\113" +
    "\052\115\053\133\055\uffe2\060\uffe2\064\124\100\121\105" +
    "\016\001\002\000\012\004\ufff7\015\ufff7\025\276\100\017" +
    "\001\002\000\060\007\uffe2\013\uffe2\033\014\034\011\035" +
    "\005\036\012\037\040\040\037\041\042\042\036\043\051" +
    "\044\050\045\055\046\117\050\123\051\113\052\115\053" +
    "\133\055\uffe2\060\uffe2\064\124\100\121\105\016\001\002" +
    "\000\004\006\253\001\002\000\004\015\241\001\002\000" +
    "\022\037\040\040\037\041\042\042\036\043\051\044\050" +
    "\045\055\100\220\001\002\000\060\007\uffe2\013\uffe2\033" +
    "\014\034\011\035\005\036\012\037\040\040\037\041\042" +
    "\042\036\043\051\044\050\045\055\046\117\050\123\051" +
    "\113\052\115\053\133\055\uffe2\060\uffe2\064\124\100\121" +
    "\105\016\001\002\000\060\007\uffe2\013\uffe2\033\014\034" +
    "\011\035\005\036\012\037\040\040\037\041\042\042\036" +
    "\043\051\044\050\045\055\046\117\050\123\051\113\052" +
    "\115\053\133\055\uffe2\060\uffe2\064\124\100\121\105\016" +
    "\001\002\000\060\007\uffe2\013\uffe2\033\014\034\011\035" +
    "\005\036\012\037\040\040\037\041\042\042\036\043\051" +
    "\044\050\045\055\046\117\050\123\051\113\052\115\053" +
    "\133\055\uffe2\060\uffe2\064\124\100\121\105\016\001\002" +
    "\000\060\007\uffe2\013\uffe2\033\014\034\011\035\005\036" +
    "\012\037\040\040\037\041\042\042\036\043\051\044\050" +
    "\045\055\046\117\050\123\051\113\052\115\053\133\055" +
    "\uffe2\060\uffe2\064\124\100\121\105\016\001\002\000\006" +
    "\007\ufff0\060\164\001\002\000\004\004\134\001\002\000" +
    "\022\037\040\040\037\041\042\042\036\043\051\044\050" +
    "\045\055\100\135\001\002\000\004\013\175\001\002\000" +
    "\004\100\137\001\002\000\004\013\140\001\002\000\004" +
    "\100\141\001\002\000\012\023\146\024\145\025\144\032" +
    "\143\001\002\000\022\004\063\017\073\026\070\027\067" +
    "\077\072\100\064\101\060\104\057\001\002\000\004\025" +
    "\152\001\002\000\004\025\151\001\002\000\024\004\uffc7" +
    "\017\uffc7\025\150\026\uffc7\027\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\104\uffc7\001\002\000\024\004\uffc8\017\uffc8\025\147" +
    "\026\uffc8\027\uffc8\077\uffc8\100\uffc8\101\uffc8\104\uffc8\001" +
    "\002\000\022\004\uffc4\017\uffc4\026\uffc4\027\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\104\uffc4\001\002\000\022\004\uffc3\017" +
    "\uffc3\026\uffc3\027\uffc3\077\uffc3\100\uffc3\101\uffc3\104\uffc3" +
    "\001\002\000\022\004\uffc6\017\uffc6\026\uffc6\027\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\104\uffc6\001\002\000\022\004\uffc5" +
    "\017\uffc5\026\uffc5\027\uffc5\077\uffc5\100\uffc5\101\uffc5\104" +
    "\uffc5\001\002\000\020\012\075\013\154\016\100\017\076" +
    "\020\077\021\103\022\101\001\002\000\004\100\155\001" +
    "\002\000\014\016\100\017\076\020\077\021\103\022\101" +
    "\001\002\000\030\016\100\017\076\020\077\021\103\022" +
    "\101\026\070\027\067\077\072\100\165\101\060\104\057" +
    "\001\002\000\004\005\160\001\002\000\004\006\161\001" +
    "\002\000\056\007\uffe2\033\014\034\011\035\005\036\012" +
    "\037\040\040\037\041\042\042\036\043\051\044\050\045" +
    "\055\046\117\050\123\051\113\052\115\053\133\055\uffe2" +
    "\060\uffe2\064\124\100\121\105\016\001\002\000\010\007" +
    "\ufff0\055\ufff0\060\164\001\002\000\006\007\uffbe\055\170" +
    "\001\002\000\016\026\070\027\067\077\072\100\165\101" +
    "\060\104\057\001\002\000\010\005\uff85\013\uff85\014\uff85" +
    "\001\002\000\004\013\167\001\002\000\006\007\ufff1\055" +
    "\ufff1\001\002\000\006\007\uffbf\013\uffbf\001\002\000\004" +
    "\007\172\001\002\000\060\007\uffd0\013\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\060\uffd0\064\uffd0\100\uffd0\105\uffd0" +
    "\001\002\000\004\005\uffce\001\002\000\004\005\uffcd\001" +
    "\002\000\004\100\176\001\002\000\012\023\146\024\145" +
    "\025\144\032\143\001\002\000\022\004\063\017\073\026" +
    "\070\027\067\077\072\100\064\101\060\104\057\001\002" +
    "\000\020\012\075\013\201\016\100\017\076\020\077\021" +
    "\103\022\101\001\002\000\004\100\202\001\002\000\014" +
    "\016\100\017\076\020\077\021\103\022\101\001\002\000" +
    "\004\005\204\001\002\000\004\006\205\001\002\000\056" +
    "\007\uffe2\033\014\034\011\035\005\036\012\037\040\040" +
    "\037\041\042\042\036\043\051\044\050\045\055\046\117" +
    "\050\123\051\113\052\115\053\133\055\uffe2\060\uffe2\064" +
    "\124\100\121\105\016\001\002\000\010\007\ufff0\055\ufff0" +
    "\060\164\001\002\000\006\007\uffbe\055\170\001\002\000" +
    "\004\007\211\001\002\000\060\007\uffcf\013\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\055\uffcf\060\uffcf\064\uffcf\100\uffcf\105" +
    "\uffcf\001\002\000\004\007\213\001\002\000\062\003\uff9f" +
    "\007\uff9f\013\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\060" +
    "\uff9f\064\uff9f\100\uff9f\105\uff9f\001\002\000\012\007\uffe5" +
    "\013\uffe5\055\uffe5\060\uffe5\001\002\000\012\007\uffe7\013" +
    "\uffe7\055\uffe7\060\uffe7\001\002\000\012\007\uffe9\013\uffe9" +
    "\055\uffe9\060\uffe9\001\002\000\012\007\uffea\013\uffea\055" +
    "\uffea\060\uffea\001\002\000\004\004\232\001\002\000\004" +
    "\100\222\001\002\000\004\004\223\001\002\000\022\005" +
    "\uff8a\037\040\040\037\041\042\042\036\043\051\044\050" +
    "\045\055\001\002\000\004\005\225\001\002\000\004\006" +
    "\226\001\002\000\054\007\uffe2\033\014\034\011\035\005" +
    "\036\012\037\040\040\037\041\042\042\036\043\051\044" +
    "\050\045\055\046\117\050\123\051\113\052\115\053\133" +
    "\060\uffe2\064\124\100\121\105\016\001\002\000\006\007" +
    "\ufff0\060\164\001\002\000\004\007\231\001\002\000\062" +
    "\003\uffef\007\uffef\013\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055" +
    "\uffef\060\uffef\064\uffef\100\uffef\105\uffef\001\002\000\022" +
    "\005\uff8a\037\040\040\037\041\042\042\036\043\051\044" +
    "\050\045\055\001\002\000\004\005\234\001\002\000\004" +
    "\006\235\001\002\000\054\007\uffe2\033\014\034\011\035" +
    "\005\036\012\037\040\040\037\041\042\042\036\043\051" +
    "\044\050\045\055\046\117\050\123\051\113\052\115\053" +
    "\133\060\uffe2\064\124\100\121\105\016\001\002\000\006" +
    "\007\ufff0\060\164\001\002\000\004\007\240\001\002\000" +
    "\062\003\uffec\007\uffec\013\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\055\uffec\060\uffec\064\uffec\100\uffec\105\uffec\001\002\000" +
    "\004\065\242\001\002\000\004\015\243\001\002\000\004" +
    "\066\244\001\002\000\004\004\245\001\002\000\026\003" +
    "\250\004\063\005\uff8c\017\073\026\070\027\067\077\072" +
    "\100\064\101\060\104\057\001\002\000\022\005\uff8e\011" +
    "\uff8e\012\075\016\100\017\076\020\077\021\103\022\101" +
    "\001\002\000\004\005\251\001\002\000\006\005\uff8d\011" +
    "\uff8d\001\002\000\004\013\252\001\002\000\060\007\uffd8" +
    "\013\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\060\uffd8\064" +
    "\uffd8\100\uffd8\105\uffd8\001\002\000\056\007\uffe2\033\014" +
    "\034\011\035\005\036\012\037\040\040\037\041\042\042" +
    "\036\043\051\044\050\045\055\046\117\050\123\051\113" +
    "\052\115\053\133\055\uffe2\060\uffe2\064\124\100\121\105" +
    "\016\001\002\000\010\007\ufff0\055\ufff0\060\164\001\002" +
    "\000\006\007\uffbe\055\170\001\002\000\004\007\257\001" +
    "\002\000\004\051\260\001\002\000\004\004\261\001\002" +
    "\000\022\004\063\017\073\026\070\027\067\077\072\100" +
    "\064\101\060\104\057\001\002\000\026\012\075\016\100" +
    "\017\076\020\077\021\103\022\101\023\146\024\145\025" +
    "\144\032\143\001\002\000\010\005\uffca\030\uffca\031\uffca" +
    "\001\002\000\010\005\265\030\266\031\267\001\002\000" +
    "\004\013\272\001\002\000\022\004\063\017\073\026\070" +
    "\027\067\077\072\100\064\101\060\104\057\001\002\000" +
    "\022\004\063\017\073\026\070\027\067\077\072\100\064" +
    "\101\060\104\057\001\002\000\010\005\uffcc\030\uffcc\031" +
    "\uffcc\001\002\000\010\005\uffcb\030\uffcb\031\uffcb\001\002" +
    "\000\060\007\uffd1\013\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\060\uffd1\064\uffd1\100\uffd1\105\uffd1\001\002\000\022" +
    "\004\063\017\073\026\070\027\067\077\072\100\064\101" +
    "\060\104\057\001\002\000\024\005\uffc9\012\075\016\100" +
    "\017\076\020\077\021\103\022\101\030\uffc9\031\uffc9\001" +
    "\002\000\012\007\uffe6\013\uffe6\055\uffe6\060\uffe6\001\002" +
    "\000\020\026\070\027\067\076\314\077\072\100\316\101" +
    "\060\104\057\001\002\000\004\013\313\001\002\000\004" +
    "\015\301\001\002\000\014\062\302\063\303\070\305\071" +
    "\306\100\024\001\002\000\004\004\uffda\001\002\000\004" +
    "\004\uffd9\001\002\000\004\013\uffde\001\002\000\004\013" +
    "\uffdd\001\002\000\004\013\uffdc\001\002\000\004\004\310" +
    "\001\002\000\004\100\311\001\002\000\004\005\312\001" +
    "\002\000\004\013\uffdb\001\002\000\060\007\uffdf\013\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\055\uffdf\060\uffdf\064\uffdf\100" +
    "\uffdf\105\uffdf\001\002\000\004\100\017\001\002\000\004" +
    "\013\uff9b\001\002\000\010\004\ufff7\013\uff85\015\ufff7\001" +
    "\002\000\006\004\056\015\301\001\002\000\004\013\uff9d" +
    "\001\002\000\004\013\324\001\002\000\004\013\323\001" +
    "\002\000\060\007\uffe1\013\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\060\uffe1\064\uffe1\100\uffe1\105\uffe1\001\002\000" +
    "\060\007\uffe0\013\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\060\uffe0\064\uffe0\100\uffe0\105\uffe0\001\002\000\004\013" +
    "\uff9c\001\002\000\012\007\uffe4\013\uffe4\055\uffe4\060\uffe4" +
    "\001\002\000\022\004\063\017\073\026\070\027\067\077" +
    "\072\100\064\101\060\104\057\001\002\000\010\005\331" +
    "\030\266\031\267\001\002\000\004\006\332\001\002\000" +
    "\054\007\uffe2\033\014\034\011\035\005\036\012\037\040" +
    "\040\037\041\042\042\036\043\051\044\050\045\055\046" +
    "\117\050\123\051\113\052\115\053\133\060\uffe2\064\124" +
    "\100\121\105\016\001\002\000\006\007\ufff0\060\164\001" +
    "\002\000\004\007\335\001\002\000\062\007\uffd5\013\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\060\uffd5\064" +
    "\uffd5\100\uffd5\105\uffd5\001\002\000\062\007\uffd3\013\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\340" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\060\uffd3\064" +
    "\uffd3\100\uffd3\105\uffd3\001\002\000\060\007\uffd7\013\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\055\uffd7\060\uffd7\064\uffd7\100" +
    "\uffd7\105\uffd7\001\002\000\006\006\341\046\342\001\002" +
    "\000\054\007\uffe2\033\014\034\011\035\005\036\012\037" +
    "\040\040\037\041\042\042\036\043\051\044\050\045\055" +
    "\046\117\050\123\051\113\052\115\053\133\060\uffe2\064" +
    "\124\100\121\105\016\001\002\000\004\004\343\001\002" +
    "\000\022\004\063\017\073\026\070\027\067\077\072\100" +
    "\064\101\060\104\057\001\002\000\010\005\345\030\266" +
    "\031\267\001\002\000\004\006\346\001\002\000\054\007" +
    "\uffe2\033\014\034\011\035\005\036\012\037\040\040\037" +
    "\041\042\042\036\043\051\044\050\045\055\046\117\050" +
    "\123\051\113\052\115\053\133\060\uffe2\064\124\100\121" +
    "\105\016\001\002\000\006\007\ufff0\060\164\001\002\000" +
    "\004\007\351\001\002\000\062\007\uffd6\013\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\055\uffd6\060\uffd6\064\uffd6\100" +
    "\uffd6\105\uffd6\001\002\000\006\007\ufff0\060\164\001\002" +
    "\000\004\007\354\001\002\000\060\007\uffd4\013\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\055\uffd4\060\uffd4\064\uffd4\100\uffd4" +
    "\105\uffd4\001\002\000\012\007\uffeb\013\uffeb\055\uffeb\060" +
    "\uffeb\001\002\000\024\003\360\004\063\017\073\026\070" +
    "\027\067\077\072\100\064\101\060\104\057\001\002\000" +
    "\020\005\uffba\012\075\016\100\017\076\020\077\021\103" +
    "\022\101\001\002\000\004\005\uffb9\001\002\000\004\005" +
    "\362\001\002\000\004\006\363\001\002\000\004\054\364" +
    "\001\002\000\016\026\070\027\067\077\072\100\165\101" +
    "\060\104\057\001\002\000\010\007\uffbb\054\364\075\370" +
    "\001\002\000\010\007\uffc0\054\uffc0\075\uffc0\001\002\000" +
    "\004\007\376\001\002\000\004\014\372\001\002\000\010" +
    "\007\uffc1\054\uffc1\075\uffc1\001\002\000\054\013\uffe2\033" +
    "\014\034\011\035\005\036\012\037\040\040\037\041\042" +
    "\042\036\043\051\044\050\045\055\046\117\050\123\051" +
    "\113\052\115\053\133\055\uffe2\064\124\100\121\105\016" +
    "\001\002\000\006\013\uffbe\055\170\001\002\000\004\013" +
    "\375\001\002\000\004\007\uffbc\001\002\000\060\007\uffc2" +
    "\013\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\060\uffc2\064" +
    "\uffc2\100\uffc2\105\uffc2\001\002\000\004\014\u0100\001\002" +
    "\000\054\013\uffe2\033\014\034\011\035\005\036\012\037" +
    "\040\040\037\041\042\042\036\043\051\044\050\045\055" +
    "\046\117\050\123\051\113\052\115\053\133\055\uffe2\064" +
    "\124\100\121\105\016\001\002\000\006\013\uffbe\055\170" +
    "\001\002\000\004\013\u0103\001\002\000\010\007\uffbd\054" +
    "\uffbd\075\uffbd\001\002\000\012\007\uffe8\013\uffe8\055\uffe8" +
    "\060\uffe8\001\002\000\022\004\063\017\073\026\070\027" +
    "\067\077\072\100\064\101\060\104\057\001\002\000\010" +
    "\005\u0107\030\266\031\267\001\002\000\004\006\u0108\001" +
    "\002\000\056\007\uffe2\033\014\034\011\035\005\036\012" +
    "\037\040\040\037\041\042\042\036\043\051\044\050\045" +
    "\055\046\117\050\123\051\113\052\115\053\133\055\uffe2" +
    "\060\uffe2\064\124\100\121\105\016\001\002\000\010\007" +
    "\ufff0\055\ufff0\060\164\001\002\000\006\007\uffbe\055\170" +
    "\001\002\000\004\007\u010c\001\002\000\060\007\uffd2\013" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\060\uffd2\064\uffd2" +
    "\100\uffd2\105\uffd2\001\002\000\012\007\uffe3\013\uffe3\055" +
    "\uffe3\060\uffe3\001\002\000\006\005\uff88\012\u010f\001\002" +
    "\000\020\037\040\040\037\041\042\042\036\043\051\044" +
    "\050\045\055\001\002\000\004\005\uff89\001\002\000\022" +
    "\004\063\017\073\026\070\027\067\077\072\100\064\101" +
    "\060\104\057\001\002\000\026\003\250\004\063\011\uff8c" +
    "\017\073\026\070\027\067\077\072\100\064\101\060\104" +
    "\057\001\002\000\004\011\u0114\001\002\000\040\005\uff92" +
    "\011\uff92\012\uff92\013\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030\uff92\031\uff92" +
    "\032\uff92\001\002\000\020\005\u0116\012\075\016\100\017" +
    "\076\020\077\021\103\022\101\001\002\000\040\005\uff93" +
    "\011\uff93\012\uff93\013\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030\uff93\031\uff93" +
    "\032\uff93\001\002\000\020\005\u0118\012\075\016\100\017" +
    "\076\020\077\021\103\022\101\001\002\000\040\005\uff94" +
    "\011\uff94\012\uff94\013\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\030\uff94\031\uff94" +
    "\032\uff94\001\002\000\006\006\107\013\110\001\002\000" +
    "\062\003\uffa1\007\uffa1\013\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\055\uffa1\060\uffa1\064\uffa1\100\uffa1\105\uffa1\001\002\000" +
    "\004\002\ufffc\001\002\000\004\100\u011d\001\002\000\014" +
    "\003\uffad\004\223\012\uffad\013\uffad\025\uffad\001\002\000" +
    "\012\003\u0121\012\u0120\013\uffb4\025\u0122\001\002\000\004" +
    "\013\u0125\001\002\000\004\100\u0124\001\002\000\004\013" +
    "\uffb5\001\002\000\020\026\070\027\067\076\314\077\072" +
    "\100\316\101\060\104\057\001\002\000\004\013\uffb6\001" +
    "\002\000\012\003\uffae\012\uffae\013\uffae\025\uffae\001\002" +
    "\000\040\003\uffb7\007\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\100\uffb7\105\uffb7\001\002\000\004\007\ufff5\001" +
    "\002\000\014\003\uffad\004\u012b\012\uffad\013\uffad\025\uffad" +
    "\001\002\000\012\003\u0121\012\u0120\013\uffb4\025\u0122\001" +
    "\002\000\004\013\u012a\001\002\000\062\003\uffb8\007\uffb8" +
    "\013\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\060\uffb8\064" +
    "\uffb8\100\uffb8\105\uffb8\001\002\000\022\005\uff8a\037\040" +
    "\040\037\041\042\042\036\043\051\044\050\045\055\001" +
    "\002\000\004\005\u012d\001\002\000\004\006\u012e\001\002" +
    "\000\054\007\uffe2\033\014\034\011\035\005\036\012\037" +
    "\040\040\037\041\042\042\036\043\051\044\050\045\055" +
    "\046\117\050\123\051\113\052\115\053\133\060\uffe2\064" +
    "\124\100\121\105\016\001\002\000\006\007\ufff0\060\164" +
    "\001\002\000\004\007\u0131\001\002\000\062\003\uffee\007" +
    "\uffee\013\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\055\uffee\060\uffee" +
    "\064\uffee\100\uffee\105\uffee\001\002\000\004\007\ufff4\001" +
    "\002\000\004\007\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\014\002\007\003\006\005\005\025\012\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\024\005\005\025\012" +
    "\031\003\001\001\000\002\001\001\000\004\004\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\022\005\005\025\012\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\033\001\001\000\002\001\001\000\022\004\053\017" +
    "\044\022\043\025\045\031\046\032\052\033\040\035\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\053\017\044\022\043\025\045\031\046" +
    "\032\u0132\033\040\035\042\001\001\000\002\001\001\000" +
    "\022\004\053\017\044\022\043\025\045\031\046\032\u0131" +
    "\033\040\035\042\001\001\000\004\034\u0127\001\001\000" +
    "\002\001\001\000\022\004\053\017\044\022\043\025\045" +
    "\031\046\032\u0125\033\040\035\042\001\001\000\004\022" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\061\014\060\016\070\022\064\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\101\001\001\000\006\013\u0116\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\073\027\065\001\001\000" +
    "\004\020\101\001\001\000\006\013\104\027\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\103\027\065\001\001\000\002" +
    "\001\001\000\004\020\101\001\001\000\004\020\101\001" +
    "\001\000\004\054\110\001\001\000\036\004\053\017\044" +
    "\022\043\025\125\031\124\035\115\036\131\041\126\052" +
    "\113\055\117\056\111\062\130\063\121\064\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\053\017" +
    "\044\022\043\025\125\031\124\035\115\036\u010c\041\126" +
    "\052\113\055\117\056\111\062\130\063\121\064\127\001" +
    "\001\000\002\001\001\000\036\004\053\017\044\022\043" +
    "\025\125\031\124\035\115\036\u0103\041\126\052\113\055" +
    "\117\056\111\062\130\063\121\064\127\001\001\000\002" +
    "\001\001\000\036\004\053\017\044\022\043\025\125\031" +
    "\124\035\115\036\354\041\126\052\113\055\117\056\111" +
    "\062\130\063\121\064\127\001\001\000\002\001\001\000" +
    "\036\004\053\017\044\022\043\025\125\031\124\035\115" +
    "\036\325\041\126\052\113\055\117\056\111\062\130\063" +
    "\121\064\127\001\001\000\006\004\277\057\276\001\001" +
    "\000\036\004\053\017\044\022\043\025\125\031\124\035" +
    "\115\036\274\041\126\052\113\055\117\056\111\062\130" +
    "\063\121\064\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\220\001\001\000\036\004\053\017\044" +
    "\022\043\025\125\031\124\035\115\036\216\041\126\052" +
    "\113\055\117\056\111\062\130\063\121\064\127\001\001" +
    "\000\036\004\053\017\044\022\043\025\125\031\124\035" +
    "\115\036\215\041\126\052\113\055\117\056\111\062\130" +
    "\063\121\064\127\001\001\000\036\004\053\017\044\022" +
    "\043\025\125\031\124\035\115\036\214\041\126\052\113" +
    "\055\117\056\111\062\130\063\121\064\127\001\001\000" +
    "\036\004\053\017\044\022\043\025\125\031\124\035\115" +
    "\036\213\041\126\052\113\055\117\056\111\062\130\063" +
    "\121\064\127\001\001\000\004\040\211\001\001\000\002" +
    "\001\001\000\004\022\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\141\001\001\000\006\013\152\027\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\101\001\001\000\002" +
    "\001\001\000\006\020\155\037\156\001\001\000\006\020" +
    "\172\027\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\053\017\044\022\043\025\125\031\124\035" +
    "\115\036\161\041\126\052\113\055\117\056\111\062\130" +
    "\063\121\064\127\001\001\000\004\040\162\001\001\000" +
    "\004\044\170\001\001\000\004\027\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\176\001" +
    "\001\000\006\013\177\027\065\001\001\000\004\020\101" +
    "\001\001\000\002\001\001\000\006\020\155\037\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\053" +
    "\017\044\022\043\025\125\031\124\035\115\036\205\041" +
    "\126\052\113\055\117\056\111\062\130\063\121\064\127" +
    "\001\001\000\004\040\206\001\001\000\004\044\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\060\016\223\022" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\053\017\044\022\043\025\125\031\124\035\115\036" +
    "\226\041\126\052\113\055\117\056\111\062\130\063\121" +
    "\064\127\001\001\000\004\040\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\060\016\232\022\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\053\017\044\022\043\025\125\031\124\035\115\036\235" +
    "\041\126\052\113\055\117\056\111\062\130\063\121\064" +
    "\127\001\001\000\004\040\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\245\015\246" +
    "\027\065\001\001\000\004\020\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\053\017\044\022\043\025\125\031\124\035" +
    "\115\036\253\041\126\052\113\055\117\056\111\062\130" +
    "\063\121\064\127\001\001\000\004\040\254\001\001\000" +
    "\004\044\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\261\027\065\045\263\046" +
    "\262\001\001\000\006\020\101\047\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\261\027\065\045\270\046\262\001\001\000\012\013\261" +
    "\027\065\045\267\046\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\273\027\065" +
    "\001\001\000\004\020\101\001\001\000\002\001\001\000" +
    "\014\004\316\007\321\017\317\027\314\057\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\061\303\065" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\053\017\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\261\027\065\045\327\046\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\053\017\044" +
    "\022\043\025\125\031\124\035\115\036\332\041\126\052" +
    "\113\055\117\056\111\062\130\063\121\064\127\001\001" +
    "\000\004\040\333\001\001\000\002\001\001\000\004\050" +
    "\335\001\001\000\004\051\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\053\017\044\022\043\025" +
    "\125\031\124\035\115\036\351\041\126\052\113\055\117" +
    "\056\111\062\130\063\121\064\127\001\001\000\002\001" +
    "\001\000\012\013\261\027\065\045\343\046\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\053\017" +
    "\044\022\043\025\125\031\124\035\115\036\346\041\126" +
    "\052\113\055\117\056\111\062\130\063\121\064\127\001" +
    "\001\000\004\040\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\356\021\360" +
    "\027\065\001\001\000\004\020\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\364" +
    "\043\365\001\001\000\004\027\376\001\001\000\006\042" +
    "\366\043\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\053\017" +
    "\044\022\043\025\125\031\124\035\115\036\372\041\126" +
    "\052\113\055\117\056\111\062\130\063\121\064\127\001" +
    "\001\000\004\044\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\053\017\044\022\043\025\125\031\124\035\115\036\u0100" +
    "\041\126\052\113\055\117\056\111\062\130\063\121\064" +
    "\127\001\001\000\004\044\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\261\027" +
    "\065\045\u0105\046\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\053\017\044\022\043\025\125\031" +
    "\124\035\115\036\u0108\041\126\052\113\055\117\056\111" +
    "\062\130\063\121\064\127\001\001\000\004\040\u0109\001" +
    "\001\000\004\044\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\u010f\022\064\001\001\000\002\001\001\000\006\013\u0114" +
    "\027\065\001\001\000\010\013\245\015\u0112\027\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\101" +
    "\001\001\000\002\001\001\000\004\020\101\001\001\000" +
    "\002\001\001\000\004\054\u0119\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u011d\001\001\000\002\001" +
    "\001\000\004\012\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\053\007\u0122\017" +
    "\317\027\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0128\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\060\016\u012b\022\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\053\017\044\022\043" +
    "\025\125\031\124\035\115\036\u012e\041\126\052\113\055" +
    "\117\056\111\062\130\063\121\064\127\001\001\000\004" +
    "\040\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= IMPOR IMPORTS PYCOMA A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= COMENTARIOS A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A1 ::= A2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= VISIBILIDAD CLASS ID A3 LLAV_A EXPRESIONES LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A3 ::= EXTEN IMPORTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A3 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A3 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS ::= IMPORTS PUNTO ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTS ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= DECLARACION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= COMENTARIOS EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= DECLA2 EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RETURNS ::= RETUR VALORES PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA2 ::= VISIBILIDAD TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA2 ::= TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA2 ::= OTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLA2 ::= VISIBILIDAD ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE2 ::= DECLA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE2 ::= COMENTARIOS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE2 ::= SWITCHS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE2 ::= EXIF EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRE2 ::= OFOR EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRE2 ::= EXDO EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRE2 ::= EXWHI EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRE2 ::= PRINTF EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRE2 ::= ASIGNA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNA2 ::= ID IGUAL ASIGNA PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNA2 ::= ID IGUAL B1 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNA2 ::= ID B1 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // B1 ::= IMPORTS PUNTO B2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // B2 ::= PARSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // B2 ::= PARSF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // B2 ::= EXPRE4 PAR_A ID PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRE4 ::= NEXTL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRE4 ::= NEXTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRINTF ::= SYSTE PUNTO OUT PUNTO PRINT PAR_A PAR1 PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXIF ::= IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C OIF OE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXIF",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OIF ::= OIF ELSE IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OIF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OE ::= ELSE LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXWHI ::= WHILE PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXWHI",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXDO ::= DO LLAV_A EXPRE2 RETURNS BRE LLAV_C WHILE PAR_A COND PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXDO",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OFOR ::= FOR PAR_A TIPO ID PYCOMA ID OPREL PARAMETRO1 PYCOMA ID EXPRE3 PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OFOR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OFOR ::= FOR PAR_A ID PYCOMA ID OPREL PARAMETRO1 PYCOMA ID EXPRE3 PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OFOR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRE3 ::= OPERACION OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRE3 ::= OPERACION VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND ::= COND OR COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND ::= COND AND COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND ::= REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REL ::= PARAMETRO1 OPREL PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPREL ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPREL ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPREL ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPREL ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCHS ::= SWITCH PAR_A PAR11 PAR_C LLAV_A A5 DEF LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A5 ::= A5 CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A5 ::= CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BRE ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASO ::= CASE VALORES DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEF ::= DEFAU DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PAR11 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PAR11 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLA2 ::= TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= VISIBILIDAD TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // A4 ::= IGUAL ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // A4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // A4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COMENTARIOS ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COMENTL ::= DIVIS DIVIS VIENE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMENTM ::= DIVIS MULTI VIENE MULTI DIVIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VIENE ::= VIENE VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VIENE ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTAID ::= LISTAID COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTAID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VISIBILIDAD ::= PRIVAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VISIBILIDAD ::= PUBLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VISIBILIDAD ::= PROTEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VISIBILIDAD ::= FINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OTRO ::= IMPORTS PAR_A PARAMETRO1 PAR_C EXEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OTRO ::= IMPORTS PAR_A PAR2 PAR_C EXEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXEL ::= LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXEL ::= PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNA ::= OTRO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNA ::= NEW OTRO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIGNA ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION ::= DIVIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION ::= MODS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMETRO1 ::= RESTA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETRO1 ::= PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETRO1 ::= ID PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMETRO1 ::= ID COR_A PAR1 COR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETRO1 ::= PARAMETRO1 OPERACION PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETRO1 ::= PARAMETRO1 COMA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMETRO1 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PAR1 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PAR1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PAR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PAR2 ::= PARAMETRO2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PAR2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMETRO2 ::= TIPO ID COMA PARAMETRO2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMETRO2 ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
