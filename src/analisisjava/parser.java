
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjava;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\004\005\000\002\004\003\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\003\000\002\030" +
    "\002\000\002\033\013\000\002\033\012\000\002\033\011" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\034\002\000\002\033\006\000\002\031\007\000\002" +
    "\012\004\000\002\012\003\000\002\012\002\000\002\024" +
    "\003\000\002\024\003\000\002\022\005\000\002\023\007" +
    "\000\002\025\004\000\002\025\003\000\002\032\005\000" +
    "\002\032\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\007\006\000\002\007\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\013\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\002\000\002" +
    "\016\004\000\002\016\003\000\002\016\002\000\002\014" +
    "\005\000\002\014\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\003\016\022\017\033\020\034\013\035" +
    "\006\036\014\055\021\001\002\000\004\056\046\001\002" +
    "\000\042\003\uffe4\007\uffe4\022\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\055\uffe4\075\uffe4\001\002\000\024\003" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\056\uffdb\001\002\000\004\002\ufffd\001\002\000" +
    "\042\003\uffe5\007\uffe5\022\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\055\uffe5\075\uffe5\001\002\000\004\002\000" +
    "\001\002\000\004\002\045\001\002\000\024\003\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\056\uffdc\001\002\000\024\003\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\056\uffda\001\002" +
    "\000\020\003\016\022\017\033\020\034\013\035\006\036" +
    "\014\055\021\001\002\000\004\056\uffd9\001\002\000\006" +
    "\021\031\022\030\001\002\000\024\003\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\056\uffdd" +
    "\001\002\000\004\075\022\001\002\000\010\006\ufff7\013" +
    "\ufff7\015\ufff7\001\002\000\006\013\025\015\024\001\002" +
    "\000\004\075\027\001\002\000\020\003\016\022\017\033" +
    "\020\034\013\035\006\036\014\055\021\001\002\000\004" +
    "\002\uffff\001\002\000\012\004\ufff8\006\ufff8\013\ufff8\015" +
    "\ufff8\001\002\000\012\074\036\075\032\076\035\101\037" +
    "\001\002\000\012\074\036\075\032\076\035\101\037\001" +
    "\002\000\064\003\uffba\005\uffba\007\uffba\012\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\055\uffba\074\uffba\075\uffba\076\uffba\101" +
    "\uffba\001\002\000\052\003\uffe0\007\uffe0\021\uffe0\022\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\055\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\101\uffe0\001\002\000\014\021\041\074" +
    "\036\075\032\076\035\101\037\001\002\000\066\003\uffbb" +
    "\005\uffbb\007\uffbb\012\uffbb\013\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\055\uffbb\074\uffbb\075\uffbb\076\uffbb\101\uffbb\001\002" +
    "\000\066\003\uffbc\005\uffbc\007\uffbc\012\uffbc\013\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\055\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\101\uffbc\001\002\000\066\003\uffb9\005\uffb9\007\uffb9\012" +
    "\uffb9\013\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\055\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\101\uffb9\001\002\000\052\003\uffe1\007" +
    "\uffe1\021\uffe1\022\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\055\uffe1\074\uffe1\075\uffe1\076\uffe1\101\uffe1\001\002" +
    "\000\004\022\042\001\002\000\042\003\uffe2\007\uffe2\022" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\055\uffe2\075" +
    "\uffe2\001\002\000\050\003\uffe3\007\uffe3\022\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\055\uffe3\074\036\075\uffe3" +
    "\076\035\101\037\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\075\047\001\002\000\010" +
    "\003\051\006\ufff9\072\052\001\002\000\004\006\054\001" +
    "\002\000\004\006\ufffa\001\002\000\004\075\022\001\002" +
    "\000\006\006\ufffb\015\024\001\002\000\040\003\071\007" +
    "\ufff2\022\017\033\020\034\013\035\006\036\014\037\057" +
    "\040\055\041\061\042\056\043\070\044\067\045\073\075" +
    "\063\001\002\000\004\075\uffd7\001\002\000\004\075\uffd5" +
    "\001\002\000\004\075\uffd8\001\002\000\040\003\071\007" +
    "\ufff2\022\017\033\020\034\013\035\006\036\014\037\057" +
    "\040\055\041\061\042\056\043\070\044\067\045\073\075" +
    "\063\001\002\000\004\075\uffd6\001\002\000\040\003\071" +
    "\007\ufff2\022\017\033\020\034\013\035\006\036\014\037" +
    "\057\040\055\041\061\042\056\043\070\044\067\045\073" +
    "\075\063\001\002\000\004\004\176\001\002\000\004\075" +
    "\164\001\002\000\040\003\071\007\ufff2\022\017\033\020" +
    "\034\013\035\006\036\014\037\057\040\055\041\061\042" +
    "\056\043\070\044\067\045\073\075\063\001\002\000\022" +
    "\003\076\037\057\040\055\041\061\042\056\043\070\044" +
    "\067\045\073\001\002\000\004\075\uffd3\001\002\000\004" +
    "\075\uffd4\001\002\000\026\003\uffd9\007\ufff3\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\075\uffd1" +
    "\001\002\000\004\007\074\001\002\000\004\075\uffd2\001" +
    "\002\000\004\002\ufffc\001\002\000\004\075\077\001\002" +
    "\000\004\075\uffd1\001\002\000\014\003\uffde\004\137\012" +
    "\uffde\013\uffde\025\uffde\001\002\000\012\003\103\012\102" +
    "\013\uffe6\025\104\001\002\000\004\013\136\001\002\000" +
    "\004\075\135\001\002\000\004\013\uffe7\001\002\000\012" +
    "\074\036\075\105\076\035\101\037\001\002\000\010\004" +
    "\ufff7\013\uffba\015\ufff7\001\002\000\004\013\uffcf\001\002" +
    "\000\006\004\111\015\024\001\002\000\004\013\uffe8\001" +
    "\002\000\022\003\116\004\112\005\uffc2\017\117\074\036" +
    "\075\032\076\035\101\037\001\002\000\016\004\112\017" +
    "\117\074\036\075\032\076\035\101\037\001\002\000\020" +
    "\005\uffc4\012\122\016\124\017\123\020\121\021\127\022" +
    "\125\001\002\000\020\005\uffc5\012\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\001\002\000\004\005\132\001" +
    "\002\000\004\005\uffc3\001\002\000\016\004\112\017\117" +
    "\074\036\075\032\076\035\101\037\001\002\000\020\005" +
    "\uffc9\012\uffc9\016\uffc9\017\uffc9\020\121\021\127\022\125" +
    "\001\002\000\016\004\uffca\017\uffca\074\uffca\075\uffca\076" +
    "\uffca\101\uffca\001\002\000\016\004\112\017\117\074\036" +
    "\075\032\076\035\101\037\001\002\000\016\004\uffcd\017" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\101\uffcd\001\002\000\016" +
    "\004\uffce\017\uffce\074\uffce\075\uffce\076\uffce\101\uffce\001" +
    "\002\000\016\004\uffcc\017\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\101\uffcc\001\002\000\016\004\112\017\117\074\036\075" +
    "\032\076\035\101\037\001\002\000\016\004\uffcb\017\uffcb" +
    "\074\uffcb\075\uffcb\076\uffcb\101\uffcb\001\002\000\020\005" +
    "\uffc7\012\122\016\124\017\123\020\121\021\127\022\125" +
    "\001\002\000\020\005\uffc6\012\uffc6\016\124\017\123\020" +
    "\121\021\127\022\125\001\002\000\004\013\uffd0\001\002" +
    "\000\020\005\134\012\122\016\124\017\123\020\121\021" +
    "\127\022\125\001\002\000\020\005\uffc8\012\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\001\002\000\012\003" +
    "\uffdf\012\uffdf\013\uffdf\025\uffdf\001\002\000\040\003\uffe9" +
    "\007\uffe9\022\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\075\uffe9\001\002\000\024\003\143\005\uffbf\037\057\040" +
    "\055\041\061\042\056\043\070\044\067\045\073\001\002" +
    "\000\024\003\143\005\uffbf\037\057\040\055\041\061\042" +
    "\056\043\070\044\067\045\073\001\002\000\004\005\146" +
    "\001\002\000\004\075\144\001\002\000\006\005\uffc0\075" +
    "\uffd1\001\002\000\026\003\uffbd\005\uffbd\012\145\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\001" +
    "\002\000\024\003\uffbe\005\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000\004\006" +
    "\147\001\002\000\040\003\153\007\uffeb\022\017\033\020" +
    "\034\013\035\006\036\014\037\057\040\055\041\061\042" +
    "\056\043\070\044\067\045\073\075\063\001\002\000\040" +
    "\003\153\007\uffeb\022\017\033\020\034\013\035\006\036" +
    "\014\037\057\040\055\041\061\042\056\043\070\044\067" +
    "\045\073\075\063\001\002\000\040\003\153\007\uffeb\022" +
    "\017\033\020\034\013\035\006\036\014\037\057\040\055" +
    "\041\061\042\056\043\070\044\067\045\073\075\063\001" +
    "\002\000\022\003\076\037\057\040\055\041\061\042\056" +
    "\043\070\044\067\045\073\001\002\000\026\003\uffd9\007" +
    "\uffec\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\075\uffd1\001\002\000\004\007\155\001\002\000" +
    "\040\003\ufff1\007\ufff1\022\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\075\ufff1\001\002\000\004\075\157\001\002" +
    "\000\004\004\137\001\002\000\004\007\uffed\001\002\000" +
    "\004\007\uffee\001\002\000\004\005\uffc1\001\002\000\004" +
    "\007\ufff5\001\002\000\014\003\uffde\004\170\012\uffde\013" +
    "\uffde\025\uffde\001\002\000\012\003\103\012\102\013\uffe6" +
    "\025\104\001\002\000\004\013\167\001\002\000\040\003" +
    "\uffea\007\uffea\022\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\075\uffea\001\002\000\024\003\143\005\uffbf\037\057" +
    "\040\055\041\061\042\056\043\070\044\067\045\073\001" +
    "\002\000\004\005\172\001\002\000\004\006\173\001\002" +
    "\000\040\003\153\007\uffeb\022\017\033\020\034\013\035" +
    "\006\036\014\037\057\040\055\041\061\042\056\043\070" +
    "\044\067\045\073\075\063\001\002\000\004\007\175\001" +
    "\002\000\040\003\ufff0\007\ufff0\022\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\075\ufff0\001\002\000\024\003\143" +
    "\005\uffbf\037\057\040\055\041\061\042\056\043\070\044" +
    "\067\045\073\001\002\000\004\005\200\001\002\000\004" +
    "\006\201\001\002\000\040\003\153\007\uffeb\022\017\033" +
    "\020\034\013\035\006\036\014\037\057\040\055\041\061" +
    "\042\056\043\070\044\067\045\073\075\063\001\002\000" +
    "\004\007\203\001\002\000\040\003\uffef\007\uffef\022\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\075\uffef\001\002" +
    "\000\004\007\ufff4\001\002\000\004\007\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\002\011\003\010\005\006\022\007\023" +
    "\004\024\014\027\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\043\005\006\022\007\023" +
    "\004\024\014\027\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\025\005\006\022\007\023\004\024\014\027\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\042" +
    "\026\032\001\001\000\006\025\033\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\052\001\001\000\002\001" +
    "\001\000\022\021\063\022\007\023\004\024\064\027\065" +
    "\030\071\031\057\033\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\063\022\007" +
    "\023\004\024\064\027\065\030\204\031\057\033\061\001" +
    "\001\000\002\001\001\000\022\021\063\022\007\023\004" +
    "\024\064\027\065\030\203\031\057\033\061\001\001\000" +
    "\002\001\001\000\004\032\164\001\001\000\022\021\063" +
    "\022\007\023\004\024\064\027\065\030\162\031\057\033" +
    "\061\001\001\000\004\021\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\106\007\107\026\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\112\015\114\026\113\001\001\000\006\013" +
    "\132\026\113\001\001\000\004\020\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\117\026\113\001\001\000\004\020\125\001\001\000\002" +
    "\001\001\000\006\013\130\026\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\127" +
    "\026\113\001\001\000\002\001\001\000\004\020\125\001" +
    "\001\000\004\020\125\001\001\000\002\001\001\000\004" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\137\016\140\021\141\001\001" +
    "\000\010\014\137\016\161\021\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\063\022" +
    "\007\023\004\024\150\027\151\033\147\034\153\001\001" +
    "\000\020\021\063\022\007\023\004\024\150\027\151\033" +
    "\147\034\160\001\001\000\020\021\063\022\007\023\004" +
    "\024\150\027\151\033\147\034\157\001\001\000\004\021" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\137\016\170\021\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\063\022\007\023\004\024\150\027\151\033\147\034\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\137\016\176\021\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\063\022\007\023\004\024\150\027" +
    "\151\033\147\034\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= IMPOR IMPORTS PYCOMA A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= COMENTARIOS A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A1 ::= A2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= VISIBILIDAD CLASS ID A3 LLAV_A EXPRESIONES LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A3 ::= EXTEN IMPORTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A3 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A3 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS ::= IMPORTS PUNTO ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTS ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= DECLARACION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= COMENTARIOS EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= DECLA2 EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLA2 ::= VISIBILIDAD TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA2 ::= TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA2 ::= ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRE2 ::= DECLA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRE2 ::= COMENTARIOS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLA2 ::= TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VISIBILIDAD TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // A4 ::= IGUAL ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // A4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // A4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMENTARIOS ::= COMENTL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMENTARIOS ::= COMENTM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMENTL ::= DIVIS DIVIS VIENE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMENTM ::= DIVIS MULTI VIENE MULTI DIVIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VIENE ::= VIENE VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VIENE ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTAID ::= LISTAID COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VISIBILIDAD ::= PRIVAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VISIBILIDAD ::= PUBLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VISIBILIDAD ::= PROTEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VISIBILIDAD ::= FINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VISIBILIDAD ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNA ::= IMPORTS PAR_A PAR1 PAR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNA ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION ::= DIVIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= MODS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETRO1 ::= RESTA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETRO1 ::= PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETRO1 ::= PARAMETRO1 OPERACION PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETRO1 ::= PARAMETRO1 COMA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETRO1 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PAR1 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PAR1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PAR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PAR2 ::= PARAMETRO2 PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PAR2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PAR2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETRO2 ::= TIPO ID COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETRO2 ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
