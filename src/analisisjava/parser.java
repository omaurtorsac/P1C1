
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisisjava;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\004\005\000\002\004\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\003\000\002\032" +
    "\002\000\002\040\003\000\002\040\002\000\002\035\014" +
    "\000\002\035\013\000\002\035\012\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\002\000\002\052\014\000\002\050\014\000\002\050\002" +
    "\000\002\051\007\000\002\051\002\000\002\055\013\000" +
    "\002\056\015\000\002\057\023\000\002\057\022\000\002" +
    "\037\004\000\002\037\004\000\002\045\005\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\047\003" +
    "\000\002\047\003\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\041\012\000\002" +
    "\011\004\000\002\011\003\000\002\044\003\000\002\044" +
    "\002\000\002\043\010\000\002\042\007\000\002\042\002" +
    "\000\002\021\003\000\002\021\003\000\002\035\006\000" +
    "\002\033\007\000\002\012\004\000\002\012\003\000\002" +
    "\012\002\000\002\025\003\000\002\025\003\000\002\023" +
    "\005\000\002\024\007\000\002\026\004\000\002\026\003" +
    "\000\002\034\005\000\002\034\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\007\006\000\002\007\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\013\004\000\002\013\005\000\002\013" +
    "\006\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\002\000" +
    "\002\016\004\000\002\016\003\000\002\016\002\000\002" +
    "\014\005\000\002\014\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\016\022\016\033\017\034\013\035\006\036" +
    "\014\056\020\001\002\000\004\057\047\001\002\000\062" +
    "\003\uffbf\007\uffbf\013\uffbf\022\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\060\uffbf\077\uffbf\001\002\000\022" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\057\uffb6\001\002\000\004\002\ufffd\001\002\000\062" +
    "\003\uffc0\007\uffc0\013\uffc0\022\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\055\uffc0\056\uffc0\060\uffc0\077\uffc0\001\002\000\004" +
    "\002\000\001\002\000\004\002\046\001\002\000\022\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\057\uffb7\001\002\000\022\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\057\uffb5\001\002\000\016" +
    "\022\016\033\017\034\013\035\006\036\014\056\020\001" +
    "\002\000\006\021\030\022\027\001\002\000\022\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\057" +
    "\uffb8\001\002\000\004\077\021\001\002\000\010\006\ufff7" +
    "\013\ufff7\015\ufff7\001\002\000\006\013\024\015\023\001" +
    "\002\000\004\077\026\001\002\000\016\022\016\033\017" +
    "\034\013\035\006\036\014\056\020\001\002\000\004\002" +
    "\uffff\001\002\000\012\004\ufff8\006\ufff8\013\ufff8\015\ufff8" +
    "\001\002\000\016\026\034\027\033\076\037\077\031\100" +
    "\036\103\040\001\002\000\016\026\034\027\033\076\037" +
    "\077\031\100\036\103\040\001\002\000\102\003\uff96\005" +
    "\uff96\007\uff96\013\uff96\014\uff96\021\uff96\022\uff96\026\uff96" +
    "\027\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\060" +
    "\uff96\076\uff96\077\uff96\100\uff96\103\uff96\001\002\000\076" +
    "\003\uffbb\007\uffbb\013\uffbb\021\uffbb\022\uffbb\026\uffbb\027" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\060\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\103\uffbb\001\002\000\126\003" +
    "\uff93\005\uff93\007\uff93\012\uff93\013\uff93\014\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\055\uff93\056\uff93\060\uff93\076\uff93\077" +
    "\uff93\100\uff93\103\uff93\001\002\000\126\003\uff94\005\uff94" +
    "\007\uff94\012\uff94\013\uff94\014\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\055\uff94\056\uff94\060\uff94\076\uff94\077\uff94\100\uff94" +
    "\103\uff94\001\002\000\020\021\042\026\034\027\033\076" +
    "\037\077\031\100\036\103\040\001\002\000\126\003\uff97" +
    "\005\uff97\007\uff97\012\uff97\013\uff97\014\uff97\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\055\uff97\056\uff97\060\uff97\076\uff97\077\uff97" +
    "\100\uff97\103\uff97\001\002\000\126\003\uff98\005\uff98\007" +
    "\uff98\012\uff98\013\uff98\014\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\055\uff98\056\uff98\060\uff98\076\uff98\077\uff98\100\uff98\103" +
    "\uff98\001\002\000\126\003\uff95\005\uff95\007\uff95\012\uff95" +
    "\013\uff95\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056" +
    "\uff95\060\uff95\076\uff95\077\uff95\100\uff95\103\uff95\001\002" +
    "\000\076\003\uffbc\007\uffbc\013\uffbc\021\uffbc\022\uffbc\026" +
    "\uffbc\027\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\076\uffbc\077\uffbc\100\uffbc\103\uffbc\001\002\000" +
    "\004\022\043\001\002\000\062\003\uffbd\007\uffbd\013\uffbd" +
    "\022\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd\060" +
    "\uffbd\077\uffbd\001\002\000\074\003\uffbe\007\uffbe\013\uffbe" +
    "\022\uffbe\026\034\027\033\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055" +
    "\uffbe\056\uffbe\060\uffbe\076\037\077\uffbe\100\036\103\040" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002\000\004\077\050\001\002\000\010\003\052\006\ufff9" +
    "\073\053\001\002\000\004\006\055\001\002\000\004\006" +
    "\ufffa\001\002\000\004\077\021\001\002\000\006\006\ufffb" +
    "\015\023\001\002\000\040\003\072\007\ufff2\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\077\064\001\002\000" +
    "\004\077\uffb1\001\002\000\004\077\uffb3\001\002\000\004" +
    "\077\uffb4\001\002\000\040\003\072\007\ufff2\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\077\064\001\002\000" +
    "\004\077\uffb2\001\002\000\040\003\072\007\ufff2\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\077\064\001\002" +
    "\000\004\004\u0103\001\002\000\004\077\370\001\002\000" +
    "\040\003\072\007\ufff2\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\077\064\001\002\000\020\037\060\040\057" +
    "\041\062\042\056\043\071\044\070\045\074\001\002\000" +
    "\004\077\uffaf\001\002\000\004\077\uffb0\001\002\000\004" +
    "\007\ufff3\001\002\000\004\007\075\001\002\000\004\077" +
    "\uffae\001\002\000\004\002\ufffc\001\002\000\004\077\077" +
    "\001\002\000\014\003\uffb9\004\143\012\uffb9\013\uffb9\025" +
    "\uffb9\001\002\000\012\003\103\012\102\013\uffc1\025\104" +
    "\001\002\000\004\013\142\001\002\000\004\077\141\001" +
    "\002\000\004\013\uffc2\001\002\000\016\026\034\027\033" +
    "\076\037\077\106\100\036\103\040\001\002\000\004\013" +
    "\uffac\001\002\000\010\004\ufff7\013\uff96\015\ufff7\001\002" +
    "\000\006\004\111\015\023\001\002\000\004\013\uffc3\001" +
    "\002\000\026\003\117\004\112\005\uff9e\017\120\026\034" +
    "\027\033\076\037\077\116\100\036\103\040\001\002\000" +
    "\022\004\112\017\120\026\034\027\033\076\037\077\116" +
    "\100\036\103\040\001\002\000\020\005\uffa0\012\122\016" +
    "\125\017\123\020\124\021\130\022\126\001\002\000\036" +
    "\005\uffa1\012\uffa1\013\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\001\002\000\004\005\136\001\002\000\040\004" +
    "\133\005\uff96\012\uff96\013\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\030\uff96\031" +
    "\uff96\032\uff96\001\002\000\004\005\uff9f\001\002\000\022" +
    "\004\112\017\120\026\034\027\033\076\037\077\116\100" +
    "\036\103\040\001\002\000\036\005\uffa6\012\uffa6\013\uffa6" +
    "\016\uffa6\017\uffa6\020\124\021\130\022\126\023\uffa6\024" +
    "\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\001\002\000\022" +
    "\004\112\017\120\026\034\027\033\076\037\077\116\100" +
    "\036\103\040\001\002\000\034\004\uffaa\005\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\026\uffaa\027\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\103\uffaa\001\002\000\034\004\uffa7" +
    "\005\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\026" +
    "\uffa7\027\uffa7\076\uffa7\077\uffa7\100\uffa7\103\uffa7\001\002" +
    "\000\034\004\uffab\005\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\026\uffab\027\uffab\076\uffab\077\uffab\100\uffab" +
    "\103\uffab\001\002\000\034\004\uffa9\005\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\026\uffa9\027\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\103\uffa9\001\002\000\022\004\112\017" +
    "\120\026\034\027\033\076\037\077\116\100\036\103\040" +
    "\001\002\000\034\004\uffa8\005\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\026\uffa8\027\uffa8\076\uffa8\077\uffa8" +
    "\100\uffa8\103\uffa8\001\002\000\036\005\uffa3\012\122\013" +
    "\uffa3\016\125\017\123\020\124\021\130\022\126\023\uffa3" +
    "\024\uffa3\025\uffa3\030\uffa3\031\uffa3\032\uffa3\001\002\000" +
    "\036\005\uffa2\012\uffa2\013\uffa2\016\125\017\123\020\124" +
    "\021\130\022\126\023\uffa2\024\uffa2\025\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\001\002\000\022\004\112\017\120\026\034" +
    "\027\033\076\037\077\116\100\036\103\040\001\002\000" +
    "\020\005\135\012\122\016\125\017\123\020\124\021\130" +
    "\022\126\001\002\000\036\005\uffa4\012\uffa4\013\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\030\uffa4\031\uffa4\032\uffa4\001\002\000\004\013" +
    "\uffad\001\002\000\020\005\140\012\122\016\125\017\123" +
    "\020\124\021\130\022\126\001\002\000\036\005\uffa5\012" +
    "\uffa5\013\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5\001" +
    "\002\000\012\003\uffba\012\uffba\013\uffba\025\uffba\001\002" +
    "\000\040\003\uffc4\007\uffc4\022\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\077\uffc4\001\002\000\024\003\146\005" +
    "\uff9b\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\001\002\000\024\003\146\005\uff9b\037\060\040" +
    "\057\041\062\042\056\043\071\044\070\045\074\001\002" +
    "\000\004\005\152\001\002\000\004\005\uff9c\001\002\000" +
    "\004\077\150\001\002\000\026\003\uff99\005\uff99\012\151" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\001\002\000\024\003\uff9a\005\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\001\002\000" +
    "\004\006\153\001\002\000\052\007\uffe5\022\016\033\017" +
    "\034\013\035\006\036\014\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\046\160\050\162\051\154" +
    "\052\157\053\171\060\uffe5\077\064\001\002\000\004\004" +
    "\356\001\002\000\056\007\uffe5\013\uffe5\022\016\033\017" +
    "\034\013\035\006\036\014\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\046\160\050\162\051\154" +
    "\052\157\053\171\055\uffe5\060\uffe5\077\064\001\002\000" +
    "\056\007\uffe5\013\uffe5\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\046\160\050\162\051\154\052\157\053\171" +
    "\055\uffe5\060\uffe5\077\064\001\002\000\004\004\326\001" +
    "\002\000\004\004\300\001\002\000\056\007\uffe5\013\uffe5" +
    "\022\016\033\017\034\013\035\006\036\014\037\060\040" +
    "\057\041\062\042\056\043\071\044\070\045\074\046\160" +
    "\050\162\051\154\052\157\053\171\055\uffe5\060\uffe5\077" +
    "\064\001\002\000\004\006\255\001\002\000\056\007\uffe5" +
    "\013\uffe5\022\016\033\017\034\013\035\006\036\014\037" +
    "\060\040\057\041\062\042\056\043\071\044\070\045\074" +
    "\046\160\050\162\051\154\052\157\053\171\055\uffe5\060" +
    "\uffe5\077\064\001\002\000\020\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\001\002\000\056\007" +
    "\uffe5\013\uffe5\022\016\033\017\034\013\035\006\036\014" +
    "\037\060\040\057\041\062\042\056\043\071\044\070\045" +
    "\074\046\160\050\162\051\154\052\157\053\171\055\uffe5" +
    "\060\uffe5\077\064\001\002\000\056\007\uffe5\013\uffe5\022" +
    "\016\033\017\034\013\035\006\036\014\037\060\040\057" +
    "\041\062\042\056\043\071\044\070\045\074\046\160\050" +
    "\162\051\154\052\157\053\171\055\uffe5\060\uffe5\077\064" +
    "\001\002\000\056\007\uffe5\013\uffe5\022\016\033\017\034" +
    "\013\035\006\036\014\037\060\040\057\041\062\042\056" +
    "\043\071\044\070\045\074\046\160\050\162\051\154\052" +
    "\157\053\171\055\uffe5\060\uffe5\077\064\001\002\000\006" +
    "\007\ufff0\060\222\001\002\000\004\004\172\001\002\000" +
    "\022\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\077\173\001\002\000\004\013\230\001\002\000" +
    "\004\077\175\001\002\000\004\013\176\001\002\000\004" +
    "\077\177\001\002\000\012\023\204\024\203\025\202\032" +
    "\201\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\076\037\077\116\100\036\103\040\001\002\000\004\025" +
    "\210\001\002\000\004\025\207\001\002\000\024\004\uffd4" +
    "\017\uffd4\025\206\026\uffd4\027\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\103\uffd4\001\002\000\024\004\uffd5\017\uffd5\025\205" +
    "\026\uffd5\027\uffd5\076\uffd5\077\uffd5\100\uffd5\103\uffd5\001" +
    "\002\000\022\004\uffd1\017\uffd1\026\uffd1\027\uffd1\076\uffd1" +
    "\077\uffd1\100\uffd1\103\uffd1\001\002\000\022\004\uffd0\017" +
    "\uffd0\026\uffd0\027\uffd0\076\uffd0\077\uffd0\100\uffd0\103\uffd0" +
    "\001\002\000\022\004\uffd3\017\uffd3\026\uffd3\027\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\103\uffd3\001\002\000\022\004\uffd2" +
    "\017\uffd2\026\uffd2\027\uffd2\076\uffd2\077\uffd2\100\uffd2\103" +
    "\uffd2\001\002\000\020\012\122\013\212\016\125\017\123" +
    "\020\124\021\130\022\126\001\002\000\004\077\213\001" +
    "\002\000\014\016\125\017\123\020\124\021\130\022\126" +
    "\001\002\000\030\016\125\017\123\020\124\021\130\022" +
    "\126\026\034\027\033\076\037\077\031\100\036\103\040" +
    "\001\002\000\004\005\216\001\002\000\004\006\217\001" +
    "\002\000\054\007\uffe5\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\046\160\050\162\051\154\052\157\053\171" +
    "\055\uffe5\060\uffe5\077\064\001\002\000\010\007\ufff0\055" +
    "\ufff0\060\222\001\002\000\006\007\uffcb\055\223\001\002" +
    "\000\006\007\ufff1\055\ufff1\001\002\000\006\007\uffcc\013" +
    "\uffcc\001\002\000\004\007\225\001\002\000\056\007\uffdd" +
    "\013\uffdd\022\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\060" +
    "\uffdd\077\uffdd\001\002\000\004\005\uffdb\001\002\000\004" +
    "\005\uffda\001\002\000\004\077\231\001\002\000\012\023" +
    "\204\024\203\025\202\032\201\001\002\000\022\004\112" +
    "\017\120\026\034\027\033\076\037\077\116\100\036\103" +
    "\040\001\002\000\020\012\122\013\234\016\125\017\123" +
    "\020\124\021\130\022\126\001\002\000\004\077\235\001" +
    "\002\000\014\016\125\017\123\020\124\021\130\022\126" +
    "\001\002\000\004\005\237\001\002\000\004\006\240\001" +
    "\002\000\054\007\uffe5\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\046\160\050\162\051\154\052\157\053\171" +
    "\055\uffe5\060\uffe5\077\064\001\002\000\010\007\ufff0\055" +
    "\ufff0\060\222\001\002\000\006\007\uffcb\055\223\001\002" +
    "\000\004\007\244\001\002\000\056\007\uffdc\013\uffdc\022" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\060\uffdc\077\uffdc" +
    "\001\002\000\004\007\246\001\002\000\060\003\uffef\007" +
    "\uffef\013\uffef\022\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055\uffef" +
    "\060\uffef\077\uffef\001\002\000\012\007\uffe6\013\uffe6\055" +
    "\uffe6\060\uffe6\001\002\000\012\007\uffe8\013\uffe8\055\uffe8" +
    "\060\uffe8\001\002\000\012\007\uffea\013\uffea\055\uffea\060" +
    "\uffea\001\002\000\004\077\253\001\002\000\004\004\143" +
    "\001\002\000\012\007\uffeb\013\uffeb\055\uffeb\060\uffeb\001" +
    "\002\000\054\007\uffe5\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\046\160\050\162\051\154\052\157\053\171" +
    "\055\uffe5\060\uffe5\077\064\001\002\000\010\007\ufff0\055" +
    "\ufff0\060\222\001\002\000\006\007\uffcb\055\223\001\002" +
    "\000\004\007\261\001\002\000\004\051\262\001\002\000" +
    "\004\004\263\001\002\000\022\004\112\017\120\026\034" +
    "\027\033\076\037\077\116\100\036\103\040\001\002\000" +
    "\026\012\122\016\125\017\123\020\124\021\130\022\126" +
    "\023\204\024\203\025\202\032\201\001\002\000\010\005" +
    "\uffd7\030\uffd7\031\uffd7\001\002\000\010\005\267\030\270" +
    "\031\271\001\002\000\004\013\274\001\002\000\022\004" +
    "\112\017\120\026\034\027\033\076\037\077\116\100\036" +
    "\103\040\001\002\000\022\004\112\017\120\026\034\027" +
    "\033\076\037\077\116\100\036\103\040\001\002\000\010" +
    "\005\uffd9\030\uffd9\031\uffd9\001\002\000\010\005\uffd8\030" +
    "\uffd8\031\uffd8\001\002\000\056\007\uffde\013\uffde\022\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\055\uffde\060\uffde\077\uffde\001" +
    "\002\000\022\004\112\017\120\026\034\027\033\076\037" +
    "\077\116\100\036\103\040\001\002\000\024\005\uffd6\012" +
    "\122\016\125\017\123\020\124\021\130\022\126\030\uffd6" +
    "\031\uffd6\001\002\000\012\007\uffe7\013\uffe7\055\uffe7\060" +
    "\uffe7\001\002\000\022\004\112\017\120\026\034\027\033" +
    "\076\037\077\116\100\036\103\040\001\002\000\010\005" +
    "\302\030\270\031\271\001\002\000\004\006\303\001\002" +
    "\000\052\007\uffe5\022\016\033\017\034\013\035\006\036" +
    "\014\037\060\040\057\041\062\042\056\043\071\044\070" +
    "\045\074\046\160\050\162\051\154\052\157\053\171\060" +
    "\uffe5\077\064\001\002\000\006\007\ufff0\060\222\001\002" +
    "\000\004\007\306\001\002\000\060\007\uffe2\013\uffe2\022" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\060\uffe2" +
    "\077\uffe2\001\002\000\060\007\uffe0\013\uffe0\022\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\311\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\060\uffe0\077\uffe0" +
    "\001\002\000\056\007\uffe4\013\uffe4\022\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\055\uffe4\060\uffe4\077\uffe4\001\002\000\006" +
    "\006\312\046\313\001\002\000\052\007\uffe5\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\046\160\050\162\051" +
    "\154\052\157\053\171\060\uffe5\077\064\001\002\000\004" +
    "\004\314\001\002\000\022\004\112\017\120\026\034\027" +
    "\033\076\037\077\116\100\036\103\040\001\002\000\010" +
    "\005\316\030\270\031\271\001\002\000\004\006\317\001" +
    "\002\000\052\007\uffe5\022\016\033\017\034\013\035\006" +
    "\036\014\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\046\160\050\162\051\154\052\157\053\171" +
    "\060\uffe5\077\064\001\002\000\006\007\ufff0\060\222\001" +
    "\002\000\004\007\322\001\002\000\060\007\uffe3\013\uffe3" +
    "\022\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\060" +
    "\uffe3\077\uffe3\001\002\000\006\007\ufff0\060\222\001\002" +
    "\000\004\007\325\001\002\000\056\007\uffe1\013\uffe1\022" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\060\uffe1\077\uffe1" +
    "\001\002\000\024\003\330\004\112\017\120\026\034\027" +
    "\033\076\037\077\116\100\036\103\040\001\002\000\020" +
    "\005\uffc7\012\122\016\125\017\123\020\124\021\130\022" +
    "\126\001\002\000\004\005\uffc6\001\002\000\004\005\332" +
    "\001\002\000\004\006\333\001\002\000\004\054\334\001" +
    "\002\000\016\026\034\027\033\076\037\077\031\100\036" +
    "\103\040\001\002\000\010\007\uffc8\054\334\075\340\001" +
    "\002\000\010\007\uffcd\054\uffcd\075\uffcd\001\002\000\004" +
    "\007\346\001\002\000\004\014\342\001\002\000\010\007" +
    "\uffce\054\uffce\075\uffce\001\002\000\052\013\uffe5\022\016" +
    "\033\017\034\013\035\006\036\014\037\060\040\057\041" +
    "\062\042\056\043\071\044\070\045\074\046\160\050\162" +
    "\051\154\052\157\053\171\055\uffe5\077\064\001\002\000" +
    "\006\013\uffcb\055\223\001\002\000\004\013\345\001\002" +
    "\000\004\007\uffc9\001\002\000\056\007\uffcf\013\uffcf\022" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\060\uffcf\077\uffcf" +
    "\001\002\000\004\014\350\001\002\000\052\013\uffe5\022" +
    "\016\033\017\034\013\035\006\036\014\037\060\040\057" +
    "\041\062\042\056\043\071\044\070\045\074\046\160\050" +
    "\162\051\154\052\157\053\171\055\uffe5\077\064\001\002" +
    "\000\006\013\uffcb\055\223\001\002\000\004\013\353\001" +
    "\002\000\010\007\uffca\054\uffca\075\uffca\001\002\000\012" +
    "\007\uffec\013\uffec\055\uffec\060\uffec\001\002\000\012\007" +
    "\uffe9\013\uffe9\055\uffe9\060\uffe9\001\002\000\022\004\112" +
    "\017\120\026\034\027\033\076\037\077\116\100\036\103" +
    "\040\001\002\000\010\005\360\030\270\031\271\001\002" +
    "\000\004\006\361\001\002\000\054\007\uffe5\022\016\033" +
    "\017\034\013\035\006\036\014\037\060\040\057\041\062" +
    "\042\056\043\071\044\070\045\074\046\160\050\162\051" +
    "\154\052\157\053\171\055\uffe5\060\uffe5\077\064\001\002" +
    "\000\010\007\ufff0\055\ufff0\060\222\001\002\000\006\007" +
    "\uffcb\055\223\001\002\000\004\007\365\001\002\000\056" +
    "\007\uffdf\013\uffdf\022\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\060\uffdf\077\uffdf\001\002\000\004\005\uff9d\001\002" +
    "\000\004\007\ufff5\001\002\000\014\003\uffb9\004\374\012" +
    "\uffb9\013\uffb9\025\uffb9\001\002\000\012\003\103\012\102" +
    "\013\uffc1\025\104\001\002\000\004\013\373\001\002\000" +
    "\060\003\uffc5\007\uffc5\013\uffc5\022\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\055\uffc5\060\uffc5\077\uffc5\001\002\000\024\003" +
    "\146\005\uff9b\037\060\040\057\041\062\042\056\043\071" +
    "\044\070\045\074\001\002\000\004\005\376\001\002\000" +
    "\004\006\377\001\002\000\052\007\uffe5\022\016\033\017" +
    "\034\013\035\006\036\014\037\060\040\057\041\062\042" +
    "\056\043\071\044\070\045\074\046\160\050\162\051\154" +
    "\052\157\053\171\060\uffe5\077\064\001\002\000\006\007" +
    "\ufff0\060\222\001\002\000\004\007\u0102\001\002\000\060" +
    "\003\uffee\007\uffee\013\uffee\022\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\055\uffee\060\uffee\077\uffee\001\002\000\024\003\146" +
    "\005\uff9b\037\060\040\057\041\062\042\056\043\071\044" +
    "\070\045\074\001\002\000\004\005\u0105\001\002\000\004" +
    "\006\u0106\001\002\000\052\007\uffe5\022\016\033\017\034" +
    "\013\035\006\036\014\037\060\040\057\041\062\042\056" +
    "\043\071\044\070\045\074\046\160\050\162\051\154\052" +
    "\157\053\171\060\uffe5\077\064\001\002\000\006\007\ufff0" +
    "\060\222\001\002\000\004\007\u0109\001\002\000\060\003" +
    "\uffed\007\uffed\013\uffed\022\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\055\uffed\060\uffed\077\uffed\001\002\000\004\007\ufff4\001" +
    "\002\000\004\007\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\020\002\011\003\010\005\006\023\007\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\044\005\006\023\007\024" +
    "\004\025\014\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\024\005\006" +
    "\023\007\024\004\025\014\031\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\043\027\031\001\001" +
    "\000\006\026\034\027\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\053\001" +
    "\001\000\002\001\001\000\022\022\064\023\007\024\004" +
    "\025\065\031\066\032\072\033\060\035\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\022\064\023\007\024\004\025\065\031\066\032\u010a\033" +
    "\060\035\062\001\001\000\002\001\001\000\022\022\064" +
    "\023\007\024\004\025\065\031\066\032\u0109\033\060\035" +
    "\062\001\001\000\002\001\001\000\004\034\370\001\001" +
    "\000\022\022\064\023\007\024\004\025\065\031\066\032" +
    "\366\033\060\035\062\001\001\000\004\022\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\077\001\001\000\002\001\001\000\004\012\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\106\007\107\027\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\112\015\114\027\113\001\001\000\006\013" +
    "\136\027\113\001\001\000\004\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\120\027\113\001\001\000\004\020\126" +
    "\001\001\000\006\013\131\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\130\027\113\001\001\000\002\001\001\000" +
    "\004\020\126\001\001\000\004\020\126\001\001\000\006" +
    "\013\133\027\113\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\143\016\144\022\146\001\001\000\010\014\143" +
    "\016\365\022\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\064\023\007\024\004\025" +
    "\162\031\163\035\155\036\167\041\164\052\154\055\166" +
    "\056\160\057\165\001\001\000\002\001\001\000\032\022" +
    "\064\023\007\024\004\025\162\031\163\035\155\036\354" +
    "\041\164\052\154\055\166\056\160\057\165\001\001\000" +
    "\032\022\064\023\007\024\004\025\162\031\163\035\155" +
    "\036\353\041\164\052\154\055\166\056\160\057\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\022\064" +
    "\023\007\024\004\025\162\031\163\035\155\036\276\041" +
    "\164\052\154\055\166\056\160\057\165\001\001\000\002" +
    "\001\001\000\032\022\064\023\007\024\004\025\162\031" +
    "\163\035\155\036\253\041\164\052\154\055\166\056\160" +
    "\057\165\001\001\000\004\022\251\001\001\000\032\022" +
    "\064\023\007\024\004\025\162\031\163\035\155\036\250" +
    "\041\164\052\154\055\166\056\160\057\165\001\001\000" +
    "\032\022\064\023\007\024\004\025\162\031\163\035\155" +
    "\036\247\041\164\052\154\055\166\056\160\057\165\001" +
    "\001\000\032\022\064\023\007\024\004\025\162\031\163" +
    "\035\155\036\246\041\164\052\154\055\166\056\160\057" +
    "\165\001\001\000\004\040\244\001\001\000\002\001\001" +
    "\000\004\022\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\177" +
    "\001\001\000\006\013\210\027\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\126\001\001\000\002\001\001" +
    "\000\006\020\213\037\214\001\001\000\006\020\225\027" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\064\023\007\024\004\025\162\031\163\035\155\036" +
    "\217\041\164\052\154\055\166\056\160\057\165\001\001" +
    "\000\004\040\220\001\001\000\004\044\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\231\001\001\000\006\013\232\027\113" +
    "\001\001\000\004\020\126\001\001\000\002\001\001\000" +
    "\006\020\213\037\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\022\064\023\007\024\004\025\162\031" +
    "\163\035\155\036\240\041\164\052\154\055\166\056\160" +
    "\057\165\001\001\000\004\040\241\001\001\000\004\044" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\064\023\007\024\004\025" +
    "\162\031\163\035\155\036\255\041\164\052\154\055\166" +
    "\056\160\057\165\001\001\000\004\040\256\001\001\000" +
    "\004\044\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\263\027\113\045\265\046" +
    "\264\001\001\000\006\020\126\047\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\263\027\113\045\272\046\264\001\001\000\012\013\263" +
    "\027\113\045\271\046\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\275\027\113" +
    "\001\001\000\004\020\126\001\001\000\002\001\001\000" +
    "\012\013\263\027\113\045\300\046\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\022\064\023\007\024" +
    "\004\025\162\031\163\035\155\036\303\041\164\052\154" +
    "\055\166\056\160\057\165\001\001\000\004\040\304\001" +
    "\001\000\002\001\001\000\004\050\306\001\001\000\004" +
    "\051\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\022\064\023\007\024\004\025\162\031\163\035\155" +
    "\036\322\041\164\052\154\055\166\056\160\057\165\001" +
    "\001\000\002\001\001\000\012\013\263\027\113\045\314" +
    "\046\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\022\064\023\007\024\004\025\162\031\163\035\155" +
    "\036\317\041\164\052\154\055\166\056\160\057\165\001" +
    "\001\000\004\040\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\326\021\330\027\113\001\001" +
    "\000\004\020\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\334\043\335\001\001" +
    "\000\004\027\346\001\001\000\006\042\336\043\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\064\023\007\024\004\025" +
    "\162\031\163\035\155\036\342\041\164\052\154\055\166" +
    "\056\160\057\165\001\001\000\004\044\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\022\064\023\007\024\004\025\162\031" +
    "\163\035\155\036\350\041\164\052\154\055\166\056\160" +
    "\057\165\001\001\000\004\044\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\263\027\113\045\356\046\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\064\023\007" +
    "\024\004\025\162\031\163\035\155\036\361\041\164\052" +
    "\154\055\166\056\160\057\165\001\001\000\004\040\362" +
    "\001\001\000\004\044\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\143\016\374\022\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\022\064\023" +
    "\007\024\004\025\162\031\163\035\155\036\377\041\164" +
    "\052\154\055\166\056\160\057\165\001\001\000\004\040" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\143\016\u0103\022\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\022\064\023\007\024\004\025\162" +
    "\031\163\035\155\036\u0106\041\164\052\154\055\166\056" +
    "\160\057\165\001\001\000\004\040\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= IMPOR IMPORTS PYCOMA A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= COMENTARIOS A1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A1 ::= A2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= VISIBILIDAD CLASS ID A3 LLAV_A EXPRESIONES LLAV_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A3 ::= EXTEN IMPORTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A3 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A3 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS ::= IMPORTS PUNTO ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTS ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= DECLARACION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= COMENTARIOS EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= DECLA2 EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RETURNS ::= RETUR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA2 ::= VISIBILIDAD TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA2 ::= TIPO ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA2 ::= ID PAR_A PAR2 PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE2 ::= DECLA2 EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE2 ::= COMENTARIOS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE2 ::= SWITCHS EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE2 ::= EXIF EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE2 ::= OFOR EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRE2 ::= EXDO EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRE2 ::= EXWHI EXPRE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXIF ::= IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C OIF OE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXIF",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OIF ::= OIF ELSE IF PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OIF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OIF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OE ::= ELSE LLAV_A EXPRE2 RETURNS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXWHI ::= WHILE PAR_A COND PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXWHI",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXDO ::= DO LLAV_A EXPRE2 RETURNS BRE LLAV_C WHILE PAR_A COND PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXDO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OFOR ::= FOR PAR_A TIPO ID PYCOMA ID OPREL PARAMETRO1 PYCOMA ID EXPRE3 PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OFOR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OFOR ::= FOR PAR_A ID PYCOMA ID OPREL PARAMETRO1 PYCOMA ID EXPRE3 PAR_C LLAV_A EXPRE2 RETURNS BRE LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OFOR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRE3 ::= OPERACION OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRE3 ::= OPERACION VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND ::= COND OR COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND ::= COND AND COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND ::= REL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REL ::= PARAMETRO1 OPREL PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPREL ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPREL ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPREL ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPREL ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCHS ::= SWITCH PAR_A PAR11 PAR_C LLAV_A A5 DEF LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCHS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A5 ::= A5 CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A5 ::= CASO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BRE ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASO ::= CASE VALORES DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEF ::= DEFAU DOSPU EXPRE2 BRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PAR11 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PAR11 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR11",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLA2 ::= TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= VISIBILIDAD TIPO LISTAID A4 PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // A4 ::= IGUAL ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // A4 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMENTARIOS ::= COMENTL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMENTARIOS ::= COMENTM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMENTL ::= DIVIS DIVIS VIENE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMENTM ::= DIVIS MULTI VIENE MULTI DIVIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VIENE ::= VIENE VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VIENE ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VIENE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTAID ::= LISTAID COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTAID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VISIBILIDAD ::= PRIVAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VISIBILIDAD ::= PUBLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VISIBILIDAD ::= PROTEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VISIBILIDAD ::= FINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= OBJEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= VOID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNA ::= IMPORTS PAR_A PAR1 PAR_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNA ::= VALORES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACION ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACION ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACION ::= DIVIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACION ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACION ::= MODS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETRO1 ::= RESTA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETRO1 ::= PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETRO1 ::= ID PAR_A PARAMETRO1 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETRO1 ::= PARAMETRO1 OPERACION PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETRO1 ::= PARAMETRO1 COMA PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETRO1 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PAR1 ::= PARAMETRO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PAR1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PAR1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PAR2 ::= PARAMETRO2 PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PAR2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PAR2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETRO2 ::= TIPO ID COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETRO2 ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
