/* The following code was generated by JFlex 1.4.3 on 14/03/18 01:51 AM */

package analisisjava;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/03/18 01:51 AM from the specification file
 * <tt>src/analisisjava/lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 49, 50,  0, 49, 49,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51, 29, 53,  0, 52, 13, 27,  0,  1,  2, 14, 11,  7, 12, 10, 15, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46,  9,  8, 17, 18, 16, 52, 
     0, 24, 33, 34, 36, 22, 23, 38, 39, 31, 40, 42, 25, 43, 37, 35, 
    30, 47, 20, 26, 19, 21, 32, 41, 45, 44, 47,  5, 52,  6, 52, 48, 
     0, 24, 33, 34, 36, 22, 23, 38, 39, 31, 40, 42, 25, 43, 37, 35, 
    30, 47, 20, 26, 19, 21, 32, 41, 45, 44, 47,  3, 28,  4, 52,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\6\25\1\2\1\1"+
    "\1\26\11\25\1\27\1\1\1\30\1\31\1\30\1\32"+
    "\1\33\1\34\1\35\1\27\1\25\1\1\13\25\1\36"+
    "\1\37\3\25\1\40\12\25\1\41\23\25\1\42\7\25"+
    "\1\43\4\25\1\44\1\25\1\45\21\25\1\46\2\25"+
    "\1\47\1\25\1\50\7\25\1\51\1\52\1\53\14\25"+
    "\1\54\1\25\1\55\4\25\1\56\1\57\2\25\1\60"+
    "\1\61\1\25\1\62\1\63\3\25\1\64\3\25\1\65"+
    "\1\25\1\66\1\67\2\25\1\1\1\70\1\25\1\71"+
    "\1\72\3\25\1\73\1\74\1\25\1\75\2\1\2\25"+
    "\1\76\1\77\2\1\1\100\1\25\2\1\1\101\4\1"+
    "\1\102\5\1\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\154\0\154\0\242\0\242\0\330\0\154"+
    "\0\242\0\242\0\242\0\242\0\242\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\242\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\242\0\154\0\154\0\242\0\154\0\154\0\154\0\154"+
    "\0\330\0\u04da\0\u017a\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\154\0\242"+
    "\0\u0762\0\u0798\0\u07ce\0\u017a\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u017a\0\u1008\0\u103e\0\u1074\0\u10aa\0\u017a"+
    "\0\u10e0\0\u017a\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u017a\0\u14ac\0\u14e2\0\u017a\0\u1518"+
    "\0\u017a\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u017a\0\u017a\0\u017a\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u017a"+
    "\0\u1950\0\u017a\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u017a\0\u017a"+
    "\0\u1a5e\0\u1a94\0\u017a\0\u017a\0\u1aca\0\u017a\0\u017a\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u017a\0\u1ba2\0\u1bd8\0\u1c0e\0\u017a\0\u1c44"+
    "\0\u017a\0\u017a\0\u1c7a\0\u1cb0\0\u1ce6\0\u017a\0\u1d1c\0\u017a"+
    "\0\u017a\0\u1d52\0\u1d88\0\u1dbe\0\u017a\0\u017a\0\u1df4\0\u017a"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u017a\0\u017a\0\u1f02\0\u1f38"+
    "\0\u017a\0\u1f6e\0\u1fa4\0\u1fda\0\u017a\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\242\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\30\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\3\30\1\47\4\30"+
    "\1\50\1\30\1\51\1\52\1\53\1\54\1\51\1\55"+
    "\62\56\1\57\2\56\1\60\67\0\7\51\2\0\2\51"+
    "\2\0\15\51\1\0\25\51\2\0\2\51\57\0\1\61"+
    "\10\0\7\51\2\0\2\51\2\0\5\51\1\30\1\62"+
    "\6\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\3\30\1\64\4\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\6\30\1\65\1\30\1\0\2\51\7\30\1\66"+
    "\7\30\1\67\2\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\5\30\1\70\1\71\1\30"+
    "\1\0\2\51\1\30\1\72\20\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\1\73\7\30"+
    "\1\0\2\51\4\30\1\74\6\30\1\75\2\30\1\76"+
    "\3\30\1\63\2\0\2\51\34\0\1\77\33\0\7\51"+
    "\2\0\2\51\2\0\15\51\1\0\1\100\24\51\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\30"+
    "\1\101\1\102\2\30\1\103\2\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\4\30\1\104\3\30\1\0\2\51\7\30\1\105"+
    "\5\30\1\106\4\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\5\30"+
    "\1\107\14\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\1\30\1\110\6\30\1\0\2\51"+
    "\5\30\1\111\14\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\5\30\1\112\1\113\1\30"+
    "\1\0\2\51\11\30\1\114\10\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\2\30\1\115"+
    "\5\30\1\0\2\51\3\30\1\116\16\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\10\30"+
    "\1\0\2\51\5\30\1\117\14\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\3\30\1\120"+
    "\4\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\10\30\1\0\2\51"+
    "\11\30\1\121\10\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\15\51\1\0\22\51\1\50\2\51"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\2\30\1\122\5\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\123"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\7\30\1\124\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\1\125\7\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\1\126\7\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\6\30"+
    "\1\127\1\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\5\30\1\130"+
    "\2\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\10\30\1\0\2\51"+
    "\7\30\1\131\12\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\1\30\1\132\3\30\1\133"+
    "\2\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\5\30\1\134\2\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\1\30"+
    "\1\135\20\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\7\30\1\136\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\1\30\1\137\3\30\1\140"+
    "\14\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\3\30\1\141\16\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\1\30\1\142\6\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\1\143\7\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\1\144\21\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\1\30"+
    "\1\145\20\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\3\30\1\146\4\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\5\30\1\147\14\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\7\30\1\150\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\5\30"+
    "\1\151\2\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\5\30\1\152"+
    "\2\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\1\153\7\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\10\30\1\0\2\51\12\30\1\154"+
    "\7\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\2\30\1\155\5\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\17\30\1\156\2\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\1\30\1\157\20\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\3\30"+
    "\1\160\4\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\2\30\1\161"+
    "\5\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\3\30\1\162\4\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\3\30\1\163\4\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\3\30\1\164\4\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\7\30\1\165\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\5\30\1\166\14\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\5\30"+
    "\1\167\2\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\1\30\1\170\20\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\1\171\7\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\10\30\1\0\2\51\7\30\1\172"+
    "\12\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\1\173\7\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\1\174\7\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\2\30\1\175\4\30\1\176\12\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\177"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\6\30\1\200\1\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\7\30\1\201\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\3\30\1\202\4\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\5\30\1\203\14\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\6\30\1\204\13\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\5\30"+
    "\1\205\2\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\6\30\1\206"+
    "\1\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\3\30\1\207\4\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\7\30\1\210\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\1\30\1\211\6\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\3\30\1\212\4\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\3\30\1\213\16\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\214"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\6\30\1\215\1\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\1\30\1\216\6\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\1\30\1\217\6\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\7\30\1\220\12\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\3\30\1\221\4\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\1\222\7\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\6\30\1\223"+
    "\1\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\10\30\1\0\2\51"+
    "\7\30\1\224\12\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\1\30"+
    "\1\225\20\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\10\30\1\0\2\51\7\30\1\226"+
    "\12\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\4\30\1\227\15\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\3\30\1\230\4\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\5\30\1\231\2\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\232"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\3\30\1\233\4\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\1\30"+
    "\1\234\20\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\3\30\1\235\4\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\10\30\1\236\11\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\1\30\1\237\6\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\14\30\1\240\5\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\3\30"+
    "\1\241\4\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\7\30\1\242"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\4\30"+
    "\1\243\15\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\6\30\1\244\1\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\6\30\1\245\1\30\1\0\2\51\1\30"+
    "\1\246\20\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\3\30\1\247\4\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\7\30\1\250\12\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\5\30\1\251\14\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\6\30\1\252\13\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\10\30"+
    "\1\0\2\51\10\30\1\253\11\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\4\30\1\254\15\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\3\30\1\255\4\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\10\30\1\0\2\51\11\30"+
    "\1\256\10\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\10\30\1\0\2\51\15\30\1\257"+
    "\4\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\1\260\7\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\6\30\1\261\1\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\10\30"+
    "\1\0\2\51\4\30\1\262\15\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\4\30\1\263\15\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\4\30\1\264\3\30"+
    "\1\0\2\51\1\30\1\265\20\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\3\30\1\266"+
    "\4\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\1\267\7\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\5\30\1\270\2\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\1\271\7\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\3\30\1\272\4\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\10\30"+
    "\1\0\2\51\1\30\1\273\20\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\7\30\1\274\12\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\1\275\1\51\2\0\5\51\10\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\7\30\1\276\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\1\30\1\277\6\30\1\0\2\51\22\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\3\30\1\300\4\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\10\30"+
    "\1\0\2\51\7\30\1\301\12\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\1\302\7\30"+
    "\1\0\2\51\22\30\1\63\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\5\51\6\30\1\303\1\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\10\30\1\0\2\51\7\30\1\304"+
    "\12\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\5\51\1\30\1\305\6\30\1\0\2\51\22\30"+
    "\1\63\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\7\30\1\306\12\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\10\30\1\0\2\51\7\30\1\307\12\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\310"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\10\51\1\311\4\51\1\0"+
    "\25\51\2\0\2\51\2\0\1\312\6\51\2\0\2\51"+
    "\2\0\5\51\10\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\3\30"+
    "\1\313\4\30\1\0\2\51\22\30\1\63\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\5\51\10\30\1\0"+
    "\2\51\5\30\1\314\14\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\5\51\1\315\7\30\1\0"+
    "\2\51\22\30\1\63\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\5\51\3\30\1\316\4\30\1\0\2\51"+
    "\22\30\1\63\2\0\2\51\2\0\7\51\2\0\2\51"+
    "\2\0\15\51\1\0\11\51\1\317\13\51\2\0\2\51"+
    "\2\0\7\51\2\0\2\51\2\0\14\51\1\320\1\0"+
    "\25\51\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\5\51\10\30\1\0\2\51\6\30\1\321\13\30\1\63"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\5\30\1\322\2\30\1\0\2\51\22\30\1\63\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\323"+
    "\7\51\1\0\25\51\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\15\51\1\0\20\51\1\324\4\51\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\5\51\1\325"+
    "\7\30\1\0\2\51\22\30\1\63\2\0\2\51\2\0"+
    "\7\51\2\0\2\51\2\0\10\51\1\326\4\51\1\0"+
    "\25\51\2\0\2\51\2\0\7\51\2\0\2\51\2\0"+
    "\14\51\1\327\1\0\25\51\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\6\51\1\330\6\51\1\0\25\51"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\5\51"+
    "\1\331\7\51\1\0\25\51\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\15\51\1\0\7\51\1\332\15\51"+
    "\2\0\2\51\2\0\7\51\2\0\2\51\2\0\10\51"+
    "\1\333\4\51\1\0\25\51\2\0\2\51\2\0\7\51"+
    "\2\0\2\51\2\0\15\51\1\0\17\51\1\334\5\51"+
    "\2\0\2\51\2\0\7\51\2\0\1\335\1\51\2\0"+
    "\15\51\1\0\25\51\2\0\2\51\2\0\7\51\2\0"+
    "\2\51\2\0\15\51\1\0\3\51\1\336\21\51\2\0"+
    "\2\51\2\0\7\51\2\0\2\51\2\0\15\51\1\0"+
    "\11\51\1\337\13\51\2\0\2\51\2\0\1\51\1\340"+
    "\5\51\2\0\2\51\2\0\15\51\1\0\25\51\2\0"+
    "\2\51\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8694];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\7\1\2\11\3\1\1\11\31\1"+
    "\2\11\1\1\4\11\16\1\1\11\241\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String cadena= "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol(sym.DOSPU, yyline, yycolumn,yytext());
          }
        case 68: break;
        case 44: 
          { return new Symbol(sym.BREAK, yyline, yycolumn,yytext());
          }
        case 69: break;
        case 34: 
          { return new Symbol(sym.INT, yyline, yycolumn,yytext());
          }
        case 70: break;
        case 33: 
          { return new Symbol(sym.DO, yyline, yycolumn,yytext());
          }
        case 71: break;
        case 56: 
          { return new Symbol(sym.EXTEN, yyline, yycolumn,yytext());
          }
        case 72: break;
        case 5: 
          { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 50: 
          { return new Symbol(sym.SWITCH, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 23: 
          { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 52: 
          { return new Symbol(sym.PUBLI, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 18: 
          { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 51: 
          { return new Symbol(sym.SYSTE, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 19: 
          { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 53: 
          { return new Symbol(sym.IMPOR, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 24: 
          { /*Espacios en blanco, ignorados*/
          }
        case 81: break;
        case 66: 
          { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 29: 
          { String tmp=cadena+"\""; cadena=""; yybegin(YYINITIAL);  return new Symbol(sym.CADENA, yychar,yyline,tmp);
          }
        case 83: break;
        case 13: 
          { return new Symbol(sym.SUMA, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 54: 
          { return new Symbol(sym.OBJEC, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 15: 
          { return new Symbol(sym.MODS, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 4: 
          { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 35: 
          { return new Symbol(sym.OUT, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 46: 
          { return new Symbol(sym.WHILE, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 20: 
          { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 57: 
          { return new Symbol(sym.PRIVAT, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 67: 
          { return new Symbol(sym.SCANE, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 47: 
          { return new Symbol(sym.RETUR, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 12: 
          { return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 49: 
          { return new Symbol(sym.STATI, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 16: 
          { return new Symbol(sym.MULTI, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 62: 
          { return new Symbol(sym.PARSI, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 40: 
          { return new Symbol(sym.CARAC, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 27: 
          { cadena+=yytext();
          }
        case 99: break;
        case 60: 
          { return new Symbol(sym.BOOLEA, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 55: 
          { return new Symbol(sym.DOUBL, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 9: 
          { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 63: 
          { return new Symbol(sym.NEXTL, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 8: 
          { return new Symbol(sym.COR_C, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 3: 
          { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 38: 
          { return new Symbol(sym.VOID, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 26: 
          { yybegin(CADENA); cadena+="\"";
          }
        case 107: break;
        case 64: 
          { return new Symbol(sym.PROTEC, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 43: 
          { return new Symbol(sym.FINA, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 14: 
          { return new Symbol(sym.RESTA, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 25: 
          { /*Saltos de linea, ignorados*/
          }
        case 111: break;
        case 32: 
          { return new Symbol(sym.IF, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 45: 
          { return new Symbol(sym.CLASS, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 31: 
          { return new Symbol(sym.OR, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 58: 
          { return new Symbol(sym.PRINT, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 59: 
          { return new Symbol(sym.INTEG, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 17: 
          { return new Symbol(sym.DIVIS, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 39: 
          { return new Symbol(sym.CASE, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 36: 
          { return new Symbol(sym.TRU, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 7: 
          { return new Symbol(sym.COR_A, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 2: 
          { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
          }
        case 121: break;
        case 1: 
          { return new Symbol(sym.CARACT, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 65: 
          { return new Symbol(sym.PARSF, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 6: 
          { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 10: 
          { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 28: 
          { String tmp=cadena; cadena="";  
                System.out.println("Se esperaba cierre de cadena (\")."); 
                yybegin(YYINITIAL);
          }
        case 126: break;
        case 48: 
          { return new Symbol(sym.STRIN, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 61: 
          { return new Symbol(sym.NEXTI, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 30: 
          { return new Symbol(sym.AND, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 21: 
          { return new Symbol(sym.ID, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 42: 
          { return new Symbol(sym.FLOAT, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 37: 
          { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 41: 
          { return new Symbol(sym.FALS, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 22: 
          { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
