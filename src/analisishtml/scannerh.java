/* The following code was generated by JFlex 1.4.3 on 26/03/18 01:05 PM */

package analisishtml;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/03/18 01:05 PM from the specification file
 * <tt>src/analisishtml/lexico.jflex</tt>
 */
public class scannerh implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 65,  0, 64, 66,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50, 29, 67,  0,  0, 13, 27,  0,  1,  2, 14, 11,  7, 12, 10, 15, 
    61, 36, 37, 38, 39, 40, 41, 61, 61, 61,  9,  8, 17, 18, 16,  0, 
     0, 62, 52, 53, 62, 51, 54, 62, 62, 62, 62, 62, 58, 62, 49, 62, 
    60, 62, 55, 56, 59, 57, 62, 62, 62, 62, 62,  5,  0,  6,  0, 63, 
     0, 24, 33, 45, 32, 22, 23, 47, 30, 42, 62, 62, 25, 31, 48, 34, 
    44, 62, 20, 26, 19, 21, 43, 62, 46, 35, 62,  3, 28,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 62,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 62,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\7\1\1\24\1\1\1\25"+
    "\4\1\1\26\5\1\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\25\1\0\1\35\5\0\1\36\3\37\2\40"+
    "\4\37\1\41\1\42\1\37\1\0\12\37\2\34\7\0"+
    "\1\43\1\0\1\44\1\45\2\0\1\46\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\7\37\1\0\1\56\13\37\22\0\1\57\4\0\1\60"+
    "\1\0\1\61\2\37\1\62\16\37\1\0\1\63\1\0"+
    "\1\64\1\65\2\0\1\66\1\0\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\0\1\75\3\0\1\76\1\77"+
    "\1\100\1\37\1\101\1\102\1\103\4\37\1\104\6\37"+
    "\1\105\1\34\4\0\1\106\1\0\1\107\1\110\4\37"+
    "\1\111\1\112\3\37\1\113\1\114\3\0\1\115\1\116"+
    "\1\117\1\37\1\120\2\37\1\40\2\37\1\121\1\122"+
    "\2\37\1\123\2\40\1\37\1\124\1\125\1\126\2\40"+
    "\1\127\6\40\1\130\2\40\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\210\0\210\0\210\0\210\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\314\0\210"+
    "\0\210\0\u0110\0\210\0\u0154\0\210\0\u0198\0\u01dc\0\u0220"+
    "\0\u0264\0\u02a8\0\u02ec\0\u0330\0\210\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\210\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\210\0\210\0\210\0\210\0\210\0\u0660\0\u06a4"+
    "\0\u06e8\0\210\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\210"+
    "\0\u01dc\0\u0880\0\u08c4\0\u061c\0\u01dc\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\210\0\210\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\210"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\210\0\u0f68\0\210\0\210\0\u0fac\0\u0ff0\0\210\0\u1034"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\u1078\0\210"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u0dd0"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\210\0\u1be4\0\u01dc\0\u1c28"+
    "\0\u1c6c\0\u01dc\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024"+
    "\0\u2068\0\u0dd0\0\u20ac\0\u0dd0\0\u0dd0\0\u20f0\0\u2134\0\u0dd0"+
    "\0\u2178\0\u0dd0\0\u0dd0\0\u0dd0\0\u0dd0\0\u0dd0\0\u0dd0\0\u21bc"+
    "\0\u0dd0\0\u2200\0\u2244\0\u2288\0\210\0\210\0\210\0\u22cc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u01dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u01dc\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0dd0\0\u270c\0\210\0\210"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u01dc\0\u01dc\0\u2860\0\u28a4"+
    "\0\u28e8\0\u01dc\0\u01dc\0\u292c\0\u2970\0\u29b4\0\u0dd0\0\u0dd0"+
    "\0\u0dd0\0\u29f8\0\u01dc\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u0dd0\0\u0dd0\0\u2b90\0\u2bd4\0\u01dc\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u2ce4\0\u2d28\0\u01dc\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u061c\0\u2f04\0\u2f48\0\u061c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\27\1\30\1\31\1\27"+
    "\1\32\1\33\1\34\1\35\1\27\1\36\4\27\6\37"+
    "\1\27\1\40\1\27\1\41\2\27\1\42\1\43\1\44"+
    "\1\27\1\45\1\46\1\27\1\47\4\27\1\50\1\37"+
    "\1\27\1\51\1\44\1\52\1\44\1\53\101\54\1\55"+
    "\1\54\1\56\124\0\1\57\23\0\6\60\23\0\1\60"+
    "\24\0\1\61\1\0\1\62\102\0\1\63\3\0\1\64"+
    "\12\0\1\65\1\0\1\66\1\67\12\0\1\70\52\0"+
    "\1\71\1\72\1\71\1\73\4\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\24\71\1\74\14\71"+
    "\1\75\27\0\5\71\1\76\2\71\3\0\4\71\1\77"+
    "\17\71\1\74\14\71\1\75\27\0\6\71\1\100\1\71"+
    "\3\0\24\71\1\74\14\71\1\75\27\0\10\71\3\0"+
    "\17\71\1\101\4\71\1\74\14\71\1\75\37\0\1\102"+
    "\104\0\1\103\72\0\3\71\1\104\4\71\3\0\24\71"+
    "\1\74\14\71\1\75\16\0\1\105\10\0\10\74\3\0"+
    "\6\74\6\37\23\74\1\37\2\74\27\0\5\71\1\106"+
    "\2\71\3\0\24\71\1\74\14\71\1\75\27\0\5\71"+
    "\1\107\1\110\1\71\3\0\4\71\1\111\17\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\4\71\1\112\17\71"+
    "\1\74\14\71\1\75\27\0\2\71\1\113\5\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\10\71\3\0\4\71"+
    "\1\114\17\71\1\74\14\71\1\75\27\0\5\71\1\115"+
    "\2\71\3\0\24\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\24\71\1\74\1\116\13\71\1\75\27\0\1\71"+
    "\1\117\6\71\3\0\24\71\1\74\14\71\1\75\27\0"+
    "\10\74\3\0\42\74\4\0\101\57\1\120\1\121\1\57"+
    "\12\0\1\105\31\0\6\60\23\0\1\60\25\0\1\122"+
    "\64\0\17\123\1\0\3\123\1\124\12\123\1\125\1\123"+
    "\1\126\1\127\12\123\1\130\27\123\24\0\1\131\3\0"+
    "\1\132\5\0\1\133\1\0\1\134\11\0\1\135\54\0"+
    "\1\136\1\137\1\0\1\140\15\0\1\141\1\142\1\143"+
    "\1\144\1\145\1\146\104\0\1\147\55\0\1\150\15\0"+
    "\1\151\64\0\2\71\1\152\5\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\20\71\1\153\3\71"+
    "\1\74\14\71\1\75\27\0\6\71\1\154\1\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\10\71\3\0\22\71"+
    "\1\155\1\71\1\74\14\71\1\75\27\0\10\71\3\0"+
    "\14\71\1\156\7\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\4\71\1\157\17\71\1\74\14\71\1\75\27\0"+
    "\1\160\7\71\3\0\24\71\1\74\14\71\1\75\20\0"+
    "\1\161\27\0\6\162\23\0\1\162\31\0\1\71\1\163"+
    "\6\71\3\0\24\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\22\71\1\164\1\71\1\74\14\71\1\75\27\0"+
    "\5\71\1\165\2\71\3\0\24\71\1\74\14\71\1\75"+
    "\27\0\6\71\1\166\1\71\3\0\24\71\1\74\14\71"+
    "\1\75\27\0\10\71\3\0\1\71\1\167\22\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\1\71\1\170\22\71"+
    "\1\74\14\71\1\75\27\0\10\71\3\0\4\71\1\171"+
    "\17\71\1\74\14\71\1\75\27\0\1\71\1\172\6\71"+
    "\3\0\2\71\1\173\21\71\1\74\14\71\1\75\27\0"+
    "\10\71\3\0\24\71\1\74\5\71\1\174\6\71\1\75"+
    "\27\0\10\71\3\0\14\71\1\175\7\71\1\74\14\71"+
    "\1\75\105\0\1\120\21\0\1\122\1\120\63\0\17\123"+
    "\1\176\103\123\1\176\4\123\1\177\3\123\1\200\5\123"+
    "\1\201\1\123\1\202\11\123\1\203\50\123\1\176\3\123"+
    "\1\204\1\205\1\123\1\206\15\123\1\207\1\210\1\211"+
    "\1\212\1\213\1\214\51\123\1\176\32\123\1\215\50\123"+
    "\1\176\4\123\1\216\15\123\1\217\60\123\1\176\1\220"+
    "\63\123\41\0\1\221\65\0\1\222\117\0\1\223\74\0"+
    "\1\224\126\0\1\225\70\0\1\226\66\0\3\71\1\227"+
    "\4\71\3\0\24\71\1\74\14\71\1\75\27\0\1\230"+
    "\7\71\3\0\24\71\1\74\14\71\1\75\27\0\7\71"+
    "\1\231\3\0\24\71\1\74\14\71\1\75\27\0\1\232"+
    "\7\71\3\0\24\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\21\71\1\233\2\71\1\74\14\71\1\75\27\0"+
    "\1\71\1\234\6\71\3\0\24\71\1\74\14\71\1\75"+
    "\27\0\10\71\3\0\4\71\1\235\17\71\1\74\14\71"+
    "\1\75\50\0\6\162\23\0\1\162\31\0\10\71\3\0"+
    "\14\71\1\236\7\71\1\74\14\71\1\75\27\0\1\237"+
    "\7\71\3\0\24\71\1\74\14\71\1\75\27\0\7\71"+
    "\1\240\3\0\24\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\4\71\1\241\17\71\1\74\14\71\1\75\27\0"+
    "\10\71\3\0\3\71\1\242\20\71\1\74\14\71\1\75"+
    "\27\0\3\71\1\243\4\71\3\0\24\71\1\74\14\71"+
    "\1\75\27\0\6\71\1\244\1\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\5\71\1\245\2\71\3\0\24\71"+
    "\1\74\14\71\1\75\27\0\3\71\1\246\4\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\10\71\3\0\24\71"+
    "\1\74\6\71\1\247\5\71\1\75\27\0\10\71\3\0"+
    "\22\71\1\250\1\71\1\74\14\71\1\75\4\0\17\123"+
    "\1\176\1\251\102\123\1\176\1\252\102\123\1\176\21\123"+
    "\1\253\61\123\1\176\1\254\102\123\1\176\1\255\102\123"+
    "\1\176\3\123\1\256\77\123\1\176\17\123\1\257\63\123"+
    "\1\176\1\260\102\123\1\176\10\123\1\261\72\123\1\176"+
    "\1\262\102\123\1\176\1\263\102\123\1\176\1\264\102\123"+
    "\1\176\1\265\102\123\1\176\1\266\102\123\1\176\1\267"+
    "\102\123\1\176\33\123\1\270\47\123\1\176\1\271\102\123"+
    "\1\176\20\123\1\272\43\123\31\0\1\273\103\0\1\274"+
    "\103\0\1\275\112\0\1\276\106\0\1\277\63\0\10\71"+
    "\3\0\17\71\1\300\4\71\1\74\14\71\1\75\27\0"+
    "\3\71\1\301\4\71\3\0\24\71\1\74\14\71\1\75"+
    "\27\0\10\71\3\0\22\71\1\302\1\71\1\74\14\71"+
    "\1\75\27\0\3\71\1\303\4\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\2\71\1\304\21\71"+
    "\1\74\14\71\1\75\27\0\5\71\1\305\2\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\10\71\3\0\14\71"+
    "\1\306\7\71\1\74\14\71\1\75\27\0\3\71\1\307"+
    "\4\71\3\0\24\71\1\74\14\71\1\75\27\0\1\71"+
    "\1\310\6\71\3\0\24\71\1\74\14\71\1\75\27\0"+
    "\1\71\1\311\6\71\3\0\24\71\1\74\14\71\1\75"+
    "\27\0\1\71\1\312\6\71\3\0\24\71\1\74\14\71"+
    "\1\75\27\0\3\71\1\313\4\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\17\71\1\314\4\71"+
    "\1\74\14\71\1\75\27\0\10\71\3\0\22\71\1\315"+
    "\1\71\1\74\14\71\1\75\27\0\10\71\3\0\24\71"+
    "\1\74\7\71\1\316\4\71\1\75\27\0\1\317\7\71"+
    "\3\0\24\71\1\74\14\71\1\75\4\0\17\123\1\320"+
    "\103\123\1\176\11\123\1\321\71\123\1\176\11\123\1\322"+
    "\71\123\1\176\11\123\1\323\71\123\1\176\20\123\1\324"+
    "\62\123\1\176\1\325\102\123\1\176\23\123\1\326\40\123"+
    "\26\0\1\327\103\0\1\330\100\0\10\71\3\0\4\71"+
    "\1\331\17\71\1\74\14\71\1\75\27\0\10\71\3\0"+
    "\4\71\1\332\17\71\1\74\14\71\1\75\27\0\10\71"+
    "\3\0\3\71\1\333\20\71\1\74\14\71\1\75\27\0"+
    "\10\71\3\0\2\71\1\334\21\71\1\74\14\71\1\75"+
    "\27\0\7\71\1\335\3\0\24\71\1\74\14\71\1\75"+
    "\27\0\3\71\1\336\4\71\3\0\24\71\1\74\14\71"+
    "\1\75\27\0\10\71\3\0\4\71\1\337\17\71\1\74"+
    "\14\71\1\75\27\0\5\71\1\340\2\71\3\0\24\71"+
    "\1\74\14\71\1\75\27\0\1\341\7\71\3\0\24\71"+
    "\1\74\14\71\1\75\27\0\5\71\1\342\2\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\10\71\3\0\24\71"+
    "\1\74\10\71\1\343\3\71\1\75\24\0\1\344\63\0"+
    "\17\123\1\176\6\123\1\345\74\123\1\176\6\123\1\346"+
    "\74\123\1\176\1\347\102\123\1\176\1\350\102\123\1\176"+
    "\1\351\63\123\23\0\6\71\1\352\1\71\3\0\24\71"+
    "\1\74\14\71\1\75\27\0\7\71\1\353\3\0\24\71"+
    "\1\74\14\71\1\75\27\0\6\71\1\354\1\71\3\0"+
    "\24\71\1\74\14\71\1\75\27\0\5\71\1\355\2\71"+
    "\3\0\24\71\1\74\14\71\1\75\27\0\10\71\3\0"+
    "\24\71\1\356\14\71\1\75\27\0\10\71\3\0\22\71"+
    "\1\357\1\71\1\74\14\71\1\75\27\0\3\71\1\360"+
    "\4\71\3\0\24\71\1\74\14\71\1\75\23\0\1\120"+
    "\64\0\17\123\1\176\1\361\102\123\1\176\1\362\63\123"+
    "\23\0\10\71\3\0\4\71\1\363\17\71\1\74\14\71"+
    "\1\75\27\0\3\71\1\364\4\71\3\0\24\71\1\74"+
    "\14\71\1\75\27\0\10\71\3\0\2\71\1\365\21\71"+
    "\1\74\14\71\1\75\27\0\10\74\3\0\25\74\1\366"+
    "\2\74\1\367\11\74\27\0\10\71\3\0\16\71\1\370"+
    "\5\71\1\74\14\71\1\75\27\0\1\71\1\371\6\71"+
    "\3\0\24\71\1\74\14\71\1\75\27\0\1\71\1\372"+
    "\6\71\3\0\24\71\1\74\14\71\1\75\27\0\7\71"+
    "\1\373\3\0\24\71\1\74\14\71\1\75\27\0\10\74"+
    "\3\0\22\74\1\374\17\74\27\0\6\74\1\375\1\74"+
    "\3\0\42\74\27\0\10\71\3\0\4\71\1\376\17\71"+
    "\1\74\14\71\1\75\27\0\1\377\7\74\3\0\42\74"+
    "\27\0\10\74\3\0\4\74\1\u0100\35\74\27\0\3\74"+
    "\1\u0101\4\74\3\0\42\74\27\0\1\u0102\7\74\3\0"+
    "\42\74\27\0\1\74\1\u0103\6\74\3\0\42\74\27\0"+
    "\5\74\1\u0104\2\74\3\0\42\74\27\0\10\74\3\0"+
    "\4\74\1\u0105\35\74\27\0\10\74\3\0\22\74\1\u0106"+
    "\17\74\27\0\1\u0107\7\74\3\0\42\74\27\0\3\74"+
    "\1\u0108\4\74\3\0\42\74\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\14\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\6\1\1\11\5\1\5\11\2\1\1\0"+
    "\1\11\5\0\1\11\11\1\2\11\1\1\1\0\12\1"+
    "\1\11\1\1\7\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\6\11\1\0\1\11\1\0\7\1\1\0\14\1"+
    "\22\0\1\1\4\0\1\11\1\0\22\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\6\1\1\0\1\1"+
    "\3\0\3\11\21\1\4\0\1\1\1\0\2\11\13\1"+
    "\3\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String cadena= "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerh(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerh(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 88: 
          { return new Symbol(sym.INT, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 52: 
          { return new Symbol(sym.TH_F, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 86: 
          { return new Symbol(sym.VARIA, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 61: 
          { return new Symbol(sym.BR_F, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 32: 
          { return new Symbol(sym.CADENA2, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 31: 
          { return new Symbol(sym.ID, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 71: 
          { return new Symbol(sym.TABLE_I, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 58: 
          { return new Symbol(sym.H4_F, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 57: 
          { return new Symbol(sym.H3_F, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 56: 
          { return new Symbol(sym.H2_F, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 9: 
          { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 55: 
          { return new Symbol(sym.H1_F, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 20: 
          { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 48: 
          { return new Symbol(sym.DIV_I, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 72: 
          { return new Symbol(sym.TITLE_I, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 73: 
          { return new Symbol(sym.CLASE, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 78: 
          { return new Symbol(sym.HEAD_F, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 53: 
          { return new Symbol(sym.TD_F, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 19: 
          { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 46: 
          { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 65: 
          { return new Symbol(sym.FALS, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 74: 
          { return new Symbol(sym.NOMBR, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 81: 
          { return new Symbol(sym.TABLE_F, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 34: 
          { return new Symbol(sym.OR, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 12: 
          { return new Symbol(sym.SUMA, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 3: 
          { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 70: 
          { return new Symbol(sym.DIV_F, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 21: 
          { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 82: 
          { return new Symbol(sym.TITLE_F, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 23: 
          { /*Saltos de linea, ignorados*/
          }
        case 120: break;
        case 64: 
          { return new Symbol(sym.BODY_I, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 26: 
          { String tmp=cadena; cadena="";  
                System.out.println("Se esperaba cierre de cadena (\")."); 
                yybegin(YYINITIAL);
          }
        case 122: break;
        case 75: 
          { return new Symbol(sym.STRIN, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 7: 
          { return new Symbol(sym.COR_C, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 66: 
          { return new Symbol(sym.ALIGN, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 50: 
          { return new Symbol(sym.FONT, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 83: 
          { return new Symbol(sym.CANTI, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 15: 
          { return new Symbol(sym.MULTI, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 22: 
          { /*Espacios en blanco, ignorados*/
          }
        case 129: break;
        case 5: 
          { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 38: 
          { return new Symbol(sym.HR_I, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 14: 
          { return new Symbol(sym.MODS, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 62: 
          { return new Symbol(sym.HTML_I, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 67: 
          { return new Symbol(sym.SCORE, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 10: 
          { return new Symbol(sym.DOSPU, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 16: 
          { return new Symbol(sym.DIVIS, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 85: 
          { return new Symbol(sym.TCOLOR, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 79: 
          { return new Symbol(sym.BODY_F, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 49: 
          { return new Symbol(sym.TRU, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 87: 
          { return new Symbol(sym.BOOLEA, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 18: 
          { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 24: 
          { yybegin(CADENA); cadena+="\"";
          }
        case 142: break;
        case 8: 
          { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
          }
        case 143: break;
        case 1: 
          { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
          }
        case 144: break;
        case 69: 
          { return new Symbol(sym.PRINT, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 54: 
          { return new Symbol(sym.HR_F, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 11: 
          { return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 45: 
          { return new Symbol(sym.BR_I, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 30: 
          { return new Symbol(sym.P_I, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 77: 
          { return new Symbol(sym.HTML_F, yyline, yycolumn,yytext());
          }
        case 150: break;
        case 44: 
          { return new Symbol(sym.H6_I, yyline, yycolumn,yytext());
          }
        case 151: break;
        case 43: 
          { return new Symbol(sym.H5_I, yyline, yycolumn,yytext());
          }
        case 152: break;
        case 35: 
          { return new Symbol(sym.TR_I, yyline, yycolumn,yytext());
          }
        case 153: break;
        case 27: 
          { String tmp=cadena+"\""; cadena=""; yybegin(YYINITIAL);  return new Symbol(sym.CADENA, yychar,yyline,tmp);
          }
        case 154: break;
        case 89: 
          { return new Symbol(sym.DOUBL, yyline, yycolumn,yytext());
          }
        case 155: break;
        case 80: 
          { return new Symbol(sym.METOD, yyline, yycolumn,yytext());
          }
        case 156: break;
        case 2: 
          { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
          }
        case 157: break;
        case 36: 
          { return new Symbol(sym.TH_I, yyline, yycolumn,yytext());
          }
        case 158: break;
        case 68: 
          { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
          }
        case 159: break;
        case 6: 
          { return new Symbol(sym.COR_A, yyline, yycolumn,yytext());
          }
        case 160: break;
        case 42: 
          { return new Symbol(sym.H4_I, yyline, yycolumn,yytext());
          }
        case 161: break;
        case 41: 
          { return new Symbol(sym.H3_I, yyline, yycolumn,yytext());
          }
        case 162: break;
        case 40: 
          { return new Symbol(sym.H2_I, yyline, yycolumn,yytext());
          }
        case 163: break;
        case 39: 
          { return new Symbol(sym.H1_I, yyline, yycolumn,yytext());
          }
        case 164: break;
        case 84: 
          { return new Symbol(sym.CARAC, yyline, yycolumn,yytext());
          }
        case 165: break;
        case 28: 
          { return new Symbol(sym.COMENTARIO, yyline, yycolumn,yytext());
          }
        case 166: break;
        case 47: 
          { return new Symbol(sym.P_F, yyline, yycolumn,yytext());
          }
        case 167: break;
        case 63: 
          { return new Symbol(sym.HEAD_I, yyline, yycolumn,yytext());
          }
        case 168: break;
        case 29: 
          { return new Symbol(sym.CLOSE, yyline, yycolumn,yytext());
          }
        case 169: break;
        case 4: 
          { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
          }
        case 170: break;
        case 76: 
          { return new Symbol(sym.RESUL, yyline, yycolumn,yytext());
          }
        case 171: break;
        case 60: 
          { return new Symbol(sym.H6_F, yyline, yycolumn,yytext());
          }
        case 172: break;
        case 37: 
          { return new Symbol(sym.TD_I, yyline, yycolumn,yytext());
          }
        case 173: break;
        case 59: 
          { return new Symbol(sym.H5_F, yyline, yycolumn,yytext());
          }
        case 174: break;
        case 13: 
          { return new Symbol(sym.RESTA, yyline, yycolumn,yytext());
          }
        case 175: break;
        case 25: 
          { cadena+=yytext();
          }
        case 176: break;
        case 51: 
          { return new Symbol(sym.TR_F, yyline, yycolumn,yytext());
          }
        case 177: break;
        case 33: 
          { return new Symbol(sym.AND, yyline, yycolumn,yytext());
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
