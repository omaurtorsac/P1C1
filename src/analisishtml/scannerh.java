/* The following code was generated by JFlex 1.4.3 on 26/03/18 04:09 PM */

package analisishtml;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/03/18 04:09 PM from the specification file
 * <tt>src/analisishtml/lexico.jflex</tt>
 */
public class scannerh implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 60,  0, 59, 62,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    61, 30, 63,  0, 19, 13, 28,  0,  1,  2, 14, 11,  7, 12, 10, 15, 
    57, 37, 38, 39, 40, 41, 42, 57, 57, 57,  9,  8, 17, 18, 16,  0, 
     0, 58, 58, 58, 58, 52, 58, 58, 58, 58, 58, 58, 54, 58, 58, 58, 
    56, 58, 51, 50, 55, 53, 58, 58, 58, 58, 58,  5,  0,  6,  0, 58, 
     0, 25, 34, 46, 33, 23, 24, 48, 31, 43, 58, 58, 26, 32, 49, 35, 
    45, 58, 21, 27, 20, 22, 44, 58, 47, 36, 58,  3, 29,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\10\1\1\24\2\1\1\25"+
    "\7\1\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\25\1\0\1\35\5\0\1\36\1\37\3\40\1\41"+
    "\5\40\1\42\1\43\2\40\1\0\12\40\2\34\7\0"+
    "\1\44\1\0\1\45\1\46\2\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\0\1\56\1\0"+
    "\11\41\1\0\1\57\1\60\11\41\22\0\1\61\4\0"+
    "\1\62\1\0\1\63\3\41\1\64\7\41\1\65\5\41"+
    "\1\0\1\66\1\0\1\67\1\70\2\0\1\71\1\0"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\0\1\100"+
    "\3\0\1\101\1\102\1\103\1\41\1\104\1\105\1\106"+
    "\1\107\5\41\1\110\3\41\1\111\1\34\4\0\1\112"+
    "\1\0\1\113\1\114\5\41\1\115\1\116\1\117\1\120"+
    "\3\0\1\121\1\122\1\123\1\41\1\124\1\125\2\41"+
    "\1\126\1\127\2\41\1\130\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\300\0\200"+
    "\0\200\0\u0100\0\200\0\u0140\0\200\0\u0180\0\u01c0\0\u0200"+
    "\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\200\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\u0600\0\u0640"+
    "\0\u0680\0\200\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\200"+
    "\0\200\0\u0800\0\u0840\0\u0880\0\u0800\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\200\0\200\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0"+
    "\0\u0d00\0\200\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\200\0\u0f40\0\200\0\200\0\u0f80\0\u0fc0"+
    "\0\200\0\u1000\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\u1040\0\200\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1300\0\u0800\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u0dc0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\200"+
    "\0\u1b00\0\u0800\0\u1b40\0\u1b80\0\u1bc0\0\u0800\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u0800\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u0dc0\0\u1f40\0\u0dc0\0\u0dc0"+
    "\0\u1f80\0\u1fc0\0\u0dc0\0\u2000\0\u0dc0\0\u0dc0\0\u0dc0\0\u0dc0"+
    "\0\u0dc0\0\u0dc0\0\u2040\0\u0dc0\0\u2080\0\u20c0\0\u2100\0\200"+
    "\0\200\0\200\0\u2140\0\u0800\0\u0800\0\u0800\0\u0800\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u0800\0\u22c0\0\u2300\0\u2340"+
    "\0\u0800\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u0dc0\0\u24c0"+
    "\0\200\0\200\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u0800"+
    "\0\u0800\0\u0800\0\u0800\0\u2640\0\u2680\0\u26c0\0\u0dc0\0\u0dc0"+
    "\0\u0dc0\0\u2700\0\u0800\0\u0800\0\u2740\0\u2780\0\u0dc0\0\u0dc0"+
    "\0\u27c0\0\u2800\0\u0800\0\u0800\0\u0800";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\30\1\31\1\32"+
    "\1\30\1\33\1\34\1\35\1\36\1\30\1\37\1\30"+
    "\1\40\2\30\6\41\1\42\1\43\1\30\1\44\2\30"+
    "\1\45\1\46\1\47\4\30\1\50\1\41\1\30\1\51"+
    "\1\52\2\51\1\53\74\54\1\55\2\54\1\56\120\0"+
    "\1\57\24\0\6\60\16\0\1\60\24\0\1\61\1\0"+
    "\1\62\76\0\1\63\4\0\1\64\12\0\1\65\1\0"+
    "\1\66\1\67\12\0\1\70\45\0\1\71\100\0\1\72"+
    "\1\73\1\72\1\74\4\72\3\0\34\72\2\0\1\75"+
    "\26\0\10\72\3\0\34\72\2\0\1\75\26\0\5\72"+
    "\1\76\1\77\1\72\3\0\4\72\1\100\27\72\2\0"+
    "\1\75\26\0\6\72\1\101\1\72\3\0\34\72\2\0"+
    "\1\75\26\0\10\72\3\0\17\72\1\102\14\72\2\0"+
    "\1\75\36\0\1\103\100\0\1\104\66\0\3\72\1\105"+
    "\4\72\3\0\34\72\2\0\1\75\26\0\10\72\3\0"+
    "\4\72\1\106\27\72\2\0\1\75\14\0\1\107\11\0"+
    "\10\75\3\0\6\75\6\41\16\75\1\41\1\75\2\0"+
    "\1\75\26\0\10\72\3\0\22\72\1\110\11\72\2\0"+
    "\1\75\26\0\5\72\1\111\2\72\3\0\34\72\2\0"+
    "\1\75\26\0\5\72\1\112\1\113\1\72\3\0\1\114"+
    "\3\72\1\115\27\72\2\0\1\75\26\0\10\72\3\0"+
    "\4\72\1\116\27\72\2\0\1\75\26\0\1\117\7\72"+
    "\3\0\34\72\2\0\1\75\26\0\10\72\3\0\25\72"+
    "\1\120\6\72\2\0\1\75\26\0\1\72\1\121\6\72"+
    "\3\0\34\72\2\0\1\75\2\0\74\57\1\122\1\57"+
    "\1\123\1\57\12\0\1\107\32\0\6\60\16\0\1\60"+
    "\25\0\1\124\60\0\17\125\1\0\4\125\1\126\12\125"+
    "\1\127\1\125\1\130\1\131\12\125\1\132\22\125\25\0"+
    "\1\133\3\0\1\134\5\0\1\135\1\0\1\136\11\0"+
    "\1\137\50\0\1\140\1\141\1\0\1\142\15\0\1\143"+
    "\1\144\1\145\1\146\1\147\1\150\100\0\1\151\51\0"+
    "\1\152\15\0\1\153\60\0\10\75\3\0\34\75\2\0"+
    "\1\75\26\0\2\75\1\154\5\75\3\0\34\75\2\0"+
    "\1\75\26\0\10\75\3\0\20\75\1\155\13\75\2\0"+
    "\1\75\26\0\6\75\1\156\1\75\3\0\34\75\2\0"+
    "\1\75\26\0\10\75\3\0\4\75\1\157\27\75\2\0"+
    "\1\75\26\0\10\75\3\0\22\75\1\160\11\75\2\0"+
    "\1\75\26\0\10\75\3\0\14\75\1\161\17\75\2\0"+
    "\1\75\26\0\10\75\3\0\4\75\1\162\27\75\2\0"+
    "\1\75\26\0\1\163\7\75\3\0\34\75\2\0\1\75"+
    "\26\0\10\75\3\0\4\75\1\164\27\75\2\0\1\75"+
    "\16\0\1\165\30\0\6\166\16\0\1\166\32\0\1\167"+
    "\7\75\3\0\34\75\2\0\1\75\26\0\1\75\1\170"+
    "\6\75\3\0\34\75\2\0\1\75\26\0\10\75\3\0"+
    "\22\75\1\171\11\75\2\0\1\75\26\0\5\75\1\172"+
    "\2\75\3\0\34\75\2\0\1\75\26\0\5\75\1\173"+
    "\2\75\3\0\34\75\2\0\1\75\26\0\6\75\1\174"+
    "\1\75\3\0\34\75\2\0\1\75\26\0\10\75\3\0"+
    "\1\75\1\175\32\75\2\0\1\75\26\0\1\75\1\176"+
    "\6\75\3\0\34\75\2\0\1\75\26\0\10\75\3\0"+
    "\23\75\1\177\10\75\2\0\1\75\26\0\10\75\3\0"+
    "\14\75\1\200\17\75\2\0\1\75\76\0\1\122\22\0"+
    "\1\124\1\122\57\0\17\125\1\201\77\125\1\201\5\125"+
    "\1\202\3\125\1\203\5\125\1\204\1\125\1\205\11\125"+
    "\1\206\43\125\1\201\4\125\1\207\1\210\1\125\1\211"+
    "\15\125\1\212\1\213\1\214\1\215\1\216\1\217\44\125"+
    "\1\201\33\125\1\220\43\125\1\201\5\125\1\221\15\125"+
    "\1\222\53\125\1\201\1\223\57\125\42\0\1\224\61\0"+
    "\1\225\113\0\1\226\70\0\1\227\122\0\1\230\64\0"+
    "\1\231\62\0\3\75\1\232\4\75\3\0\34\75\2\0"+
    "\1\75\26\0\1\233\7\75\3\0\34\75\2\0\1\75"+
    "\26\0\7\75\1\234\3\0\34\75\2\0\1\75\26\0"+
    "\5\75\1\235\2\75\3\0\34\75\2\0\1\75\26\0"+
    "\1\236\7\75\3\0\34\75\2\0\1\75\26\0\10\75"+
    "\3\0\21\75\1\237\12\75\2\0\1\75\26\0\1\75"+
    "\1\240\6\75\3\0\34\75\2\0\1\75\26\0\10\75"+
    "\3\0\4\75\1\241\27\75\2\0\1\75\26\0\6\75"+
    "\1\242\1\75\3\0\34\75\2\0\1\75\47\0\6\166"+
    "\16\0\1\166\32\0\10\75\3\0\14\75\1\243\17\75"+
    "\2\0\1\75\26\0\1\244\7\75\3\0\34\75\2\0"+
    "\1\75\26\0\7\75\1\245\3\0\34\75\2\0\1\75"+
    "\26\0\1\75\1\246\6\75\3\0\34\75\2\0\1\75"+
    "\26\0\10\75\3\0\4\75\1\247\27\75\2\0\1\75"+
    "\26\0\10\75\3\0\3\75\1\250\30\75\2\0\1\75"+
    "\26\0\10\75\3\0\14\75\1\251\17\75\2\0\1\75"+
    "\26\0\10\75\3\0\26\75\1\252\5\75\2\0\1\75"+
    "\26\0\10\75\3\0\22\75\1\253\11\75\2\0\1\75"+
    "\2\0\17\125\1\201\1\254\76\125\1\201\1\255\76\125"+
    "\1\201\22\125\1\256\54\125\1\201\1\257\76\125\1\201"+
    "\1\260\76\125\1\201\4\125\1\261\72\125\1\201\20\125"+
    "\1\262\56\125\1\201\1\263\76\125\1\201\11\125\1\264"+
    "\65\125\1\201\1\265\76\125\1\201\1\266\76\125\1\201"+
    "\1\267\76\125\1\201\1\270\76\125\1\201\1\271\76\125"+
    "\1\201\1\272\76\125\1\201\34\125\1\273\42\125\1\201"+
    "\1\274\76\125\1\201\21\125\1\275\36\125\32\0\1\276"+
    "\77\0\1\277\77\0\1\300\106\0\1\301\102\0\1\302"+
    "\57\0\10\75\3\0\17\75\1\303\14\75\2\0\1\75"+
    "\26\0\3\75\1\304\4\75\3\0\34\75\2\0\1\75"+
    "\26\0\1\305\7\75\3\0\34\75\2\0\1\75\26\0"+
    "\10\75\3\0\22\75\1\306\11\75\2\0\1\75\26\0"+
    "\3\75\1\307\4\75\3\0\34\75\2\0\1\75\26\0"+
    "\10\75\3\0\2\75\1\310\31\75\2\0\1\75\26\0"+
    "\3\75\1\311\4\75\3\0\34\75\2\0\1\75\26\0"+
    "\5\75\1\312\2\75\3\0\34\75\2\0\1\75\26\0"+
    "\10\75\3\0\14\75\1\313\17\75\2\0\1\75\26\0"+
    "\3\75\1\314\4\75\3\0\34\75\2\0\1\75\26\0"+
    "\1\75\1\315\6\75\3\0\34\75\2\0\1\75\26\0"+
    "\1\75\1\316\6\75\3\0\34\75\2\0\1\75\26\0"+
    "\10\75\3\0\22\75\1\317\11\75\2\0\1\75\26\0"+
    "\10\75\3\0\27\75\1\320\4\75\2\0\1\75\26\0"+
    "\1\321\7\75\3\0\34\75\2\0\1\75\2\0\17\125"+
    "\1\322\77\125\1\201\12\125\1\323\64\125\1\201\12\125"+
    "\1\324\64\125\1\201\12\125\1\325\64\125\1\201\21\125"+
    "\1\326\55\125\1\201\1\327\76\125\1\201\24\125\1\330"+
    "\33\125\27\0\1\331\77\0\1\332\74\0\10\75\3\0"+
    "\4\75\1\333\27\75\2\0\1\75\26\0\10\75\3\0"+
    "\4\75\1\334\27\75\2\0\1\75\26\0\5\75\1\335"+
    "\2\75\3\0\34\75\2\0\1\75\26\0\10\75\3\0"+
    "\3\75\1\336\30\75\2\0\1\75\26\0\10\75\3\0"+
    "\2\75\1\337\31\75\2\0\1\75\26\0\7\75\1\340"+
    "\3\0\34\75\2\0\1\75\26\0\3\75\1\341\4\75"+
    "\3\0\34\75\2\0\1\75\26\0\10\75\3\0\21\75"+
    "\1\342\12\75\2\0\1\75\26\0\10\75\3\0\30\75"+
    "\1\343\3\75\2\0\1\75\22\0\1\344\57\0\17\125"+
    "\1\201\7\125\1\345\67\125\1\201\7\125\1\346\67\125"+
    "\1\201\1\347\76\125\1\201\1\350\76\125\1\201\1\351"+
    "\57\125\24\0\6\75\1\352\1\75\3\0\34\75\2\0"+
    "\1\75\26\0\7\75\1\353\3\0\34\75\2\0\1\75"+
    "\26\0\10\75\3\0\22\75\1\354\11\75\2\0\1\75"+
    "\26\0\6\75\1\355\1\75\3\0\34\75\2\0\1\75"+
    "\26\0\5\75\1\356\2\75\3\0\34\75\2\0\1\75"+
    "\21\0\1\122\60\0\17\125\1\201\1\357\76\125\1\201"+
    "\1\360\57\125\24\0\10\75\3\0\4\75\1\361\27\75"+
    "\2\0\1\75\26\0\3\75\1\362\4\75\3\0\34\75"+
    "\2\0\1\75\26\0\10\75\3\0\2\75\1\363\31\75"+
    "\2\0\1\75\26\0\1\75\1\364\6\75\3\0\34\75"+
    "\2\0\1\75\26\0\7\75\1\365\3\0\34\75\2\0"+
    "\1\75\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\14\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\10\1\1\11\12\1\6\11\2\1\1\0\1\11\5\0"+
    "\2\11\11\1\2\11\2\1\1\0\12\1\1\11\1\1"+
    "\7\0\1\11\1\0\2\11\2\0\1\11\1\0\6\11"+
    "\1\0\1\11\1\0\11\1\1\0\13\1\22\0\1\1"+
    "\4\0\1\11\1\0\22\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\6\1\1\0\1\1\3\0\3\11"+
    "\20\1\4\0\1\1\1\0\2\11\11\1\3\0\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String cadena= "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerh(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerh(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 48: 
          { return new Symbol(sym.INT, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 55: 
          { return new Symbol(sym.TH_F, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 90: 
          { return new Symbol(sym.VARIA, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 64: 
          { return new Symbol(sym.BR_F, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 33: 
          { return new Symbol(sym.CADENA2, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 32: 
          { return new Symbol(sym.ID, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 75: 
          { return new Symbol(sym.TABLE_I, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 61: 
          { return new Symbol(sym.H4_F, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 60: 
          { return new Symbol(sym.H3_F, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 59: 
          { return new Symbol(sym.H2_F, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 9: 
          { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 58: 
          { return new Symbol(sym.H1_F, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 20: 
          { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 50: 
          { return new Symbol(sym.DIV_I, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 76: 
          { return new Symbol(sym.TITLE_I, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 77: 
          { return new Symbol(sym.CLASE, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 82: 
          { return new Symbol(sym.HEAD_F, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 56: 
          { return new Symbol(sym.TD_F, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 19: 
          { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 47: 
          { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 68: 
          { return new Symbol(sym.FALS, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 78: 
          { return new Symbol(sym.NOMBR, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 86: 
          { return new Symbol(sym.TABLE_F, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 35: 
          { return new Symbol(sym.OR, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 12: 
          { return new Symbol(sym.SUMA, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 3: 
          { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 74: 
          { return new Symbol(sym.DIV_F, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 21: 
          { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 87: 
          { return new Symbol(sym.TITLE_F, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 23: 
          { /*Saltos de linea, ignorados*/
          }
        case 121: break;
        case 67: 
          { return new Symbol(sym.BODY_I, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 26: 
          { String tmp=cadena; cadena="";  
                System.out.println("Se esperaba cierre de cadena (\")."); 
                yybegin(YYINITIAL);
          }
        case 123: break;
        case 79: 
          { return new Symbol(sym.STRIN, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 7: 
          { return new Symbol(sym.COR_C, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 70: 
          { return new Symbol(sym.ALIGN, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 52: 
          { return new Symbol(sym.FONT, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 88: 
          { return new Symbol(sym.CANTI, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 15: 
          { return new Symbol(sym.MULTI, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 22: 
          { /*Espacios en blanco, ignorados*/
          }
        case 130: break;
        case 5: 
          { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 39: 
          { return new Symbol(sym.HR_I, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 14: 
          { return new Symbol(sym.MODS, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 65: 
          { return new Symbol(sym.HTML_I, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 71: 
          { return new Symbol(sym.SCORE, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 10: 
          { return new Symbol(sym.DOSPU, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 16: 
          { return new Symbol(sym.DIVIS, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 89: 
          { return new Symbol(sym.TCOLOR, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 83: 
          { return new Symbol(sym.BODY_F, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 51: 
          { return new Symbol(sym.TRU, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 85: 
          { return new Symbol(sym.BOOLEA, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 18: 
          { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 24: 
          { yybegin(CADENA); cadena+="\"";
          }
        case 143: break;
        case 8: 
          { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 73: 
          { return new Symbol(sym.PRINT, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 1: 
          { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
          }
        case 146: break;
        case 57: 
          { return new Symbol(sym.HR_F, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 11: 
          { return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 46: 
          { return new Symbol(sym.BR_I, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 30: 
          { return new Symbol(sym.P_I, yyline, yycolumn,yytext());
          }
        case 150: break;
        case 81: 
          { return new Symbol(sym.HTML_F, yyline, yycolumn,yytext());
          }
        case 151: break;
        case 45: 
          { return new Symbol(sym.H6_I, yyline, yycolumn,yytext());
          }
        case 152: break;
        case 44: 
          { return new Symbol(sym.H5_I, yyline, yycolumn,yytext());
          }
        case 153: break;
        case 36: 
          { return new Symbol(sym.TR_I, yyline, yycolumn,yytext());
          }
        case 154: break;
        case 27: 
          { String tmp=cadena+"\""; cadena=""; yybegin(YYINITIAL);  return new Symbol(sym.CADENA, yychar,yyline,tmp);
          }
        case 155: break;
        case 69: 
          { return new Symbol(sym.DOUBL, yyline, yycolumn,yytext());
          }
        case 156: break;
        case 84: 
          { return new Symbol(sym.METOD, yyline, yycolumn,yytext());
          }
        case 157: break;
        case 2: 
          { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
          }
        case 158: break;
        case 37: 
          { return new Symbol(sym.TH_I, yyline, yycolumn,yytext());
          }
        case 159: break;
        case 72: 
          { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
          }
        case 160: break;
        case 6: 
          { return new Symbol(sym.COR_A, yyline, yycolumn,yytext());
          }
        case 161: break;
        case 31: 
          { return new Symbol(sym.CPREP, yyline, yycolumn,yytext());
          }
        case 162: break;
        case 43: 
          { return new Symbol(sym.H4_I, yyline, yycolumn,yytext());
          }
        case 163: break;
        case 42: 
          { return new Symbol(sym.H3_I, yyline, yycolumn,yytext());
          }
        case 164: break;
        case 41: 
          { return new Symbol(sym.H2_I, yyline, yycolumn,yytext());
          }
        case 165: break;
        case 40: 
          { return new Symbol(sym.H1_I, yyline, yycolumn,yytext());
          }
        case 166: break;
        case 53: 
          { return new Symbol(sym.CARAC, yyline, yycolumn,yytext());
          }
        case 167: break;
        case 28: 
          { return new Symbol(sym.COMENTARIO, yyline, yycolumn,yytext());
          }
        case 168: break;
        case 49: 
          { return new Symbol(sym.P_F, yyline, yycolumn,yytext());
          }
        case 169: break;
        case 66: 
          { return new Symbol(sym.HEAD_I, yyline, yycolumn,yytext());
          }
        case 170: break;
        case 29: 
          { return new Symbol(sym.CLOSE, yyline, yycolumn,yytext());
          }
        case 171: break;
        case 4: 
          { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
          }
        case 172: break;
        case 80: 
          { return new Symbol(sym.RESUL, yyline, yycolumn,yytext());
          }
        case 173: break;
        case 63: 
          { return new Symbol(sym.H6_F, yyline, yycolumn,yytext());
          }
        case 174: break;
        case 38: 
          { return new Symbol(sym.TD_I, yyline, yycolumn,yytext());
          }
        case 175: break;
        case 62: 
          { return new Symbol(sym.H5_F, yyline, yycolumn,yytext());
          }
        case 176: break;
        case 13: 
          { return new Symbol(sym.RESTA, yyline, yycolumn,yytext());
          }
        case 177: break;
        case 25: 
          { cadena+=yytext();
          }
        case 178: break;
        case 54: 
          { return new Symbol(sym.TR_F, yyline, yycolumn,yytext());
          }
        case 179: break;
        case 34: 
          { return new Symbol(sym.AND, yyline, yycolumn,yytext());
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
