/* The following code was generated by JFlex 1.4.3 on 26/03/18 01:32 PM */

package analisishtml;

import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/03/18 01:32 PM from the specification file
 * <tt>src/analisishtml/lexico.jflex</tt>
 */
public class scannerh implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 65, 66,  0, 65, 67,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51, 30, 68,  0, 19, 13, 28,  0,  1,  2, 14, 11,  7, 12, 10, 15, 
    62, 37, 38, 39, 40, 41, 42, 62, 62, 62,  9,  8, 17, 18, 16,  0, 
     0, 63, 53, 54, 63, 52, 55, 63, 63, 63, 63, 63, 59, 63, 50, 63, 
    61, 63, 56, 57, 60, 58, 63, 63, 63, 63, 63,  5,  0,  6,  0, 64, 
     0, 25, 34, 46, 33, 23, 24, 48, 31, 43, 63, 63, 26, 32, 49, 35, 
    45, 63, 21, 27, 20, 22, 44, 63, 47, 36, 63,  3, 29,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\10\1\1\24\1\1\1\25"+
    "\4\1\1\26\5\1\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\25\1\0\1\35\5\0\1\36\1\37\3\40"+
    "\2\41\4\40\1\42\1\43\1\40\1\0\12\40\2\34"+
    "\7\0\1\44\1\0\1\45\1\46\2\0\1\47\1\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\0\1\56"+
    "\1\0\7\40\1\0\1\57\13\40\22\0\1\60\4\0"+
    "\1\61\1\0\1\62\2\40\1\63\16\40\1\0\1\64"+
    "\1\0\1\65\1\66\2\0\1\67\1\0\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\0\1\76\3\0\1\77"+
    "\1\100\1\101\1\40\1\102\1\103\1\104\4\40\1\105"+
    "\6\40\1\106\1\34\4\0\1\107\1\0\1\110\1\111"+
    "\4\40\1\112\1\113\3\40\1\114\1\115\3\0\1\116"+
    "\1\117\1\120\1\40\1\121\2\40\1\41\2\40\1\122"+
    "\1\123\2\40\1\124\2\41\1\40\1\125\1\126\1\127"+
    "\2\41\1\130\6\41\1\131\2\41\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\317\0\212"+
    "\0\212\0\u0114\0\212\0\u0159\0\212\0\u019e\0\u01e3\0\u0228"+
    "\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\212\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\212\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\212\0\212\0\212\0\212\0\212\0\u06bd"+
    "\0\u0702\0\u0747\0\212\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\212\0\212\0\u0228\0\u08e5\0\u092a\0\u0678\0\u0228\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\212\0\212\0\u0a83\0\u0ac8\0\u0b0d"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\212\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\212\0\u0fe7\0\212\0\212\0\u102c\0\u1071"+
    "\0\212\0\u10b6\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u10fb\0\212\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u0e49\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\212\0\u1c92"+
    "\0\u0228\0\u1cd7\0\u1d1c\0\u0228\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u0e49\0\u216c\0\u0e49\0\u0e49\0\u21b1"+
    "\0\u21f6\0\u0e49\0\u223b\0\u0e49\0\u0e49\0\u0e49\0\u0e49\0\u0e49"+
    "\0\u0e49\0\u2280\0\u0e49\0\u22c5\0\u230a\0\u234f\0\212\0\212"+
    "\0\212\0\u2394\0\u0228\0\u0228\0\u0228\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u0228\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646"+
    "\0\u0228\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u0e49\0\u27e4"+
    "\0\212\0\212\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u0228\0\u0228"+
    "\0\u293d\0\u2982\0\u29c7\0\u0228\0\u0228\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u0e49\0\u0e49\0\u0e49\0\u2adb\0\u0228\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u0e49\0\u0e49\0\u2c79\0\u2cbe\0\u0228\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u0228\0\u0228\0\u0228\0\u2dd2\0\u2e17\0\u0228"+
    "\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u0678\0\u2ffa"+
    "\0\u303f\0\u0678";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\30\1\31\1\32"+
    "\1\30\1\33\1\34\1\35\1\36\1\30\1\37\4\30"+
    "\6\40\1\30\1\41\1\30\1\42\2\30\1\43\1\44"+
    "\1\45\1\30\1\46\1\47\1\30\1\50\4\30\1\51"+
    "\1\40\1\30\1\52\1\45\1\53\1\45\1\54\102\55"+
    "\1\56\1\55\1\57\125\0\1\60\24\0\6\61\23\0"+
    "\1\61\24\0\1\62\1\0\1\63\103\0\1\64\4\0"+
    "\1\65\12\0\1\66\1\0\1\67\1\70\12\0\1\71"+
    "\52\0\1\72\105\0\1\73\1\74\1\73\1\75\4\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\24\73\1\76\14\73\1\77\30\0\5\73\1\100\2\73"+
    "\3\0\4\73\1\101\17\73\1\76\14\73\1\77\30\0"+
    "\6\73\1\102\1\73\3\0\24\73\1\76\14\73\1\77"+
    "\30\0\10\73\3\0\17\73\1\103\4\73\1\76\14\73"+
    "\1\77\40\0\1\104\105\0\1\105\73\0\3\73\1\106"+
    "\4\73\3\0\24\73\1\76\14\73\1\77\16\0\1\107"+
    "\11\0\10\76\3\0\6\76\6\40\23\76\1\40\2\76"+
    "\30\0\5\73\1\110\2\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\5\73\1\111\1\112\1\73\3\0\4\73"+
    "\1\113\17\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\4\73\1\114\17\73\1\76\14\73\1\77\30\0\2\73"+
    "\1\115\5\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\4\73\1\116\17\73\1\76\14\73\1\77"+
    "\30\0\5\73\1\117\2\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\24\73\1\76\1\120\13\73"+
    "\1\77\30\0\1\73\1\121\6\73\3\0\24\73\1\76"+
    "\14\73\1\77\30\0\10\76\3\0\42\76\4\0\102\60"+
    "\1\122\1\123\1\60\12\0\1\107\32\0\6\61\23\0"+
    "\1\61\25\0\1\124\65\0\17\125\1\0\4\125\1\126"+
    "\12\125\1\127\1\125\1\130\1\131\12\125\1\132\27\125"+
    "\25\0\1\133\3\0\1\134\5\0\1\135\1\0\1\136"+
    "\11\0\1\137\55\0\1\140\1\141\1\0\1\142\15\0"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\105\0\1\151"+
    "\56\0\1\152\15\0\1\153\65\0\2\73\1\154\5\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\20\73\1\155\3\73\1\76\14\73\1\77\30\0\6\73"+
    "\1\156\1\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\22\73\1\157\1\73\1\76\14\73\1\77"+
    "\30\0\10\73\3\0\14\73\1\160\7\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\4\73\1\161\17\73\1\76"+
    "\14\73\1\77\30\0\1\162\7\73\3\0\24\73\1\76"+
    "\14\73\1\77\20\0\1\163\30\0\6\164\23\0\1\164"+
    "\32\0\1\73\1\165\6\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\22\73\1\166\1\73\1\76"+
    "\14\73\1\77\30\0\5\73\1\167\2\73\3\0\24\73"+
    "\1\76\14\73\1\77\30\0\6\73\1\170\1\73\3\0"+
    "\24\73\1\76\14\73\1\77\30\0\10\73\3\0\1\73"+
    "\1\171\22\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\1\73\1\172\22\73\1\76\14\73\1\77\30\0\10\73"+
    "\3\0\4\73\1\173\17\73\1\76\14\73\1\77\30\0"+
    "\1\73\1\174\6\73\3\0\2\73\1\175\21\73\1\76"+
    "\14\73\1\77\30\0\10\73\3\0\24\73\1\76\5\73"+
    "\1\176\6\73\1\77\30\0\10\73\3\0\14\73\1\177"+
    "\7\73\1\76\14\73\1\77\106\0\1\122\21\0\1\124"+
    "\1\122\64\0\17\125\1\200\104\125\1\200\5\125\1\201"+
    "\3\125\1\202\5\125\1\203\1\125\1\204\11\125\1\205"+
    "\50\125\1\200\4\125\1\206\1\207\1\125\1\210\15\125"+
    "\1\211\1\212\1\213\1\214\1\215\1\216\51\125\1\200"+
    "\33\125\1\217\50\125\1\200\5\125\1\220\15\125\1\221"+
    "\60\125\1\200\1\222\64\125\42\0\1\223\66\0\1\224"+
    "\120\0\1\225\75\0\1\226\127\0\1\227\71\0\1\230"+
    "\67\0\3\73\1\231\4\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\1\232\7\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\7\73\1\233\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\1\234\7\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\21\73\1\235\2\73\1\76"+
    "\14\73\1\77\30\0\1\73\1\236\6\73\3\0\24\73"+
    "\1\76\14\73\1\77\30\0\10\73\3\0\4\73\1\237"+
    "\17\73\1\76\14\73\1\77\51\0\6\164\23\0\1\164"+
    "\32\0\10\73\3\0\14\73\1\240\7\73\1\76\14\73"+
    "\1\77\30\0\1\241\7\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\7\73\1\242\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\4\73\1\243\17\73\1\76"+
    "\14\73\1\77\30\0\10\73\3\0\3\73\1\244\20\73"+
    "\1\76\14\73\1\77\30\0\3\73\1\245\4\73\3\0"+
    "\24\73\1\76\14\73\1\77\30\0\6\73\1\246\1\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\5\73\1\247"+
    "\2\73\3\0\24\73\1\76\14\73\1\77\30\0\3\73"+
    "\1\250\4\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\24\73\1\76\6\73\1\251\5\73\1\77"+
    "\30\0\10\73\3\0\22\73\1\252\1\73\1\76\14\73"+
    "\1\77\4\0\17\125\1\200\1\253\103\125\1\200\1\254"+
    "\103\125\1\200\22\125\1\255\61\125\1\200\1\256\103\125"+
    "\1\200\1\257\103\125\1\200\4\125\1\260\77\125\1\200"+
    "\20\125\1\261\63\125\1\200\1\262\103\125\1\200\11\125"+
    "\1\263\72\125\1\200\1\264\103\125\1\200\1\265\103\125"+
    "\1\200\1\266\103\125\1\200\1\267\103\125\1\200\1\270"+
    "\103\125\1\200\1\271\103\125\1\200\34\125\1\272\47\125"+
    "\1\200\1\273\103\125\1\200\21\125\1\274\43\125\32\0"+
    "\1\275\104\0\1\276\104\0\1\277\113\0\1\300\107\0"+
    "\1\301\64\0\10\73\3\0\17\73\1\302\4\73\1\76"+
    "\14\73\1\77\30\0\3\73\1\303\4\73\3\0\24\73"+
    "\1\76\14\73\1\77\30\0\10\73\3\0\22\73\1\304"+
    "\1\73\1\76\14\73\1\77\30\0\3\73\1\305\4\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\2\73\1\306\21\73\1\76\14\73\1\77\30\0\5\73"+
    "\1\307\2\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\14\73\1\310\7\73\1\76\14\73\1\77"+
    "\30\0\3\73\1\311\4\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\1\73\1\312\6\73\3\0\24\73\1\76"+
    "\14\73\1\77\30\0\1\73\1\313\6\73\3\0\24\73"+
    "\1\76\14\73\1\77\30\0\1\73\1\314\6\73\3\0"+
    "\24\73\1\76\14\73\1\77\30\0\3\73\1\315\4\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\17\73\1\316\4\73\1\76\14\73\1\77\30\0\10\73"+
    "\3\0\22\73\1\317\1\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\24\73\1\76\7\73\1\320\4\73\1\77"+
    "\30\0\1\321\7\73\3\0\24\73\1\76\14\73\1\77"+
    "\4\0\17\125\1\322\104\125\1\200\12\125\1\323\71\125"+
    "\1\200\12\125\1\324\71\125\1\200\12\125\1\325\71\125"+
    "\1\200\21\125\1\326\62\125\1\200\1\327\103\125\1\200"+
    "\24\125\1\330\40\125\27\0\1\331\104\0\1\332\101\0"+
    "\10\73\3\0\4\73\1\333\17\73\1\76\14\73\1\77"+
    "\30\0\10\73\3\0\4\73\1\334\17\73\1\76\14\73"+
    "\1\77\30\0\10\73\3\0\3\73\1\335\20\73\1\76"+
    "\14\73\1\77\30\0\10\73\3\0\2\73\1\336\21\73"+
    "\1\76\14\73\1\77\30\0\7\73\1\337\3\0\24\73"+
    "\1\76\14\73\1\77\30\0\3\73\1\340\4\73\3\0"+
    "\24\73\1\76\14\73\1\77\30\0\10\73\3\0\4\73"+
    "\1\341\17\73\1\76\14\73\1\77\30\0\5\73\1\342"+
    "\2\73\3\0\24\73\1\76\14\73\1\77\30\0\1\343"+
    "\7\73\3\0\24\73\1\76\14\73\1\77\30\0\5\73"+
    "\1\344\2\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\10\73\3\0\24\73\1\76\10\73\1\345\3\73\1\77"+
    "\24\0\1\346\64\0\17\125\1\200\7\125\1\347\74\125"+
    "\1\200\7\125\1\350\74\125\1\200\1\351\103\125\1\200"+
    "\1\352\103\125\1\200\1\353\64\125\24\0\6\73\1\354"+
    "\1\73\3\0\24\73\1\76\14\73\1\77\30\0\7\73"+
    "\1\355\3\0\24\73\1\76\14\73\1\77\30\0\6\73"+
    "\1\356\1\73\3\0\24\73\1\76\14\73\1\77\30\0"+
    "\5\73\1\357\2\73\3\0\24\73\1\76\14\73\1\77"+
    "\30\0\10\73\3\0\24\73\1\360\14\73\1\77\30\0"+
    "\10\73\3\0\22\73\1\361\1\73\1\76\14\73\1\77"+
    "\30\0\3\73\1\362\4\73\3\0\24\73\1\76\14\73"+
    "\1\77\23\0\1\122\65\0\17\125\1\200\1\363\103\125"+
    "\1\200\1\364\64\125\24\0\10\73\3\0\4\73\1\365"+
    "\17\73\1\76\14\73\1\77\30\0\3\73\1\366\4\73"+
    "\3\0\24\73\1\76\14\73\1\77\30\0\10\73\3\0"+
    "\2\73\1\367\21\73\1\76\14\73\1\77\30\0\10\76"+
    "\3\0\25\76\1\370\2\76\1\371\11\76\30\0\10\73"+
    "\3\0\16\73\1\372\5\73\1\76\14\73\1\77\30\0"+
    "\1\73\1\373\6\73\3\0\24\73\1\76\14\73\1\77"+
    "\30\0\1\73\1\374\6\73\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\7\73\1\375\3\0\24\73\1\76\14\73"+
    "\1\77\30\0\10\76\3\0\22\76\1\376\17\76\30\0"+
    "\6\76\1\377\1\76\3\0\42\76\30\0\10\73\3\0"+
    "\4\73\1\u0100\17\73\1\76\14\73\1\77\30\0\1\u0101"+
    "\7\76\3\0\42\76\30\0\10\76\3\0\4\76\1\u0102"+
    "\35\76\30\0\3\76\1\u0103\4\76\3\0\42\76\30\0"+
    "\1\u0104\7\76\3\0\42\76\30\0\1\76\1\u0105\6\76"+
    "\3\0\42\76\30\0\5\76\1\u0106\2\76\3\0\42\76"+
    "\30\0\10\76\3\0\4\76\1\u0107\35\76\30\0\10\76"+
    "\3\0\22\76\1\u0108\17\76\30\0\1\u0109\7\76\3\0"+
    "\42\76\30\0\3\76\1\u010a\4\76\3\0\42\76\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\14\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\10\1\1\11\6\1\1\11\5\1\5\11\2\1\1\0"+
    "\1\11\5\0\2\11\11\1\2\11\1\1\1\0\12\1"+
    "\1\11\1\1\7\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\6\11\1\0\1\11\1\0\7\1\1\0\14\1"+
    "\22\0\1\1\4\0\1\11\1\0\22\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\6\1\1\0\1\1"+
    "\3\0\3\11\21\1\4\0\1\1\1\0\2\11\13\1"+
    "\3\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String cadena= "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerh(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerh(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 89: 
          { return new Symbol(sym.INT, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 53: 
          { return new Symbol(sym.TH_F, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 87: 
          { return new Symbol(sym.VARIA, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 62: 
          { return new Symbol(sym.BR_F, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 33: 
          { return new Symbol(sym.CADENA2, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 32: 
          { return new Symbol(sym.ID, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 72: 
          { return new Symbol(sym.TABLE_I, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 59: 
          { return new Symbol(sym.H4_F, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 58: 
          { return new Symbol(sym.H3_F, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 57: 
          { return new Symbol(sym.H2_F, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 9: 
          { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 56: 
          { return new Symbol(sym.H1_F, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 20: 
          { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 49: 
          { return new Symbol(sym.DIV_I, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 73: 
          { return new Symbol(sym.TITLE_I, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 74: 
          { return new Symbol(sym.CLASE, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 79: 
          { return new Symbol(sym.HEAD_F, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 54: 
          { return new Symbol(sym.TD_F, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 19: 
          { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 47: 
          { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 66: 
          { return new Symbol(sym.FALS, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 75: 
          { return new Symbol(sym.NOMBR, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 82: 
          { return new Symbol(sym.TABLE_F, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 35: 
          { return new Symbol(sym.OR, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 12: 
          { return new Symbol(sym.SUMA, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 3: 
          { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 71: 
          { return new Symbol(sym.DIV_F, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 21: 
          { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 83: 
          { return new Symbol(sym.TITLE_F, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 23: 
          { /*Saltos de linea, ignorados*/
          }
        case 121: break;
        case 65: 
          { return new Symbol(sym.BODY_I, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 26: 
          { String tmp=cadena; cadena="";  
                System.out.println("Se esperaba cierre de cadena (\")."); 
                yybegin(YYINITIAL);
          }
        case 123: break;
        case 76: 
          { return new Symbol(sym.STRIN, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 7: 
          { return new Symbol(sym.COR_C, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 67: 
          { return new Symbol(sym.ALIGN, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 51: 
          { return new Symbol(sym.FONT, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 84: 
          { return new Symbol(sym.CANTI, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 15: 
          { return new Symbol(sym.MULTI, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 22: 
          { /*Espacios en blanco, ignorados*/
          }
        case 130: break;
        case 5: 
          { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 39: 
          { return new Symbol(sym.HR_I, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 14: 
          { return new Symbol(sym.MODS, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 63: 
          { return new Symbol(sym.HTML_I, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 68: 
          { return new Symbol(sym.SCORE, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 10: 
          { return new Symbol(sym.DOSPU, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 16: 
          { return new Symbol(sym.DIVIS, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 86: 
          { return new Symbol(sym.TCOLOR, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 80: 
          { return new Symbol(sym.BODY_F, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 50: 
          { return new Symbol(sym.TRU, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 88: 
          { return new Symbol(sym.BOOLEA, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 18: 
          { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 24: 
          { yybegin(CADENA); cadena+="\"";
          }
        case 143: break;
        case 8: 
          { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 1: 
          { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
          }
        case 145: break;
        case 70: 
          { return new Symbol(sym.PRINT, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 55: 
          { return new Symbol(sym.HR_F, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 11: 
          { return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 46: 
          { return new Symbol(sym.BR_I, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 30: 
          { return new Symbol(sym.P_I, yyline, yycolumn,yytext());
          }
        case 150: break;
        case 78: 
          { return new Symbol(sym.HTML_F, yyline, yycolumn,yytext());
          }
        case 151: break;
        case 45: 
          { return new Symbol(sym.H6_I, yyline, yycolumn,yytext());
          }
        case 152: break;
        case 44: 
          { return new Symbol(sym.H5_I, yyline, yycolumn,yytext());
          }
        case 153: break;
        case 36: 
          { return new Symbol(sym.TR_I, yyline, yycolumn,yytext());
          }
        case 154: break;
        case 27: 
          { String tmp=cadena+"\""; cadena=""; yybegin(YYINITIAL);  return new Symbol(sym.CADENA, yychar,yyline,tmp);
          }
        case 155: break;
        case 90: 
          { return new Symbol(sym.DOUBL, yyline, yycolumn,yytext());
          }
        case 156: break;
        case 81: 
          { return new Symbol(sym.METOD, yyline, yycolumn,yytext());
          }
        case 157: break;
        case 2: 
          { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
          }
        case 158: break;
        case 37: 
          { return new Symbol(sym.TH_I, yyline, yycolumn,yytext());
          }
        case 159: break;
        case 69: 
          { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
          }
        case 160: break;
        case 6: 
          { return new Symbol(sym.COR_A, yyline, yycolumn,yytext());
          }
        case 161: break;
        case 31: 
          { return new Symbol(sym.CPREP, yyline, yycolumn,yytext());
          }
        case 162: break;
        case 43: 
          { return new Symbol(sym.H4_I, yyline, yycolumn,yytext());
          }
        case 163: break;
        case 42: 
          { return new Symbol(sym.H3_I, yyline, yycolumn,yytext());
          }
        case 164: break;
        case 41: 
          { return new Symbol(sym.H2_I, yyline, yycolumn,yytext());
          }
        case 165: break;
        case 40: 
          { return new Symbol(sym.H1_I, yyline, yycolumn,yytext());
          }
        case 166: break;
        case 85: 
          { return new Symbol(sym.CARAC, yyline, yycolumn,yytext());
          }
        case 167: break;
        case 28: 
          { return new Symbol(sym.COMENTARIO, yyline, yycolumn,yytext());
          }
        case 168: break;
        case 48: 
          { return new Symbol(sym.P_F, yyline, yycolumn,yytext());
          }
        case 169: break;
        case 64: 
          { return new Symbol(sym.HEAD_I, yyline, yycolumn,yytext());
          }
        case 170: break;
        case 29: 
          { return new Symbol(sym.CLOSE, yyline, yycolumn,yytext());
          }
        case 171: break;
        case 4: 
          { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
          }
        case 172: break;
        case 77: 
          { return new Symbol(sym.RESUL, yyline, yycolumn,yytext());
          }
        case 173: break;
        case 61: 
          { return new Symbol(sym.H6_F, yyline, yycolumn,yytext());
          }
        case 174: break;
        case 38: 
          { return new Symbol(sym.TD_I, yyline, yycolumn,yytext());
          }
        case 175: break;
        case 60: 
          { return new Symbol(sym.H5_F, yyline, yycolumn,yytext());
          }
        case 176: break;
        case 13: 
          { return new Symbol(sym.RESTA, yyline, yycolumn,yytext());
          }
        case 177: break;
        case 25: 
          { cadena+=yytext();
          }
        case 178: break;
        case 52: 
          { return new Symbol(sym.TR_F, yyline, yycolumn,yytext());
          }
        case 179: break;
        case 34: 
          { return new Symbol(sym.AND, yyline, yycolumn,yytext());
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
