
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisishtml;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserh extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserh() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserh(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserh(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\012\000\002\006" +
    "\007\000\002\006\002\000\002\007\007\000\002\010\007" +
    "\000\002\010\002\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\002\000\002\021\007\000\002\021\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\011\007\000\002\012\010\000\002\012\002\000\002" +
    "\013\010\000\002\013\010\000\002\013\002\000\002\014" +
    "\007\000\002\016\004\000\002\016\005\000\002\015\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\007\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\002\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\024\004\000\002\024\007" +
    "\000\002\024\002\000\002\025\005\000\002\025\007\000" +
    "\002\026\003\000\002\026\002\000\002\027\004\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\002\000\002\032\005\000" +
    "\002\032\005\000\002\032\012\000\002\032\007\000\002" +
    "\032\006\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\042\004\001\002\000\014\023\uffda\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\025\322\001" +
    "\002\000\004\025\317\001\002\000\004\025\314\001\002" +
    "\000\004\023\027\001\002\000\004\025\014\001\002\000" +
    "\022\003\024\033\016\034\025\116\020\117\023\120\017" +
    "\123\015\125\021\001\002\000\134\003\uffad\005\uffad\013" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\047\uffad\050\uffad\052\uffad\054\uffad\056\uffad" +
    "\060\uffad\062\uffad\065\uffad\066\uffad\071\uffad\073\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\102\uffad\104\uffad\106\uffad" +
    "\116\uffad\117\uffad\120\uffad\123\uffad\124\uffad\125\uffad\126" +
    "\uffad\127\uffad\130\uffad\131\uffad\001\002\000\134\003\uffaa" +
    "\005\uffaa\013\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\047\uffaa\050\uffaa\052\uffaa\054" +
    "\uffaa\056\uffaa\060\uffaa\062\uffaa\065\uffaa\066\uffaa\071\uffaa" +
    "\073\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\104" +
    "\uffaa\106\uffaa\116\uffaa\117\uffaa\120\uffaa\123\uffaa\124\uffaa" +
    "\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131\uffaa\001\002\000" +
    "\134\003\uffaf\005\uffaf\013\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\047\uffaf\050\uffaf" +
    "\052\uffaf\054\uffaf\056\uffaf\060\uffaf\062\uffaf\065\uffaf\066" +
    "\uffaf\071\uffaf\073\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\104\uffaf\106\uffaf\116\uffaf\117\uffaf\120\uffaf\123" +
    "\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf" +
    "\001\002\000\134\003\uffb0\005\uffb0\013\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\047" +
    "\uffb0\050\uffb0\052\uffb0\054\uffb0\056\uffb0\060\uffb0\062\uffb0" +
    "\065\uffb0\066\uffb0\071\uffb0\073\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\104\uffb0\106\uffb0\116\uffb0\117\uffb0" +
    "\120\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130" +
    "\uffb0\131\uffb0\001\002\000\134\003\uffac\005\uffac\013\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\047\uffac\050\uffac\052\uffac\054\uffac\056\uffac\060" +
    "\uffac\062\uffac\065\uffac\066\uffac\071\uffac\073\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\104\uffac\106\uffac\116" +
    "\uffac\117\uffac\120\uffac\123\uffac\124\uffac\125\uffac\126\uffac" +
    "\127\uffac\130\uffac\131\uffac\001\002\000\066\003\uffda\023" +
    "\uffda\027\uffda\033\uffda\034\uffda\050\uffda\052\uffda\054\uffda" +
    "\056\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102" +
    "\uffda\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda" +
    "\125\uffda\126\007\127\011\130\013\131\010\001\002\000" +
    "\134\003\uffae\005\uffae\013\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\047\uffae\050\uffae" +
    "\052\uffae\054\uffae\056\uffae\060\uffae\062\uffae\065\uffae\066" +
    "\uffae\071\uffae\073\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\104\uffae\106\uffae\116\uffae\117\uffae\120\uffae\123" +
    "\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131\uffae" +
    "\001\002\000\134\003\uffa9\005\uffa9\013\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\047" +
    "\uffa9\050\uffa9\052\uffa9\054\uffa9\056\uffa9\060\uffa9\062\uffa9" +
    "\065\uffa9\066\uffa9\071\uffa9\073\uffa9\076\uffa9\077\uffa9\100" +
    "\uffa9\101\uffa9\102\uffa9\104\uffa9\106\uffa9\116\uffa9\117\uffa9" +
    "\120\uffa9\123\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\130" +
    "\uffa9\131\uffa9\001\002\000\134\003\uffab\005\uffab\013\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\047\uffab\050\uffab\052\uffab\054\uffab\056\uffab\060" +
    "\uffab\062\uffab\065\uffab\066\uffab\071\uffab\073\uffab\076\uffab" +
    "\077\uffab\100\uffab\101\uffab\102\uffab\104\uffab\106\uffab\116" +
    "\uffab\117\uffab\120\uffab\123\uffab\124\uffab\125\uffab\126\uffab" +
    "\127\uffab\130\uffab\131\uffab\001\002\000\056\003\uffdc\023" +
    "\uffdc\027\uffdc\033\uffdc\034\uffdc\050\uffdc\052\uffdc\054\uffdc" +
    "\056\uffdc\060\uffdc\062\uffdc\066\uffdc\076\uffdc\100\uffdc\102" +
    "\uffdc\104\uffdc\116\uffdc\117\uffdc\120\uffdc\123\uffdc\124\uffdc" +
    "\125\uffdc\001\002\000\004\124\031\001\002\000\006\044" +
    "\033\124\ufffe\001\002\000\074\003\uffe2\023\uffe2\027\uffe2" +
    "\033\uffe2\034\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\052" +
    "\uffe2\054\uffe2\056\uffe2\060\uffe2\062\uffe2\066\uffe2\071\uffe2" +
    "\073\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\104" +
    "\uffe2\116\uffe2\117\uffe2\120\uffe2\123\uffe2\124\uffe2\125\uffe2" +
    "\001\002\000\004\124\031\001\002\000\014\023\uffda\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\023\035" +
    "\001\002\000\006\045\ufffb\064\037\001\002\000\004\045" +
    "\044\001\002\000\014\023\uffda\126\007\127\011\130\013" +
    "\131\010\001\002\000\004\023\041\001\002\000\022\003" +
    "\024\033\016\034\025\116\020\117\023\120\017\123\015" +
    "\125\021\001\002\000\004\065\043\001\002\000\004\045" +
    "\ufffc\001\002\000\004\124\uffff\001\002\000\004\046\046" +
    "\001\002\000\014\023\uffda\126\007\127\011\130\013\131" +
    "\010\001\002\000\004\043\050\001\002\000\004\002\000" +
    "\001\002\000\004\023\052\001\002\000\056\003\024\027" +
    "\064\033\016\034\025\047\ufff2\050\070\052\056\054\072" +
    "\056\061\060\074\062\063\066\062\076\057\100\054\102" +
    "\100\104\075\116\020\117\023\120\017\123\015\124\031" +
    "\125\021\001\002\000\070\003\024\023\ufff2\027\064\033" +
    "\016\034\025\047\ufff2\050\070\052\056\054\072\056\061" +
    "\060\074\062\063\066\062\071\ufff2\073\ufff2\076\057\077" +
    "\ufff2\100\054\101\ufff2\102\100\104\075\116\020\117\023" +
    "\120\017\123\015\124\031\125\021\001\002\000\014\023" +
    "\uffda\126\007\127\011\130\013\131\010\001\002\000\070" +
    "\003\uffd8\023\uffd8\027\uffd8\033\uffd8\034\uffd8\047\uffd8\050" +
    "\uffd8\052\uffd8\054\uffd8\056\uffd8\060\uffd8\062\uffd8\066\uffd8" +
    "\071\uffd8\073\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\104\uffd8\116\uffd8\117\uffd8\120\uffd8\123\uffd8\124\uffd8" +
    "\125\uffd8\001\002\000\066\003\uffda\023\uffda\027\uffda\033" +
    "\uffda\034\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda" +
    "\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116" +
    "\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007" +
    "\127\011\130\013\131\010\001\002\000\014\023\uffda\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\047\276" +
    "\001\002\000\066\003\uffda\023\uffda\027\uffda\033\uffda\034" +
    "\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda" +
    "\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117" +
    "\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011" +
    "\130\013\131\010\001\002\000\014\023\uffda\126\007\127" +
    "\011\130\013\131\010\001\002\000\066\003\uffda\023\uffda" +
    "\027\uffda\033\uffda\034\uffda\050\uffda\052\uffda\054\uffda\056" +
    "\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda" +
    "\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125" +
    "\uffda\126\007\127\011\130\013\131\010\001\002\000\024" +
    "\003\142\027\uffd4\035\132\036\133\037\144\040\135\041" +
    "\141\107\143\117\uffd0\001\002\000\070\003\uffd9\023\uffd9" +
    "\027\uffd9\033\uffd9\034\uffd9\047\uffd9\050\uffd9\052\uffd9\054" +
    "\uffd9\056\uffd9\060\uffd9\062\uffd9\066\uffd9\071\uffd9\073\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\104\uffd9\116" +
    "\uffd9\117\uffd9\120\uffd9\123\uffd9\124\uffd9\125\uffd9\001\002" +
    "\000\070\003\024\023\ufff2\027\064\033\016\034\025\047" +
    "\ufff2\050\070\052\056\054\072\056\061\060\074\062\063" +
    "\066\062\071\ufff2\073\ufff2\076\057\077\ufff2\100\054\101" +
    "\ufff2\102\100\104\075\116\020\117\023\120\017\123\015" +
    "\124\031\125\021\001\002\000\070\003\024\023\ufff2\027" +
    "\064\033\016\034\025\047\ufff2\050\070\052\056\054\072" +
    "\056\061\060\074\062\063\066\062\071\ufff2\073\ufff2\076" +
    "\057\077\ufff2\100\054\101\ufff2\102\100\104\075\116\020" +
    "\117\023\120\017\123\015\124\031\125\021\001\002\000" +
    "\066\003\uffda\023\uffda\027\uffda\033\uffda\034\uffda\050\uffda" +
    "\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda\066\uffda\076" +
    "\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117\uffda\120\uffda" +
    "\123\uffda\124\uffda\125\uffda\126\007\127\011\130\013\131" +
    "\010\001\002\000\070\003\024\023\ufff2\027\064\033\016" +
    "\034\025\047\ufff2\050\070\052\056\054\072\056\061\060" +
    "\074\062\063\066\062\071\ufff2\073\ufff2\076\057\077\ufff2" +
    "\100\054\101\ufff2\102\100\104\075\116\020\117\023\120" +
    "\017\123\015\124\031\125\021\001\002\000\066\003\uffda" +
    "\023\uffda\027\uffda\033\uffda\034\uffda\050\uffda\052\uffda\054" +
    "\uffda\056\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda" +
    "\102\uffda\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124" +
    "\uffda\125\uffda\126\007\127\011\130\013\131\010\001\002" +
    "\000\070\003\024\023\ufff2\027\064\033\016\034\025\047" +
    "\ufff2\050\070\052\056\054\072\056\061\060\074\062\063" +
    "\066\062\071\ufff2\073\ufff2\076\057\077\ufff2\100\054\101" +
    "\ufff2\102\100\104\075\116\020\117\023\120\017\123\015" +
    "\124\031\125\021\001\002\000\066\003\uffda\023\uffda\027" +
    "\uffda\033\uffda\034\uffda\050\uffda\052\uffda\054\uffda\056\uffda" +
    "\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104" +
    "\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda" +
    "\126\007\127\011\130\013\131\010\001\002\000\006\023" +
    "\107\026\110\001\002\000\070\003\024\023\ufff2\027\064" +
    "\033\016\034\025\047\ufff2\050\070\052\056\054\072\056" +
    "\061\060\074\062\063\066\062\071\ufff2\073\ufff2\076\057" +
    "\077\ufff2\100\054\101\ufff2\102\100\104\075\116\020\117" +
    "\023\120\017\123\015\124\031\125\021\001\002\000\070" +
    "\003\024\023\ufff2\027\064\033\016\034\025\047\ufff2\050" +
    "\070\052\056\054\072\056\061\060\074\062\063\066\062" +
    "\071\ufff2\073\ufff2\076\057\077\ufff2\100\054\101\ufff2\102" +
    "\100\104\075\116\020\117\023\120\017\123\015\124\031" +
    "\125\021\001\002\000\006\023\103\026\104\001\002\000" +
    "\070\003\024\023\ufff2\027\064\033\016\034\025\047\ufff2" +
    "\050\070\052\056\054\072\056\061\060\074\062\063\066" +
    "\062\071\ufff2\073\ufff2\076\057\077\ufff2\100\054\101\ufff2" +
    "\102\100\104\075\116\020\117\023\120\017\123\015\124" +
    "\031\125\021\001\002\000\016\023\ufff4\047\ufff4\071\ufff4" +
    "\073\ufff4\077\ufff4\101\ufff4\001\002\000\070\003\uffe1\023" +
    "\uffe1\027\uffe1\033\uffe1\034\uffe1\047\uffe1\050\uffe1\052\uffe1" +
    "\054\uffe1\056\uffe1\060\uffe1\062\uffe1\066\uffe1\071\uffe1\073" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1" +
    "\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124\uffe1\125\uffe1\001" +
    "\002\000\070\003\uffe0\023\uffe0\027\uffe0\033\uffe0\034\uffe0" +
    "\047\uffe0\050\uffe0\052\uffe0\054\uffe0\056\uffe0\060\uffe0\062" +
    "\uffe0\066\uffe0\071\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\104\uffe0\116\uffe0\117\uffe0\120\uffe0\123" +
    "\uffe0\124\uffe0\125\uffe0\001\002\000\016\023\ufff6\047\ufff6" +
    "\071\ufff6\073\ufff6\077\ufff6\101\ufff6\001\002\000\016\023" +
    "\ufff5\047\ufff5\071\ufff5\073\ufff5\077\ufff5\101\ufff5\001\002" +
    "\000\004\105\111\001\002\000\070\003\uffe4\023\uffe4\027" +
    "\uffe4\033\uffe4\034\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4" +
    "\056\uffe4\060\uffe4\062\uffe4\066\uffe4\071\uffe4\073\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\104\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\123\uffe4\124\uffe4\125\uffe4\001\002\000" +
    "\070\003\uffe3\023\uffe3\027\uffe3\033\uffe3\034\uffe3\047\uffe3" +
    "\050\uffe3\052\uffe3\054\uffe3\056\uffe3\060\uffe3\062\uffe3\066" +
    "\uffe3\071\uffe3\073\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\104\uffe3\116\uffe3\117\uffe3\120\uffe3\123\uffe3\124" +
    "\uffe3\125\uffe3\001\002\000\056\003\024\023\ufff2\027\064" +
    "\033\016\034\025\050\070\052\056\054\072\056\061\060" +
    "\074\062\063\066\062\076\057\100\054\102\100\104\075" +
    "\116\020\117\023\120\017\123\015\124\031\125\021\001" +
    "\002\000\004\023\114\001\002\000\004\061\115\001\002" +
    "\000\070\003\uffed\023\uffed\027\uffed\033\uffed\034\uffed\047" +
    "\uffed\050\uffed\052\uffed\054\uffed\056\uffed\060\uffed\062\uffed" +
    "\066\uffed\071\uffed\073\uffed\076\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\104\uffed\116\uffed\117\uffed\120\uffed\123\uffed" +
    "\124\uffed\125\uffed\001\002\000\016\023\ufff9\047\ufff9\071" +
    "\ufff9\073\ufff9\077\ufff9\101\ufff9\001\002\000\056\003\024" +
    "\023\ufff2\027\064\033\016\034\025\050\070\052\056\054" +
    "\072\056\061\060\074\062\063\066\062\076\057\100\054" +
    "\102\100\104\075\116\020\117\023\120\017\123\015\124" +
    "\031\125\021\001\002\000\004\023\121\001\002\000\004" +
    "\055\122\001\002\000\070\003\uffef\023\uffef\027\uffef\033" +
    "\uffef\034\uffef\047\uffef\050\uffef\052\uffef\054\uffef\056\uffef" +
    "\060\uffef\062\uffef\066\uffef\071\uffef\073\uffef\076\uffef\077" +
    "\uffef\100\uffef\101\uffef\102\uffef\104\uffef\116\uffef\117\uffef" +
    "\120\uffef\123\uffef\124\uffef\125\uffef\001\002\000\016\023" +
    "\ufff3\047\ufff3\071\ufff3\073\ufff3\077\ufff3\101\ufff3\001\002" +
    "\000\056\003\024\023\ufff2\027\064\033\016\034\025\050" +
    "\070\052\056\054\072\056\061\060\074\062\063\066\062" +
    "\076\057\100\054\102\100\104\075\116\020\117\023\120" +
    "\017\123\015\124\031\125\021\001\002\000\004\023\126" +
    "\001\002\000\004\051\127\001\002\000\070\003\ufff1\023" +
    "\ufff1\027\ufff1\033\ufff1\034\ufff1\047\ufff1\050\ufff1\052\ufff1" +
    "\054\ufff1\056\ufff1\060\ufff1\062\ufff1\066\ufff1\071\ufff1\073" +
    "\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\104\ufff1" +
    "\116\ufff1\117\ufff1\120\ufff1\123\ufff1\124\ufff1\125\ufff1\001" +
    "\002\000\016\023\ufff7\047\ufff7\071\ufff7\073\ufff7\077\ufff7" +
    "\101\ufff7\001\002\000\016\023\ufffa\047\ufffa\071\ufffa\073" +
    "\ufffa\077\ufffa\101\ufffa\001\002\000\004\117\uffa8\001\002" +
    "\000\004\117\uffa7\001\002\000\024\003\142\027\uffd4\035" +
    "\132\036\133\037\144\040\135\041\141\107\143\117\uffd0" +
    "\001\002\000\004\117\uffa5\001\002\000\004\027\236\001" +
    "\002\000\004\117\231\001\002\000\004\117\uffd1\001\002" +
    "\000\004\117\uffa4\001\002\000\004\117\uffa3\001\002\000" +
    "\004\004\145\001\002\000\004\117\uffa6\001\002\000\056" +
    "\003\024\004\146\005\uffb9\016\uffb9\017\154\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9" +
    "\032\153\033\016\034\025\106\147\116\020\117\023\120" +
    "\017\123\015\125\021\001\002\000\056\003\024\004\146" +
    "\005\uffb9\016\uffb9\017\154\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153\033\016" +
    "\034\025\106\147\116\020\117\023\120\017\123\015\125" +
    "\021\001\002\000\004\015\211\001\002\000\034\005\uffc9" +
    "\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9\001\002" +
    "\000\056\003\024\005\uffb9\013\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\016\034\025\106\147\116\020\117" +
    "\023\120\017\123\015\125\021\001\002\000\056\003\024" +
    "\005\uffb9\013\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\016\034\025\106\147\116\020\117\023\120\017\123" +
    "\015\125\021\001\002\000\060\003\024\004\146\005\uffb9" +
    "\013\uffb9\016\uffb9\017\154\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153\033\016" +
    "\034\025\106\147\116\020\117\023\120\017\123\015\125" +
    "\021\001\002\000\060\003\024\004\146\005\uffb9\013\uffb9" +
    "\016\uffb9\017\154\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153\033\016\034\025" +
    "\106\147\116\020\117\023\120\017\123\015\125\021\001" +
    "\002\000\032\005\173\016\161\017\172\020\162\021\167" +
    "\022\170\023\165\024\160\025\166\030\156\031\174\032" +
    "\171\001\002\000\060\003\uffc3\004\uffc3\005\uffc3\013\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\106\uffc3\116\uffc3\117\uffc3\120\uffc3\123\uffc3\125\uffc3\001" +
    "\002\000\060\003\024\004\146\005\uffb9\013\uffb9\016\uffb9" +
    "\017\154\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\030\uffb9\031\uffb9\032\153\033\016\034\025\106\147" +
    "\116\020\117\023\120\017\123\015\125\021\001\002\000" +
    "\060\003\uffc0\004\uffc0\005\uffc0\013\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\106\uffc0\116\uffc0" +
    "\117\uffc0\120\uffc0\123\uffc0\125\uffc0\001\002\000\060\003" +
    "\uffc8\004\uffc8\005\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\106\uffc8\116\uffc8\117\uffc8" +
    "\120\uffc8\123\uffc8\125\uffc8\001\002\000\060\003\uffc6\004" +
    "\uffc6\005\uffc6\013\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\106\uffc6\116\uffc6\117\uffc6\120\uffc6" +
    "\123\uffc6\125\uffc6\001\002\000\060\003\024\004\146\005" +
    "\uffb9\013\uffb9\016\uffb9\017\154\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153\033" +
    "\016\034\025\106\147\116\020\117\023\120\017\123\015" +
    "\125\021\001\002\000\060\003\024\004\146\005\uffb9\013" +
    "\uffb9\016\uffb9\017\154\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153\033\016\034" +
    "\025\106\147\116\020\117\023\120\017\123\015\125\021" +
    "\001\002\000\060\003\uffc1\004\uffc1\005\uffc1\013\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\106" +
    "\uffc1\116\uffc1\117\uffc1\120\uffc1\123\uffc1\125\uffc1\001\002" +
    "\000\004\025\177\001\002\000\060\003\uffc5\004\uffc5\005" +
    "\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\106\uffc5\116\uffc5\117\uffc5\120\uffc5\123\uffc5" +
    "\125\uffc5\001\002\000\060\003\uffc4\004\uffc4\005\uffc4\013" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\106\uffc4\116\uffc4\117\uffc4\120\uffc4\123\uffc4\125\uffc4" +
    "\001\002\000\004\025\176\001\002\000\060\003\uffc7\004" +
    "\uffc7\005\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\106\uffc7\116\uffc7\117\uffc7\120\uffc7" +
    "\123\uffc7\125\uffc7\001\002\000\024\003\142\027\uffd4\035" +
    "\132\036\133\037\144\040\135\041\141\107\143\117\uffd0" +
    "\001\002\000\060\003\uffc2\004\uffc2\005\uffc2\013\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\106" +
    "\uffc2\116\uffc2\117\uffc2\120\uffc2\123\uffc2\125\uffc2\001\002" +
    "\000\004\027\uffd5\001\002\000\060\003\uffbe\004\uffbe\005" +
    "\uffbe\013\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\106\uffbe\116\uffbe\117\uffbe\120\uffbe\123\uffbe" +
    "\125\uffbe\001\002\000\060\003\uffbf\004\uffbf\005\uffbf\013" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\106\uffbf\116\uffbf\117\uffbf\120\uffbf\123\uffbf\125\uffbf" +
    "\001\002\000\060\003\uffbd\004\uffbd\005\uffbd\013\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\106" +
    "\uffbd\116\uffbd\117\uffbd\120\uffbd\123\uffbd\125\uffbd\001\002" +
    "\000\034\005\uffca\013\uffca\016\161\017\172\020\162\021" +
    "\167\022\170\023\165\024\160\025\166\030\156\031\174" +
    "\032\171\001\002\000\034\005\uffcd\013\uffcd\016\161\017" +
    "\172\020\162\021\167\022\170\023\165\024\160\025\166" +
    "\030\156\031\174\032\171\001\002\000\060\003\uffbc\004" +
    "\uffbc\005\uffbc\013\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\106\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\123\uffbc\125\uffbc\001\002\000\034\005\uffcb\013\uffcb\016" +
    "\161\017\172\020\162\021\167\022\170\023\165\024\160" +
    "\025\166\030\156\031\174\032\171\001\002\000\034\005" +
    "\uffcf\013\uffcf\016\uffcf\017\uffcf\020\162\021\167\022\170" +
    "\023\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\001" +
    "\002\000\034\005\uffcc\013\uffcc\016\161\017\172\020\162" +
    "\021\167\022\170\023\165\024\160\025\166\030\uffcc\031" +
    "\uffcc\032\uffcc\001\002\000\034\005\uffba\013\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\030\uffba\031\uffba\032\uffba\001\002\000\034\005\uffbb" +
    "\013\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\030\uffbb\031\uffbb\032\uffbb\001\002" +
    "\000\012\110\215\111\213\114\214\115\216\001\002\000" +
    "\064\003\uffb7\005\uffb7\010\221\013\uffb7\015\220\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\106\uffb7" +
    "\113\217\116\uffb7\117\uffb7\120\uffb7\123\uffb7\125\uffb7\001" +
    "\002\000\064\003\uffb3\005\uffb3\010\uffb3\013\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\106\uffb3\113\uffb3\116\uffb3\117\uffb3\120\uffb3\123\uffb3\125" +
    "\uffb3\001\002\000\064\003\uffb2\005\uffb2\010\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\106\uffb2\113\uffb2\116\uffb2\117\uffb2\120\uffb2\123" +
    "\uffb2\125\uffb2\001\002\000\056\003\uffb8\005\uffb8\013\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\106\uffb8\116\uffb8\117\uffb8\120\uffb8\123\uffb8\125\uffb8\001" +
    "\002\000\064\003\uffb1\005\uffb1\010\uffb1\013\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\106\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1\125" +
    "\uffb1\001\002\000\056\003\uffb4\005\uffb4\013\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\106\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\123\uffb4\125\uffb4\001\002\000" +
    "\004\112\226\001\002\000\004\116\222\001\002\000\004" +
    "\011\223\001\002\000\004\015\224\001\002\000\004\112" +
    "\225\001\002\000\056\003\uffb6\005\uffb6\013\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\106\uffb6" +
    "\116\uffb6\117\uffb6\120\uffb6\123\uffb6\125\uffb6\001\002\000" +
    "\056\003\uffb5\005\uffb5\013\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\106\uffb5\116\uffb5\117\uffb5" +
    "\120\uffb5\123\uffb5\125\uffb5\001\002\000\032\005\230\016" +
    "\161\017\172\020\162\021\167\022\170\023\165\024\160" +
    "\025\166\030\156\031\174\032\171\001\002\000\034\005" +
    "\uffce\013\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\030\uffce\031\uffce\032\uffce\001" +
    "\002\000\006\013\233\025\232\001\002\000\056\003\024" +
    "\004\146\013\uffb9\016\uffb9\017\154\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\153" +
    "\033\016\034\025\106\147\116\020\117\023\120\017\123" +
    "\015\125\021\001\002\000\024\003\uffd3\027\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\107\uffd3\117\uffd3\001" +
    "\002\000\032\013\235\016\161\017\172\020\162\021\167" +
    "\022\170\023\165\024\160\025\166\030\156\031\174\032" +
    "\171\001\002\000\024\003\uffd2\027\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\107\uffd2\117\uffd2\001\002\000" +
    "\070\003\uffd7\023\uffd7\027\uffd7\033\uffd7\034\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\054\uffd7\056\uffd7\060\uffd7\062\uffd7\066" +
    "\uffd7\071\uffd7\073\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\104\uffd7\116\uffd7\117\uffd7\120\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\001\002\000\004\027\uffd6\001\002\000\056" +
    "\003\024\023\ufff2\027\064\033\016\034\025\050\070\052" +
    "\056\054\072\056\061\060\074\062\063\066\062\076\057" +
    "\100\054\102\100\104\075\116\020\117\023\120\017\123" +
    "\015\124\031\125\021\001\002\000\004\023\242\001\002" +
    "\000\004\063\243\001\002\000\070\003\uffec\023\uffec\027" +
    "\uffec\033\uffec\034\uffec\047\uffec\050\uffec\052\uffec\054\uffec" +
    "\056\uffec\060\uffec\062\uffec\066\uffec\071\uffec\073\uffec\076" +
    "\uffec\077\uffec\100\uffec\101\uffec\102\uffec\104\uffec\116\uffec" +
    "\117\uffec\120\uffec\123\uffec\124\uffec\125\uffec\001\002\000" +
    "\004\023\245\001\002\000\006\067\uffe9\074\247\001\002" +
    "\000\004\067\271\001\002\000\014\023\uffda\126\007\127" +
    "\011\130\013\131\010\001\002\000\004\023\251\001\002" +
    "\000\010\070\252\072\254\075\uffe6\001\002\000\014\023" +
    "\uffda\126\007\127\011\130\013\131\010\001\002\000\004" +
    "\075\262\001\002\000\014\023\uffda\126\007\127\011\130" +
    "\013\131\010\001\002\000\004\023\256\001\002\000\056" +
    "\003\024\027\064\033\016\034\025\050\070\052\056\054" +
    "\072\056\061\060\074\062\063\066\062\073\ufff2\076\057" +
    "\100\054\102\100\104\075\116\020\117\023\120\017\123" +
    "\015\124\031\125\021\001\002\000\004\073\260\001\002" +
    "\000\010\070\252\072\254\075\uffe6\001\002\000\004\075" +
    "\uffe8\001\002\000\006\067\uffe9\074\247\001\002\000\004" +
    "\067\uffea\001\002\000\004\023\265\001\002\000\056\003" +
    "\024\027\064\033\016\034\025\050\070\052\056\054\072" +
    "\056\061\060\074\062\063\066\062\071\ufff2\076\057\100" +
    "\054\102\100\104\075\116\020\117\023\120\017\123\015" +
    "\124\031\125\021\001\002\000\004\071\267\001\002\000" +
    "\010\070\252\072\254\075\uffe6\001\002\000\004\075\uffe7" +
    "\001\002\000\070\003\uffeb\023\uffeb\027\uffeb\033\uffeb\034" +
    "\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\056\uffeb\060\uffeb" +
    "\062\uffeb\066\uffeb\071\uffeb\073\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\104\uffeb\116\uffeb\117\uffeb\120\uffeb" +
    "\123\uffeb\124\uffeb\125\uffeb\001\002\000\056\003\024\023" +
    "\ufff2\027\064\033\016\034\025\050\070\052\056\054\072" +
    "\056\061\060\074\062\063\066\062\076\057\100\054\102" +
    "\100\104\075\116\020\117\023\120\017\123\015\124\031" +
    "\125\021\001\002\000\004\023\274\001\002\000\004\057" +
    "\275\001\002\000\070\003\uffee\023\uffee\027\uffee\033\uffee" +
    "\034\uffee\047\uffee\050\uffee\052\uffee\054\uffee\056\uffee\060" +
    "\uffee\062\uffee\066\uffee\071\uffee\073\uffee\076\uffee\077\uffee" +
    "\100\uffee\101\uffee\102\uffee\104\uffee\116\uffee\117\uffee\120" +
    "\uffee\123\uffee\124\uffee\125\uffee\001\002\000\004\043\ufffd" +
    "\001\002\000\004\023\300\001\002\000\056\003\024\027" +
    "\064\033\016\034\025\050\070\052\056\054\072\056\061" +
    "\060\074\062\063\066\062\076\057\077\ufff2\100\054\102" +
    "\100\104\075\116\020\117\023\120\017\123\015\124\031" +
    "\125\021\001\002\000\004\077\302\001\002\000\070\003" +
    "\uffe5\023\uffe5\027\uffe5\033\uffe5\034\uffe5\047\uffe5\050\uffe5" +
    "\052\uffe5\054\uffe5\056\uffe5\060\uffe5\062\uffe5\066\uffe5\071" +
    "\uffe5\073\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5" +
    "\104\uffe5\116\uffe5\117\uffe5\120\uffe5\123\uffe5\124\uffe5\125" +
    "\uffe5\001\002\000\056\003\024\023\ufff2\027\064\033\016" +
    "\034\025\050\070\052\056\054\072\056\061\060\074\062" +
    "\063\066\062\076\057\100\054\102\100\104\075\116\020" +
    "\117\023\120\017\123\015\124\031\125\021\001\002\000" +
    "\004\023\305\001\002\000\004\053\306\001\002\000\070" +
    "\003\ufff0\023\ufff0\027\ufff0\033\ufff0\034\ufff0\047\ufff0\050" +
    "\ufff0\052\ufff0\054\ufff0\056\ufff0\060\ufff0\062\ufff0\066\ufff0" +
    "\071\ufff0\073\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102" +
    "\ufff0\104\ufff0\116\ufff0\117\ufff0\120\ufff0\123\ufff0\124\ufff0" +
    "\125\ufff0\001\002\000\004\023\310\001\002\000\056\003" +
    "\024\027\064\033\016\034\025\050\070\052\056\054\072" +
    "\056\061\060\074\062\063\066\062\076\057\100\054\101" +
    "\ufff2\102\100\104\075\116\020\117\023\120\017\123\015" +
    "\124\031\125\021\001\002\000\004\101\312\001\002\000" +
    "\070\003\uffdf\023\uffdf\027\uffdf\033\uffdf\034\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf\066" +
    "\uffdf\071\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\104\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\001\002\000\016\023\ufff8\047\ufff8\071\ufff8" +
    "\073\ufff8\077\ufff8\101\ufff8\001\002\000\022\003\024\033" +
    "\016\034\025\116\020\117\023\120\017\123\015\125\021" +
    "\001\002\000\066\003\uffda\023\uffda\027\uffda\033\uffda\034" +
    "\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda" +
    "\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117" +
    "\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011" +
    "\130\013\131\010\001\002\000\056\003\uffdd\023\uffdd\027" +
    "\uffdd\033\uffdd\034\uffdd\050\uffdd\052\uffdd\054\uffdd\056\uffdd" +
    "\060\uffdd\062\uffdd\066\uffdd\076\uffdd\100\uffdd\102\uffdd\104" +
    "\uffdd\116\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125\uffdd" +
    "\001\002\000\022\003\024\033\016\034\025\116\020\117" +
    "\023\120\017\123\015\125\021\001\002\000\066\003\uffda" +
    "\023\uffda\027\uffda\033\uffda\034\uffda\050\uffda\052\uffda\054" +
    "\uffda\056\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda" +
    "\102\uffda\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124" +
    "\uffda\125\uffda\126\007\127\011\130\013\131\010\001\002" +
    "\000\056\003\uffdb\023\uffdb\027\uffdb\033\uffdb\034\uffdb\050" +
    "\uffdb\052\uffdb\054\uffdb\056\uffdb\060\uffdb\062\uffdb\066\uffdb" +
    "\076\uffdb\100\uffdb\102\uffdb\104\uffdb\116\uffdb\117\uffdb\120" +
    "\uffdb\123\uffdb\124\uffdb\125\uffdb\001\002\000\022\003\024" +
    "\033\016\034\025\116\020\117\023\120\017\123\015\125" +
    "\021\001\002\000\066\003\uffda\023\uffda\027\uffda\033\uffda" +
    "\034\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062" +
    "\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda" +
    "\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007\127" +
    "\011\130\013\131\010\001\002\000\056\003\uffde\023\uffde" +
    "\027\uffde\033\uffde\034\uffde\050\uffde\052\uffde\054\uffde\056" +
    "\uffde\060\uffde\062\uffde\066\uffde\076\uffde\100\uffde\102\uffde" +
    "\104\uffde\116\uffde\117\uffde\120\uffde\123\uffde\124\uffde\125" +
    "\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\002\004\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\027\001\001\000\004\006\031\001\001\000\002" +
    "\001\001\000\004\015\044\001\001\000\004\005\033\001" +
    "\001\000\002\001\001\000\004\010\035\001\001\000\002" +
    "\001\001\000\004\005\037\001\001\000\002\001\001\000" +
    "\004\004\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\046\001\001\000\004\005" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\064\011\065\014\072\015\066\016" +
    "\052\017\076\020\075\021\100\022\070\023\054\031\057" +
    "\001\001\000\030\004\064\011\065\014\072\015\066\016" +
    "\052\017\076\020\075\021\100\022\070\023\054\031\312" +
    "\001\001\000\004\005\306\001\001\000\002\001\001\000" +
    "\004\005\302\001\001\000\004\005\276\001\001\000\002" +
    "\001\001\000\004\005\271\001\001\000\004\005\243\001" +
    "\001\000\004\005\237\001\001\000\012\003\137\024\135" +
    "\025\133\026\136\001\001\000\002\001\001\000\030\004" +
    "\064\011\065\014\072\015\066\016\052\017\076\020\075" +
    "\021\100\022\070\023\054\031\130\001\001\000\030\004" +
    "\064\011\065\014\072\015\066\016\052\017\076\020\075" +
    "\021\100\022\070\023\054\031\127\001\001\000\004\005" +
    "\123\001\001\000\030\004\064\011\065\014\072\015\066" +
    "\016\052\017\076\020\075\021\100\022\070\023\054\031" +
    "\122\001\001\000\004\005\116\001\001\000\030\004\064" +
    "\011\065\014\072\015\066\016\052\017\076\020\075\021" +
    "\100\022\070\023\054\031\115\001\001\000\004\005\111" +
    "\001\001\000\002\001\001\000\030\004\064\011\065\014" +
    "\072\015\066\016\052\017\076\020\075\021\100\022\070" +
    "\023\054\031\105\001\001\000\030\004\064\011\065\014" +
    "\072\015\066\016\052\017\076\020\075\021\100\022\070" +
    "\023\054\031\104\001\001\000\002\001\001\000\030\004" +
    "\064\011\065\014\072\015\066\016\052\017\076\020\075" +
    "\021\100\022\070\023\054\031\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\064\011\065\014\072\015\066" +
    "\016\052\017\076\020\075\021\100\022\070\023\054\031" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\064\011\065\014" +
    "\072\015\066\016\052\017\076\020\075\021\100\022\070" +
    "\023\054\031\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\064" +
    "\011\065\014\072\015\066\016\052\017\076\020\075\021" +
    "\100\022\070\023\054\031\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\137\024\236\025\133\026\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\150\027\154\030\147\032\151" +
    "\001\001\000\012\004\150\027\226\030\147\032\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\150" +
    "\030\207\032\151\001\001\000\010\004\150\030\206\032" +
    "\151\001\001\000\012\004\150\027\205\030\147\032\151" +
    "\001\001\000\012\004\150\027\204\030\147\032\151\001" +
    "\001\000\010\033\162\035\156\036\163\001\001\000\002" +
    "\001\001\000\012\004\150\027\203\030\147\032\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\150\027\201\030\147\032\151\001\001\000" +
    "\012\004\150\027\200\030\147\032\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\137" +
    "\024\174\025\133\026\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\162\035\156\036\163\001\001\000" +
    "\010\033\162\035\156\036\163\001\001\000\002\001\001" +
    "\000\010\033\162\035\156\036\163\001\001\000\010\033" +
    "\162\035\156\036\163\001\001\000\010\033\162\035\156" +
    "\036\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\162\035\156\036\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\150\027\233\030\147\032\151\001\001\000\002\001\001" +
    "\000\010\033\162\035\156\036\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\064" +
    "\011\065\014\072\015\066\016\052\017\076\020\075\021" +
    "\100\022\070\023\054\031\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\245\001\001\000\002\001\001\000\004\005\247" +
    "\001\001\000\002\001\001\000\004\013\252\001\001\000" +
    "\004\005\263\001\001\000\002\001\001\000\004\005\254" +
    "\001\001\000\002\001\001\000\030\004\064\011\065\014" +
    "\072\015\066\016\052\017\076\020\075\021\100\022\070" +
    "\023\054\031\256\001\001\000\002\001\001\000\004\013" +
    "\260\001\001\000\002\001\001\000\004\012\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\064\011" +
    "\065\014\072\015\066\016\052\017\076\020\075\021\100" +
    "\022\070\023\054\031\265\001\001\000\002\001\001\000" +
    "\004\013\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\064\011\065\014\072\015\066\016\052\017" +
    "\076\020\075\021\100\022\070\023\054\031\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\064\011\065" +
    "\014\072\015\066\016\052\017\076\020\075\021\100\022" +
    "\070\023\054\031\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\064\011\065\014\072\015\066\016" +
    "\052\017\076\020\075\021\100\022\070\023\054\031\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\064\011\065\014\072" +
    "\015\066\016\052\017\076\020\075\021\100\022\070\023" +
    "\054\031\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\314\001\001\000\004\005" +
    "\315\001\001\000\002\001\001\000\004\004\317\001\001" +
    "\000\004\005\320\001\001\000\002\001\001\000\004\004" +
    "\322\001\001\000\004\005\323\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserh$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserh$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserh$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserh$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parserh parser;

  /** Constructor */
  CUP$parserh$actions(parserh parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action_part00000000(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserh$result;

      /* select the action based on the action number */
      switch (CUP$parserh$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserh$stack.elementAt(CUP$parserh$top-1)).value;
		RESULT = start_val;
              CUP$parserh$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserh$parser.done_parsing();
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HTML_I ATRIB MAYOR COMEN ENCABE COMEN CUERPO HTML_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-7)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABE ::= HEAD_I ATRIB MAYOR TITULO HEAD_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABE ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= BODY_I ATRIB MAYOR VARIOS BODY_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TITULO ::= TITLE_I ATRIB MAYOR VALORES TITLE_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TITULO ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIOS ::= TABLA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIOS ::= DIVID VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIOS ::= PHR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIOS ::= COMEN VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIOS ::= PBR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIOS ::= PARRA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIOS ::= LASH VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIOS ::= TEXTO VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIOS ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LASH ::= H1_I ATRIB VARIOS MAYOR H1_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LASH ::= H2_I ATRIB VARIOS MAYOR H2_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LASH ::= H3_I ATRIB VARIOS MAYOR H3_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LASH ::= H4_I ATRIB VARIOS MAYOR H4_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LASH ::= H5_I ATRIB VARIOS MAYOR H5_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LASH ::= H6_I ATRIB VARIOS MAYOR H6_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TABLA ::= TABLE_I ATRIB MAYOR PROPTA TABLE_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TABLA",7, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROPTA ::= TR_I ATRIB MAYOR PROPT2 TR_F PROPTA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROPTA ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROPT2 ::= TD_I ATRIB MAYOR VARIOS TD_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROPT2 ::= TH_I ATRIB MAYOR VARIOS TH_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROPT2 ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIVID ::= DIV_I ATRIB MAYOR VARIOS DIV_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DIVID",10, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PHR ::= HR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PHR ::= HR_I MAYOR HR_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMEN ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("COMEN",11, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PBR ::= BR_I MAYOR 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PBR ::= BR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARRA ::= P_I ATRIB MAYOR VARIOS P_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PARRA",14, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIB ::= COLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIB ::= TCOLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIB ::= ALIGN IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIB ::= FONT IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIB ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= VALORES 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= LENGUAJE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LENGUAJE ::= CPREP CAN CPREP 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LENGUAJE",17, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAN ::= DECLA CAN 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAN ::= PRINT PAR_A EXPRE PAR_C CAN 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAN ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLA ::= VALT ID PYCOMA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLA ::= VALT ID IGUAL EXPRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALT ::= TIPO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALT ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRE ::= RESTA EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRE ::= PAR_A EXPRE PAR_C 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRE ::= EXPRE OPERACION EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRE ::= NOT EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRE ::= EXPRE LOGICO EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRE ::= EXPRE LOGIC2 EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRE ::= VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= SUMA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= RESTA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION ::= MULTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= DIVIS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= MODS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOGICO ::= AND 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGICO",27, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOGICO ::= OR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGICO",27, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOGIC2 ::= MAYOR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOGIC2 ::= MENOR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOGIC2 ::= IGUAL IGUAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOGIC2 ::= NOT IGUAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOGIC2 ::= MAYOR IGUAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOGIC2 ::= MENOR IGUAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGIC2",28, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VAL2 ::= VALORES VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAL2 ::= RESULTADO VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAL2 ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RESULTADO ::= RESUL PUNTO SCORE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RESULTADO ::= RESUL PUNTO OTRO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RESULTADO ::= RESUL PUNTO OTRO COR_A ENTERO COR_C PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-7)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RESULTADO ::= RESUL PUNTO OTRO PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RESULTADO ::= RESUL PUNTO OTRO CANTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OTRO ::= VARIA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OTRO ::= METOD 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OTRO ::= CLASE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALORES ::= CADENA2 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALORES ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserh$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
              return CUP$parserh$do_action_part00000000(
                               CUP$parserh$act_num,
                               CUP$parserh$parser,
                               CUP$parserh$stack,
                               CUP$parserh$top);
    }
}

}
