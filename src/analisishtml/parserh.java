
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisishtml;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserh extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserh() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserh(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserh(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\012\000\002\006" +
    "\007\000\002\006\002\000\002\007\007\000\002\010\007" +
    "\000\002\010\002\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\002\000\002\021\007\000\002\021\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\011\007\000\002\012\010\000\002\012\002\000\002" +
    "\013\010\000\002\013\010\000\002\013\002\000\002\014" +
    "\007\000\002\016\004\000\002\016\005\000\002\015\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\007\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\002\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\024\004\000\002\024\002" +
    "\000\002\025\004\000\002\025\006\000\002\026\003\000" +
    "\002\026\002\000\002\027\004\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\030\003\000\002\030\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\012\000\002" +
    "\032\007\000\002\032\006\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\042\004\001\002\000\014\023\uffda\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\025\271\001" +
    "\002\000\004\025\266\001\002\000\004\025\263\001\002" +
    "\000\004\023\025\001\002\000\004\025\014\001\002\000" +
    "\016\003\017\116\022\117\015\120\021\123\023\125\020" +
    "\001\002\000\124\003\uffba\005\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\027\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\047\uffba\050\uffba\052\uffba\054" +
    "\uffba\056\uffba\060\uffba\062\uffba\065\uffba\066\uffba\071\uffba" +
    "\073\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\104" +
    "\uffba\116\uffba\117\uffba\120\uffba\123\uffba\124\uffba\125\uffba" +
    "\126\uffba\127\uffba\130\uffba\131\uffba\001\002\000\062\003" +
    "\uffda\023\uffda\027\uffda\050\uffda\052\uffda\054\uffda\056\uffda" +
    "\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104" +
    "\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda" +
    "\126\007\127\011\130\013\131\010\001\002\000\124\003" +
    "\uffb7\005\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\027\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\047\uffb7\050\uffb7\052\uffb7\054\uffb7\056\uffb7\060\uffb7" +
    "\062\uffb7\065\uffb7\066\uffb7\071\uffb7\073\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\104\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130" +
    "\uffb7\131\uffb7\001\002\000\124\003\uffb8\005\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\027\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\047\uffb8\050\uffb8" +
    "\052\uffb8\054\uffb8\056\uffb8\060\uffb8\062\uffb8\065\uffb8\066" +
    "\uffb8\071\uffb8\073\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\104\uffb8\116\uffb8\117\uffb8\120\uffb8\123\uffb8\124" +
    "\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\001\002" +
    "\000\124\003\uffbb\005\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\027\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\047\uffbb\050\uffbb\052\uffbb\054\uffbb\056" +
    "\uffbb\060\uffbb\062\uffbb\065\uffbb\066\uffbb\071\uffbb\073\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\104\uffbb\116" +
    "\uffbb\117\uffbb\120\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb" +
    "\127\uffbb\130\uffbb\131\uffbb\001\002\000\124\003\uffbc\005" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\027\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\047" +
    "\uffbc\050\uffbc\052\uffbc\054\uffbc\056\uffbc\060\uffbc\062\uffbc" +
    "\065\uffbc\066\uffbc\071\uffbc\073\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\104\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\123\uffbc\124\uffbc\125\uffbc\126\uffbc\127\uffbc\130\uffbc\131" +
    "\uffbc\001\002\000\124\003\uffb9\005\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\027\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\047\uffb9\050\uffb9\052\uffb9" +
    "\054\uffb9\056\uffb9\060\uffb9\062\uffb9\065\uffb9\066\uffb9\071" +
    "\uffb9\073\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\104\uffb9\116\uffb9\117\uffb9\120\uffb9\123\uffb9\124\uffb9\125" +
    "\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\001\002\000\052" +
    "\003\uffdc\023\uffdc\027\uffdc\050\uffdc\052\uffdc\054\uffdc\056" +
    "\uffdc\060\uffdc\062\uffdc\066\uffdc\076\uffdc\100\uffdc\102\uffdc" +
    "\104\uffdc\116\uffdc\117\uffdc\120\uffdc\123\uffdc\124\uffdc\125" +
    "\uffdc\001\002\000\004\124\027\001\002\000\006\044\031" +
    "\124\ufffe\001\002\000\070\003\uffe2\023\uffe2\027\uffe2\044" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2\056\uffe2" +
    "\060\uffe2\062\uffe2\066\uffe2\071\uffe2\073\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\104\uffe2\116\uffe2\117\uffe2" +
    "\120\uffe2\123\uffe2\124\uffe2\125\uffe2\001\002\000\004\124" +
    "\027\001\002\000\014\023\uffda\126\007\127\011\130\013" +
    "\131\010\001\002\000\004\023\033\001\002\000\006\045" +
    "\ufffb\064\035\001\002\000\004\045\042\001\002\000\014" +
    "\023\uffda\126\007\127\011\130\013\131\010\001\002\000" +
    "\004\023\037\001\002\000\016\003\017\116\022\117\015" +
    "\120\021\123\023\125\020\001\002\000\004\065\041\001" +
    "\002\000\004\045\ufffc\001\002\000\004\124\uffff\001\002" +
    "\000\004\046\044\001\002\000\014\023\uffda\126\007\127" +
    "\011\130\013\131\010\001\002\000\004\043\046\001\002" +
    "\000\004\002\000\001\002\000\004\023\050\001\002\000" +
    "\052\003\017\027\062\047\ufff2\050\066\052\054\054\070" +
    "\056\057\060\072\062\061\066\060\076\055\100\052\102" +
    "\076\104\073\116\022\117\015\120\021\123\023\124\027" +
    "\125\020\001\002\000\064\003\017\023\ufff2\027\062\047" +
    "\ufff2\050\066\052\054\054\070\056\057\060\072\062\061" +
    "\066\060\071\ufff2\073\ufff2\076\055\077\ufff2\100\052\101" +
    "\ufff2\102\076\104\073\116\022\117\015\120\021\123\023" +
    "\124\027\125\020\001\002\000\014\023\uffda\126\007\127" +
    "\011\130\013\131\010\001\002\000\064\003\uffd8\023\uffd8" +
    "\027\uffd8\047\uffd8\050\uffd8\052\uffd8\054\uffd8\056\uffd8\060" +
    "\uffd8\062\uffd8\066\uffd8\071\uffd8\073\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\104\uffd8\116\uffd8\117\uffd8\120" +
    "\uffd8\123\uffd8\124\uffd8\125\uffd8\001\002\000\062\003\uffda" +
    "\023\uffda\027\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060" +
    "\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda" +
    "\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126" +
    "\007\127\011\130\013\131\010\001\002\000\014\023\uffda" +
    "\126\007\127\011\130\013\131\010\001\002\000\004\047" +
    "\245\001\002\000\062\003\uffda\023\uffda\027\uffda\050\uffda" +
    "\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda\066\uffda\076" +
    "\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117\uffda\120\uffda" +
    "\123\uffda\124\uffda\125\uffda\126\007\127\011\130\013\131" +
    "\010\001\002\000\014\023\uffda\126\007\127\011\130\013" +
    "\131\010\001\002\000\062\003\uffda\023\uffda\027\uffda\050" +
    "\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda\066\uffda" +
    "\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117\uffda\120" +
    "\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011\130\013" +
    "\131\010\001\002\000\022\003\140\027\uffd5\035\130\036" +
    "\131\037\141\040\133\041\137\117\uffd1\001\002\000\064" +
    "\003\uffd9\023\uffd9\027\uffd9\047\uffd9\050\uffd9\052\uffd9\054" +
    "\uffd9\056\uffd9\060\uffd9\062\uffd9\066\uffd9\071\uffd9\073\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\104\uffd9\116" +
    "\uffd9\117\uffd9\120\uffd9\123\uffd9\124\uffd9\125\uffd9\001\002" +
    "\000\064\003\017\023\ufff2\027\062\047\ufff2\050\066\052" +
    "\054\054\070\056\057\060\072\062\061\066\060\071\ufff2" +
    "\073\ufff2\076\055\077\ufff2\100\052\101\ufff2\102\076\104" +
    "\073\116\022\117\015\120\021\123\023\124\027\125\020" +
    "\001\002\000\064\003\017\023\ufff2\027\062\047\ufff2\050" +
    "\066\052\054\054\070\056\057\060\072\062\061\066\060" +
    "\071\ufff2\073\ufff2\076\055\077\ufff2\100\052\101\ufff2\102" +
    "\076\104\073\116\022\117\015\120\021\123\023\124\027" +
    "\125\020\001\002\000\062\003\uffda\023\uffda\027\uffda\050" +
    "\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda\066\uffda" +
    "\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117\uffda\120" +
    "\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011\130\013" +
    "\131\010\001\002\000\064\003\017\023\ufff2\027\062\047" +
    "\ufff2\050\066\052\054\054\070\056\057\060\072\062\061" +
    "\066\060\071\ufff2\073\ufff2\076\055\077\ufff2\100\052\101" +
    "\ufff2\102\076\104\073\116\022\117\015\120\021\123\023" +
    "\124\027\125\020\001\002\000\062\003\uffda\023\uffda\027" +
    "\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda" +
    "\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117" +
    "\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011" +
    "\130\013\131\010\001\002\000\064\003\017\023\ufff2\027" +
    "\062\047\ufff2\050\066\052\054\054\070\056\057\060\072" +
    "\062\061\066\060\071\ufff2\073\ufff2\076\055\077\ufff2\100" +
    "\052\101\ufff2\102\076\104\073\116\022\117\015\120\021" +
    "\123\023\124\027\125\020\001\002\000\062\003\uffda\023" +
    "\uffda\027\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda" +
    "\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116" +
    "\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007" +
    "\127\011\130\013\131\010\001\002\000\006\023\105\026" +
    "\106\001\002\000\064\003\017\023\ufff2\027\062\047\ufff2" +
    "\050\066\052\054\054\070\056\057\060\072\062\061\066" +
    "\060\071\ufff2\073\ufff2\076\055\077\ufff2\100\052\101\ufff2" +
    "\102\076\104\073\116\022\117\015\120\021\123\023\124" +
    "\027\125\020\001\002\000\064\003\017\023\ufff2\027\062" +
    "\047\ufff2\050\066\052\054\054\070\056\057\060\072\062" +
    "\061\066\060\071\ufff2\073\ufff2\076\055\077\ufff2\100\052" +
    "\101\ufff2\102\076\104\073\116\022\117\015\120\021\123" +
    "\023\124\027\125\020\001\002\000\006\023\101\026\102" +
    "\001\002\000\064\003\017\023\ufff2\027\062\047\ufff2\050" +
    "\066\052\054\054\070\056\057\060\072\062\061\066\060" +
    "\071\ufff2\073\ufff2\076\055\077\ufff2\100\052\101\ufff2\102" +
    "\076\104\073\116\022\117\015\120\021\123\023\124\027" +
    "\125\020\001\002\000\016\023\ufff4\047\ufff4\071\ufff4\073" +
    "\ufff4\077\ufff4\101\ufff4\001\002\000\064\003\uffe1\023\uffe1" +
    "\027\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\056\uffe1\060" +
    "\uffe1\062\uffe1\066\uffe1\071\uffe1\073\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\104\uffe1\116\uffe1\117\uffe1\120" +
    "\uffe1\123\uffe1\124\uffe1\125\uffe1\001\002\000\064\003\uffe0" +
    "\023\uffe0\027\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\062\uffe0\066\uffe0\071\uffe0\073\uffe0\076\uffe0" +
    "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\104\uffe0\116\uffe0\117" +
    "\uffe0\120\uffe0\123\uffe0\124\uffe0\125\uffe0\001\002\000\016" +
    "\023\ufff6\047\ufff6\071\ufff6\073\ufff6\077\ufff6\101\ufff6\001" +
    "\002\000\016\023\ufff5\047\ufff5\071\ufff5\073\ufff5\077\ufff5" +
    "\101\ufff5\001\002\000\004\105\107\001\002\000\064\003" +
    "\uffe4\023\uffe4\027\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4" +
    "\056\uffe4\060\uffe4\062\uffe4\066\uffe4\071\uffe4\073\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\104\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\123\uffe4\124\uffe4\125\uffe4\001\002\000" +
    "\064\003\uffe3\023\uffe3\027\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\054\uffe3\056\uffe3\060\uffe3\062\uffe3\066\uffe3\071\uffe3\073" +
    "\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\104\uffe3" +
    "\116\uffe3\117\uffe3\120\uffe3\123\uffe3\124\uffe3\125\uffe3\001" +
    "\002\000\052\003\017\023\ufff2\027\062\050\066\052\054" +
    "\054\070\056\057\060\072\062\061\066\060\076\055\100" +
    "\052\102\076\104\073\116\022\117\015\120\021\123\023" +
    "\124\027\125\020\001\002\000\004\023\112\001\002\000" +
    "\004\061\113\001\002\000\064\003\uffed\023\uffed\027\uffed" +
    "\047\uffed\050\uffed\052\uffed\054\uffed\056\uffed\060\uffed\062" +
    "\uffed\066\uffed\071\uffed\073\uffed\076\uffed\077\uffed\100\uffed" +
    "\101\uffed\102\uffed\104\uffed\116\uffed\117\uffed\120\uffed\123" +
    "\uffed\124\uffed\125\uffed\001\002\000\016\023\ufff9\047\ufff9" +
    "\071\ufff9\073\ufff9\077\ufff9\101\ufff9\001\002\000\052\003" +
    "\017\023\ufff2\027\062\050\066\052\054\054\070\056\057" +
    "\060\072\062\061\066\060\076\055\100\052\102\076\104" +
    "\073\116\022\117\015\120\021\123\023\124\027\125\020" +
    "\001\002\000\004\023\117\001\002\000\004\055\120\001" +
    "\002\000\064\003\uffef\023\uffef\027\uffef\047\uffef\050\uffef" +
    "\052\uffef\054\uffef\056\uffef\060\uffef\062\uffef\066\uffef\071" +
    "\uffef\073\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef" +
    "\104\uffef\116\uffef\117\uffef\120\uffef\123\uffef\124\uffef\125" +
    "\uffef\001\002\000\016\023\ufff3\047\ufff3\071\ufff3\073\ufff3" +
    "\077\ufff3\101\ufff3\001\002\000\052\003\017\023\ufff2\027" +
    "\062\050\066\052\054\054\070\056\057\060\072\062\061" +
    "\066\060\076\055\100\052\102\076\104\073\116\022\117" +
    "\015\120\021\123\023\124\027\125\020\001\002\000\004" +
    "\023\124\001\002\000\004\051\125\001\002\000\064\003" +
    "\ufff1\023\ufff1\027\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1" +
    "\056\ufff1\060\ufff1\062\ufff1\066\ufff1\071\ufff1\073\ufff1\076" +
    "\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\104\ufff1\116\ufff1" +
    "\117\ufff1\120\ufff1\123\ufff1\124\ufff1\125\ufff1\001\002\000" +
    "\016\023\ufff7\047\ufff7\071\ufff7\073\ufff7\077\ufff7\101\ufff7" +
    "\001\002\000\016\023\ufffa\047\ufffa\071\ufffa\073\ufffa\077" +
    "\ufffa\101\ufffa\001\002\000\004\117\uffb6\001\002\000\004" +
    "\117\uffb5\001\002\000\022\003\140\027\uffd5\035\130\036" +
    "\131\037\141\040\133\041\137\117\uffd1\001\002\000\004" +
    "\117\uffb3\001\002\000\004\027\205\001\002\000\004\117" +
    "\142\001\002\000\004\117\uffd2\001\002\000\004\117\uffb2" +
    "\001\002\000\004\117\uffb1\001\002\000\004\117\uffb4\001" +
    "\002\000\024\003\uffd4\025\143\027\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\117\uffd4\001\002\000\026\003" +
    "\017\004\144\017\152\032\151\106\145\116\022\117\015" +
    "\120\021\123\023\125\020\001\002\000\026\003\017\004" +
    "\144\017\152\032\151\106\145\116\022\117\015\120\021" +
    "\123\023\125\020\001\002\000\004\015\165\001\002\000" +
    "\036\003\uffcc\005\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\027\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\117\uffcc\001\002\000\036\003\uffc6\005\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\027\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\117\uffc6\001\002\000\036" +
    "\003\uffc5\005\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\027\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\117\uffc5\001\002\000\026\003\017\004\144\017\152\032" +
    "\151\106\145\116\022\117\015\120\021\123\023\125\020" +
    "\001\002\000\026\003\017\004\144\017\152\032\151\106" +
    "\145\116\022\117\015\120\021\123\023\125\020\001\002" +
    "\000\034\003\uffd3\016\156\017\154\020\161\021\157\022" +
    "\155\027\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\117\uffd3\001\002\000\026\003\uffca\004\uffca\017\uffca\032" +
    "\uffca\106\uffca\116\uffca\117\uffca\120\uffca\123\uffca\125\uffca" +
    "\001\002\000\026\003\uffc7\004\uffc7\017\uffc7\032\uffc7\106" +
    "\uffc7\116\uffc7\117\uffc7\120\uffc7\123\uffc7\125\uffc7\001\002" +
    "\000\026\003\uffcb\004\uffcb\017\uffcb\032\uffcb\106\uffcb\116" +
    "\uffcb\117\uffcb\120\uffcb\123\uffcb\125\uffcb\001\002\000\026" +
    "\003\uffc8\004\uffc8\017\uffc8\032\uffc8\106\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\123\uffc8\125\uffc8\001\002\000\026\003\017" +
    "\004\144\017\152\032\151\106\145\116\022\117\015\120" +
    "\021\123\023\125\020\001\002\000\026\003\uffc9\004\uffc9" +
    "\017\uffc9\032\uffc9\106\uffc9\116\uffc9\117\uffc9\120\uffc9\123" +
    "\uffc9\125\uffc9\001\002\000\036\003\uffce\005\uffce\016\156" +
    "\017\154\020\161\021\157\022\155\027\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\117\uffce\001\002\000\036" +
    "\003\uffd0\005\uffd0\016\uffd0\017\uffd0\020\161\021\157\022" +
    "\155\027\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\117\uffd0\001\002\000\036\003\uffcd\005\uffcd\016\156\017" +
    "\154\020\161\021\157\022\155\027\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\117\uffcd\001\002\000\012\110" +
    "\171\111\167\114\170\115\172\001\002\000\044\003\uffc3" +
    "\005\uffc3\010\175\015\174\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\027\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\113\173\117\uffc3\001\002\000\044\003\uffbf\005" +
    "\uffbf\010\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\027\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\113\uffbf\117\uffbf\001\002\000\044\003\uffbe\005\uffbe" +
    "\010\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\027\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\113\uffbe\117\uffbe\001\002\000\036\003\uffc4\005\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\027\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\117\uffc4\001\002\000" +
    "\044\003\uffbd\005\uffbd\010\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\027\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\113\uffbd\117\uffbd\001\002\000\036" +
    "\003\uffc0\005\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\027\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\117\uffc0\001\002\000\004\112\202\001\002\000\004\116" +
    "\176\001\002\000\004\011\177\001\002\000\004\015\200" +
    "\001\002\000\004\112\201\001\002\000\036\003\uffc2\005" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\027\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\117\uffc2\001" +
    "\002\000\036\003\uffc1\005\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\027\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\117\uffc1\001\002\000\016\005\204\016\156" +
    "\017\154\020\161\021\157\022\155\001\002\000\036\003" +
    "\uffcf\005\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\027\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\117" +
    "\uffcf\001\002\000\064\003\uffd7\023\uffd7\027\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\054\uffd7\056\uffd7\060\uffd7\062\uffd7\066" +
    "\uffd7\071\uffd7\073\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\104\uffd7\116\uffd7\117\uffd7\120\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\001\002\000\004\027\uffd6\001\002\000\052" +
    "\003\017\023\ufff2\027\062\050\066\052\054\054\070\056" +
    "\057\060\072\062\061\066\060\076\055\100\052\102\076" +
    "\104\073\116\022\117\015\120\021\123\023\124\027\125" +
    "\020\001\002\000\004\023\211\001\002\000\004\063\212" +
    "\001\002\000\064\003\uffec\023\uffec\027\uffec\047\uffec\050" +
    "\uffec\052\uffec\054\uffec\056\uffec\060\uffec\062\uffec\066\uffec" +
    "\071\uffec\073\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102" +
    "\uffec\104\uffec\116\uffec\117\uffec\120\uffec\123\uffec\124\uffec" +
    "\125\uffec\001\002\000\004\023\214\001\002\000\006\067" +
    "\uffe9\074\216\001\002\000\004\067\240\001\002\000\014" +
    "\023\uffda\126\007\127\011\130\013\131\010\001\002\000" +
    "\004\023\220\001\002\000\010\070\221\072\223\075\uffe6" +
    "\001\002\000\014\023\uffda\126\007\127\011\130\013\131" +
    "\010\001\002\000\004\075\231\001\002\000\014\023\uffda" +
    "\126\007\127\011\130\013\131\010\001\002\000\004\023" +
    "\225\001\002\000\052\003\017\027\062\050\066\052\054" +
    "\054\070\056\057\060\072\062\061\066\060\073\ufff2\076" +
    "\055\100\052\102\076\104\073\116\022\117\015\120\021" +
    "\123\023\124\027\125\020\001\002\000\004\073\227\001" +
    "\002\000\010\070\221\072\223\075\uffe6\001\002\000\004" +
    "\075\uffe8\001\002\000\006\067\uffe9\074\216\001\002\000" +
    "\004\067\uffea\001\002\000\004\023\234\001\002\000\052" +
    "\003\017\027\062\050\066\052\054\054\070\056\057\060" +
    "\072\062\061\066\060\071\ufff2\076\055\100\052\102\076" +
    "\104\073\116\022\117\015\120\021\123\023\124\027\125" +
    "\020\001\002\000\004\071\236\001\002\000\010\070\221" +
    "\072\223\075\uffe6\001\002\000\004\075\uffe7\001\002\000" +
    "\064\003\uffeb\023\uffeb\027\uffeb\047\uffeb\050\uffeb\052\uffeb" +
    "\054\uffeb\056\uffeb\060\uffeb\062\uffeb\066\uffeb\071\uffeb\073" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\104\uffeb" +
    "\116\uffeb\117\uffeb\120\uffeb\123\uffeb\124\uffeb\125\uffeb\001" +
    "\002\000\052\003\017\023\ufff2\027\062\050\066\052\054" +
    "\054\070\056\057\060\072\062\061\066\060\076\055\100" +
    "\052\102\076\104\073\116\022\117\015\120\021\123\023" +
    "\124\027\125\020\001\002\000\004\023\243\001\002\000" +
    "\004\057\244\001\002\000\064\003\uffee\023\uffee\027\uffee" +
    "\047\uffee\050\uffee\052\uffee\054\uffee\056\uffee\060\uffee\062" +
    "\uffee\066\uffee\071\uffee\073\uffee\076\uffee\077\uffee\100\uffee" +
    "\101\uffee\102\uffee\104\uffee\116\uffee\117\uffee\120\uffee\123" +
    "\uffee\124\uffee\125\uffee\001\002\000\004\043\ufffd\001\002" +
    "\000\004\023\247\001\002\000\052\003\017\027\062\050" +
    "\066\052\054\054\070\056\057\060\072\062\061\066\060" +
    "\076\055\077\ufff2\100\052\102\076\104\073\116\022\117" +
    "\015\120\021\123\023\124\027\125\020\001\002\000\004" +
    "\077\251\001\002\000\064\003\uffe5\023\uffe5\027\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\054\uffe5\056\uffe5\060\uffe5\062\uffe5" +
    "\066\uffe5\071\uffe5\073\uffe5\076\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\102\uffe5\104\uffe5\116\uffe5\117\uffe5\120\uffe5\123\uffe5" +
    "\124\uffe5\125\uffe5\001\002\000\052\003\017\023\ufff2\027" +
    "\062\050\066\052\054\054\070\056\057\060\072\062\061" +
    "\066\060\076\055\100\052\102\076\104\073\116\022\117" +
    "\015\120\021\123\023\124\027\125\020\001\002\000\004" +
    "\023\254\001\002\000\004\053\255\001\002\000\064\003" +
    "\ufff0\023\ufff0\027\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\056\ufff0\060\ufff0\062\ufff0\066\ufff0\071\ufff0\073\ufff0\076" +
    "\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\104\ufff0\116\ufff0" +
    "\117\ufff0\120\ufff0\123\ufff0\124\ufff0\125\ufff0\001\002\000" +
    "\004\023\257\001\002\000\052\003\017\027\062\050\066" +
    "\052\054\054\070\056\057\060\072\062\061\066\060\076" +
    "\055\100\052\101\ufff2\102\076\104\073\116\022\117\015" +
    "\120\021\123\023\124\027\125\020\001\002\000\004\101" +
    "\261\001\002\000\064\003\uffdf\023\uffdf\027\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf\066" +
    "\uffdf\071\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\104\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\001\002\000\016\023\ufff8\047\ufff8\071\ufff8" +
    "\073\ufff8\077\ufff8\101\ufff8\001\002\000\016\003\017\116" +
    "\022\117\015\120\021\123\023\125\020\001\002\000\062" +
    "\003\uffda\023\uffda\027\uffda\050\uffda\052\uffda\054\uffda\056" +
    "\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100\uffda\102\uffda" +
    "\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125" +
    "\uffda\126\007\127\011\130\013\131\010\001\002\000\052" +
    "\003\uffdd\023\uffdd\027\uffdd\050\uffdd\052\uffdd\054\uffdd\056" +
    "\uffdd\060\uffdd\062\uffdd\066\uffdd\076\uffdd\100\uffdd\102\uffdd" +
    "\104\uffdd\116\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125" +
    "\uffdd\001\002\000\016\003\017\116\022\117\015\120\021" +
    "\123\023\125\020\001\002\000\062\003\uffda\023\uffda\027" +
    "\uffda\050\uffda\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda" +
    "\066\uffda\076\uffda\100\uffda\102\uffda\104\uffda\116\uffda\117" +
    "\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\007\127\011" +
    "\130\013\131\010\001\002\000\052\003\uffdb\023\uffdb\027" +
    "\uffdb\050\uffdb\052\uffdb\054\uffdb\056\uffdb\060\uffdb\062\uffdb" +
    "\066\uffdb\076\uffdb\100\uffdb\102\uffdb\104\uffdb\116\uffdb\117" +
    "\uffdb\120\uffdb\123\uffdb\124\uffdb\125\uffdb\001\002\000\016" +
    "\003\017\116\022\117\015\120\021\123\023\125\020\001" +
    "\002\000\062\003\uffda\023\uffda\027\uffda\050\uffda\052\uffda" +
    "\054\uffda\056\uffda\060\uffda\062\uffda\066\uffda\076\uffda\100" +
    "\uffda\102\uffda\104\uffda\116\uffda\117\uffda\120\uffda\123\uffda" +
    "\124\uffda\125\uffda\126\007\127\011\130\013\131\010\001" +
    "\002\000\052\003\uffde\023\uffde\027\uffde\050\uffde\052\uffde" +
    "\054\uffde\056\uffde\060\uffde\062\uffde\066\uffde\076\uffde\100" +
    "\uffde\102\uffde\104\uffde\116\uffde\117\uffde\120\uffde\123\uffde" +
    "\124\uffde\125\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\004\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\002\001\001" +
    "\000\004\005\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\025\001\001\000\004\006" +
    "\027\001\001\000\002\001\001\000\004\015\042\001\001" +
    "\000\004\005\031\001\001\000\002\001\001\000\004\010" +
    "\033\001\001\000\002\001\001\000\004\005\035\001\001" +
    "\000\002\001\001\000\004\004\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\044" +
    "\001\001\000\004\005\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\062\011\063" +
    "\014\070\015\064\016\050\017\074\020\073\021\076\022" +
    "\066\023\052\031\055\001\001\000\030\004\062\011\063" +
    "\014\070\015\064\016\050\017\074\020\073\021\076\022" +
    "\066\023\052\031\261\001\001\000\004\005\255\001\001" +
    "\000\002\001\001\000\004\005\251\001\001\000\004\005" +
    "\245\001\001\000\002\001\001\000\004\005\240\001\001" +
    "\000\004\005\212\001\001\000\004\005\206\001\001\000" +
    "\012\003\135\024\133\025\131\026\134\001\001\000\002" +
    "\001\001\000\030\004\062\011\063\014\070\015\064\016" +
    "\050\017\074\020\073\021\076\022\066\023\052\031\126" +
    "\001\001\000\030\004\062\011\063\014\070\015\064\016" +
    "\050\017\074\020\073\021\076\022\066\023\052\031\125" +
    "\001\001\000\004\005\121\001\001\000\030\004\062\011" +
    "\063\014\070\015\064\016\050\017\074\020\073\021\076" +
    "\022\066\023\052\031\120\001\001\000\004\005\114\001" +
    "\001\000\030\004\062\011\063\014\070\015\064\016\050" +
    "\017\074\020\073\021\076\022\066\023\052\031\113\001" +
    "\001\000\004\005\107\001\001\000\002\001\001\000\030" +
    "\004\062\011\063\014\070\015\064\016\050\017\074\020" +
    "\073\021\076\022\066\023\052\031\103\001\001\000\030" +
    "\004\062\011\063\014\070\015\064\016\050\017\074\020" +
    "\073\021\076\022\066\023\052\031\102\001\001\000\002" +
    "\001\001\000\030\004\062\011\063\014\070\015\064\016" +
    "\050\017\074\020\073\021\076\022\066\023\052\031\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\062\011" +
    "\063\014\070\015\064\016\050\017\074\020\073\021\076" +
    "\022\066\023\052\031\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\062\011\063\014\070\015\064\016\050\017\074\020" +
    "\073\021\076\022\066\023\052\031\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\062\011\063\014\070\015\064\016\050" +
    "\017\074\020\073\021\076\022\066\023\052\031\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\135\024\205\025\131\026\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\146\027" +
    "\152\030\145\032\147\001\001\000\012\004\146\027\202" +
    "\030\145\032\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\146" +
    "\027\163\030\145\032\147\001\001\000\012\004\146\027" +
    "\162\030\145\032\147\001\001\000\004\033\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\146\027\161\030\145\032\147" +
    "\001\001\000\002\001\001\000\004\033\157\001\001\000" +
    "\004\033\157\001\001\000\004\033\157\001\001\000\004" +
    "\034\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\062" +
    "\011\063\014\070\015\064\016\050\017\074\020\073\021" +
    "\076\022\066\023\052\031\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\214\001\001\000\002\001\001\000\004\005\216" +
    "\001\001\000\002\001\001\000\004\013\221\001\001\000" +
    "\004\005\232\001\001\000\002\001\001\000\004\005\223" +
    "\001\001\000\002\001\001\000\030\004\062\011\063\014" +
    "\070\015\064\016\050\017\074\020\073\021\076\022\066" +
    "\023\052\031\225\001\001\000\002\001\001\000\004\013" +
    "\227\001\001\000\002\001\001\000\004\012\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\062\011" +
    "\063\014\070\015\064\016\050\017\074\020\073\021\076" +
    "\022\066\023\052\031\234\001\001\000\002\001\001\000" +
    "\004\013\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\062\011\063\014\070\015\064\016\050\017" +
    "\074\020\073\021\076\022\066\023\052\031\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\062\011\063" +
    "\014\070\015\064\016\050\017\074\020\073\021\076\022" +
    "\066\023\052\031\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\062\011\063\014\070\015\064\016" +
    "\050\017\074\020\073\021\076\022\066\023\052\031\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\062\011\063\014\070" +
    "\015\064\016\050\017\074\020\073\021\076\022\066\023" +
    "\052\031\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\263\001\001\000\004\005" +
    "\264\001\001\000\002\001\001\000\004\004\266\001\001" +
    "\000\004\005\267\001\001\000\002\001\001\000\004\004" +
    "\271\001\001\000\004\005\272\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserh$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserh$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserh$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserh$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parserh parser;

  /** Constructor */
  CUP$parserh$actions(parserh parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action_part00000000(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserh$result;

      /* select the action based on the action number */
      switch (CUP$parserh$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserh$stack.elementAt(CUP$parserh$top-1)).value;
		RESULT = start_val;
              CUP$parserh$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserh$parser.done_parsing();
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HTML_I ATRIB MAYOR COMEN ENCABE COMEN CUERPO HTML_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-7)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABE ::= HEAD_I ATRIB MAYOR TITULO HEAD_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABE ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= BODY_I ATRIB MAYOR VARIOS BODY_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TITULO ::= TITLE_I ATRIB MAYOR VALORES TITLE_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TITULO ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIOS ::= TABLA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIOS ::= DIVID VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIOS ::= PHR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIOS ::= COMEN VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIOS ::= PBR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIOS ::= PARRA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIOS ::= LASH VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIOS ::= TEXTO VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIOS ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LASH ::= H1_I ATRIB VARIOS MAYOR H1_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LASH ::= H2_I ATRIB VARIOS MAYOR H2_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LASH ::= H3_I ATRIB VARIOS MAYOR H3_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LASH ::= H4_I ATRIB VARIOS MAYOR H4_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LASH ::= H5_I ATRIB VARIOS MAYOR H5_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LASH ::= H6_I ATRIB VARIOS MAYOR H6_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TABLA ::= TABLE_I ATRIB MAYOR PROPTA TABLE_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TABLA",7, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROPTA ::= TR_I ATRIB MAYOR PROPT2 TR_F PROPTA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROPTA ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROPT2 ::= TD_I ATRIB MAYOR VARIOS TD_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROPT2 ::= TH_I ATRIB MAYOR VARIOS TH_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROPT2 ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIVID ::= DIV_I ATRIB MAYOR VARIOS DIV_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DIVID",10, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PHR ::= HR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PHR ::= HR_I MAYOR HR_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMEN ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("COMEN",11, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PBR ::= BR_I MAYOR 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PBR ::= BR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARRA ::= P_I ATRIB MAYOR VARIOS P_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PARRA",14, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIB ::= COLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIB ::= TCOLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIB ::= ALIGN IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIB ::= FONT IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIB ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= VALORES 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= LENGUAJE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LENGUAJE ::= CPREP CAN CPREP 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LENGUAJE",17, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAN ::= DECLA CAN 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAN ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLA ::= VALT ID 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLA ::= VALT ID IGUAL EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALT ::= TIPO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALT ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRE ::= RESTA EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRE ::= PAR_A EXPRE PAR_C 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRE ::= EXPRE OPERACION EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRE ::= NOT EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRE ::= VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= SUMA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= RESTA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= MULTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= DIVIS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= MODS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAL2 ::= VALORES 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAL2 ::= RESULTADO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RESULTADO ::= RESUL PUNTO SCORE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RESULTADO ::= RESUL PUNTO OTRO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RESULTADO ::= RESUL PUNTO OTRO COR_A ENTERO COR_C PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-7)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RESULTADO ::= RESUL PUNTO OTRO PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RESULTADO ::= RESUL PUNTO OTRO CANTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OTRO ::= VARIA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OTRO ::= METOD 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OTRO ::= CLASE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES ::= CADENA2 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserh$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
              return CUP$parserh$do_action_part00000000(
                               CUP$parserh$act_num,
                               CUP$parserh$parser,
                               CUP$parserh$stack,
                               CUP$parserh$top);
    }
}

}
