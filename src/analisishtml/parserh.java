
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisishtml;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserh extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserh() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserh(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserh(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\010\000\002\006" +
    "\007\000\002\006\002\000\002\007\007\000\002\007\002" +
    "\000\002\010\007\000\002\010\002\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\002\000\002\021\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\021\007\000\002\011\007\000\002\012\010\000\002" +
    "\012\002\000\002\013\010\000\002\013\010\000\002\013" +
    "\002\000\002\014\007\000\002\016\004\000\002\016\005" +
    "\000\002\015\003\000\002\017\004\000\002\017\004\000" +
    "\002\020\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\002\000\002\022" +
    "\003\000\002\022\003\000\002\023\005\000\002\024\004" +
    "\000\002\024\010\000\002\024\002\000\002\025\005\000" +
    "\002\025\007\000\002\026\003\000\002\026\002\000\002" +
    "\027\004\000\002\027\005\000\002\027\005\000\002\027" +
    "\004\000\002\027\005\000\002\027\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\035\003\000\002\035\003\000\002" +
    "\030\004\000\002\030\004\000\002\030\002\000\002\032" +
    "\005\000\002\032\005\000\002\032\012\000\002\032\007" +
    "\000\002\032\006\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\042\004\001\002\000\014\023\uffd9\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\025\307\001" +
    "\002\000\004\025\304\001\002\000\004\025\301\001\002" +
    "\000\004\023\027\001\002\000\004\025\014\001\002\000" +
    "\022\003\024\033\016\034\025\116\020\117\023\120\017" +
    "\123\015\125\021\001\002\000\142\003\uffb3\005\uffb3\013" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\066" +
    "\uffb3\071\uffb3\073\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\104\uffb3\106\uffb3\116\uffb3\117\uffb3\120\uffb3\123" +
    "\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3" +
    "\001\002\000\142\003\uffb0\005\uffb0\013\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\065\uffb0\066\uffb0\071\uffb0\073" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\104\uffb0" +
    "\106\uffb0\116\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0\125" +
    "\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\142" +
    "\003\uffb5\005\uffb5\013\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5" +
    "\034\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\065\uffb5\066\uffb5\071\uffb5\073\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\104\uffb5\106\uffb5\116\uffb5" +
    "\117\uffb5\120\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\001\002\000\142\003\uffb6\005\uffb6" +
    "\013\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6" +
    "\066\uffb6\071\uffb6\073\uffb6\076\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\104\uffb6\106\uffb6\116\uffb6\117\uffb6\120\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131" +
    "\uffb6\001\002\000\142\003\uffb2\005\uffb2\013\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\066\uffb2\071\uffb2" +
    "\073\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\104" +
    "\uffb2\106\uffb2\116\uffb2\117\uffb2\120\uffb2\123\uffb2\124\uffb2" +
    "\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\001\002\000" +
    "\014\023\uffd9\126\007\127\011\130\013\131\010\001\002" +
    "\000\142\003\uffb4\005\uffb4\013\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\065\uffb4\066\uffb4\071\uffb4\073\uffb4\076" +
    "\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\104\uffb4\106\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\123\uffb4\124\uffb4\125\uffb4\126" +
    "\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000\142\003\uffaf" +
    "\005\uffaf\013\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\065\uffaf\066\uffaf\071\uffaf\073\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\104\uffaf\106\uffaf\116\uffaf\117\uffaf" +
    "\120\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130" +
    "\uffaf\131\uffaf\001\002\000\142\003\uffb1\005\uffb1\013\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\065\uffb1\066\uffb1" +
    "\071\uffb1\073\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\104\uffb1\106\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1" +
    "\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001" +
    "\002\000\004\023\uffdb\001\002\000\010\043\ufffe\044\031" +
    "\046\ufffe\001\002\000\006\043\ufffc\046\043\001\002\000" +
    "\014\023\uffd9\126\007\127\011\130\013\131\010\001\002" +
    "\000\004\023\033\001\002\000\006\045\ufffa\064\035\001" +
    "\002\000\004\045\042\001\002\000\014\023\uffd9\126\007" +
    "\127\011\130\013\131\010\001\002\000\004\023\037\001" +
    "\002\000\022\003\024\033\016\034\025\116\020\117\023" +
    "\120\017\123\015\125\021\001\002\000\004\065\041\001" +
    "\002\000\004\045\ufffb\001\002\000\006\043\uffff\046\uffff" +
    "\001\002\000\014\023\uffd9\126\007\127\011\130\013\131" +
    "\010\001\002\000\004\043\045\001\002\000\004\002\000" +
    "\001\002\000\004\023\047\001\002\000\056\003\024\027" +
    "\061\033\016\034\025\047\ufff1\050\065\052\053\054\067" +
    "\056\056\060\071\062\060\066\057\076\054\100\051\102" +
    "\076\104\073\116\020\117\023\120\017\123\015\124\072" +
    "\125\021\001\002\000\102\003\024\027\061\033\016\034" +
    "\025\047\ufff1\050\065\051\ufff1\052\053\053\ufff1\054\067" +
    "\055\ufff1\056\056\057\ufff1\060\071\061\ufff1\062\060\063" +
    "\ufff1\066\057\071\ufff1\073\ufff1\076\054\077\ufff1\100\051" +
    "\101\ufff1\102\076\104\073\116\020\117\023\120\017\123" +
    "\015\124\072\125\021\001\002\000\014\023\uffd9\126\007" +
    "\127\011\130\013\131\010\001\002\000\102\003\uffd7\027" +
    "\uffd7\033\uffd7\034\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\066\uffd7\071\uffd7\073\uffd7\076\uffd7" +
    "\077\uffd7\100\uffd7\101\uffd7\102\uffd7\104\uffd7\116\uffd7\117" +
    "\uffd7\120\uffd7\123\uffd7\124\uffd7\125\uffd7\001\002\000\014" +
    "\023\uffd9\126\007\127\011\130\013\131\010\001\002\000" +
    "\014\023\uffd9\126\007\127\011\130\013\131\010\001\002" +
    "\000\004\047\263\001\002\000\014\023\uffd9\126\007\127" +
    "\011\130\013\131\010\001\002\000\014\023\uffd9\126\007" +
    "\127\011\130\013\131\010\001\002\000\014\023\uffd9\126" +
    "\007\127\011\130\013\131\010\001\002\000\024\003\140" +
    "\027\uffd3\035\130\036\131\037\142\040\133\041\137\107" +
    "\141\117\uffcf\001\002\000\102\003\uffd8\027\uffd8\033\uffd8" +
    "\034\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\066\uffd8\071\uffd8\073\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\101\uffd8\102\uffd8\104\uffd8\116\uffd8\117\uffd8\120\uffd8" +
    "\123\uffd8\124\uffd8\125\uffd8\001\002\000\102\003\024\027" +
    "\061\033\016\034\025\047\ufff1\050\065\051\ufff1\052\053" +
    "\053\ufff1\054\067\055\ufff1\056\056\057\ufff1\060\071\061" +
    "\ufff1\062\060\063\ufff1\066\057\071\ufff1\073\ufff1\076\054" +
    "\077\ufff1\100\051\101\ufff1\102\076\104\073\116\020\117" +
    "\023\120\017\123\015\124\072\125\021\001\002\000\102" +
    "\003\024\027\061\033\016\034\025\047\ufff1\050\065\051" +
    "\ufff1\052\053\053\ufff1\054\067\055\ufff1\056\056\057\ufff1" +
    "\060\071\061\ufff1\062\060\063\ufff1\066\057\071\ufff1\073" +
    "\ufff1\076\054\077\ufff1\100\051\101\ufff1\102\076\104\073" +
    "\116\020\117\023\120\017\123\015\124\072\125\021\001" +
    "\002\000\014\023\uffd9\126\007\127\011\130\013\131\010" +
    "\001\002\000\102\003\024\027\061\033\016\034\025\047" +
    "\ufff1\050\065\051\ufff1\052\053\053\ufff1\054\067\055\ufff1" +
    "\056\056\057\ufff1\060\071\061\ufff1\062\060\063\ufff1\066" +
    "\057\071\ufff1\073\ufff1\076\054\077\ufff1\100\051\101\ufff1" +
    "\102\076\104\073\116\020\117\023\120\017\123\015\124" +
    "\072\125\021\001\002\000\014\023\uffd9\126\007\127\011" +
    "\130\013\131\010\001\002\000\102\003\024\027\061\033" +
    "\016\034\025\047\ufff1\050\065\051\ufff1\052\053\053\ufff1" +
    "\054\067\055\ufff1\056\056\057\ufff1\060\071\061\ufff1\062" +
    "\060\063\ufff1\066\057\071\ufff1\073\ufff1\076\054\077\ufff1" +
    "\100\051\101\ufff1\102\076\104\073\116\020\117\023\120" +
    "\017\123\015\124\072\125\021\001\002\000\014\023\uffd9" +
    "\126\007\127\011\130\013\131\010\001\002\000\102\003" +
    "\uffe1\027\uffe1\033\uffe1\034\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\066\uffe1\071\uffe1\073\uffe1" +
    "\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1\116" +
    "\uffe1\117\uffe1\120\uffe1\123\uffe1\124\uffe1\125\uffe1\001\002" +
    "\000\006\023\105\026\106\001\002\000\102\003\024\027" +
    "\061\033\016\034\025\047\ufff1\050\065\051\ufff1\052\053" +
    "\053\ufff1\054\067\055\ufff1\056\056\057\ufff1\060\071\061" +
    "\ufff1\062\060\063\ufff1\066\057\071\ufff1\073\ufff1\076\054" +
    "\077\ufff1\100\051\101\ufff1\102\076\104\073\116\020\117" +
    "\023\120\017\123\015\124\072\125\021\001\002\000\102" +
    "\003\024\027\061\033\016\034\025\047\ufff1\050\065\051" +
    "\ufff1\052\053\053\ufff1\054\067\055\ufff1\056\056\057\ufff1" +
    "\060\071\061\ufff1\062\060\063\ufff1\066\057\071\ufff1\073" +
    "\ufff1\076\054\077\ufff1\100\051\101\ufff1\102\076\104\073" +
    "\116\020\117\023\120\017\123\015\124\072\125\021\001" +
    "\002\000\006\023\101\026\102\001\002\000\102\003\024" +
    "\027\061\033\016\034\025\047\ufff1\050\065\051\ufff1\052" +
    "\053\053\ufff1\054\067\055\ufff1\056\056\057\ufff1\060\071" +
    "\061\ufff1\062\060\063\ufff1\066\057\071\ufff1\073\ufff1\076" +
    "\054\077\ufff1\100\051\101\ufff1\102\076\104\073\116\020" +
    "\117\023\120\017\123\015\124\072\125\021\001\002\000" +
    "\030\047\ufff3\051\ufff3\053\ufff3\055\ufff3\057\ufff3\061\ufff3" +
    "\063\ufff3\071\ufff3\073\ufff3\077\ufff3\101\ufff3\001\002\000" +
    "\102\003\uffe0\027\uffe0\033\uffe0\034\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\066\uffe0\071\uffe0" +
    "\073\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\104" +
    "\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124\uffe0\125\uffe0" +
    "\001\002\000\102\003\uffdf\027\uffdf\033\uffdf\034\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\066" +
    "\uffdf\071\uffdf\073\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\104\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\001\002\000\030\047\ufff5\051\ufff5\053\ufff5" +
    "\055\ufff5\057\ufff5\061\ufff5\063\ufff5\071\ufff5\073\ufff5\077" +
    "\ufff5\101\ufff5\001\002\000\030\047\ufff4\051\ufff4\053\ufff4" +
    "\055\ufff4\057\ufff4\061\ufff4\063\ufff4\071\ufff4\073\ufff4\077" +
    "\ufff4\101\ufff4\001\002\000\004\105\107\001\002\000\102" +
    "\003\uffe3\027\uffe3\033\uffe3\034\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3\071\uffe3\073" +
    "\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\104\uffe3" +
    "\116\uffe3\117\uffe3\120\uffe3\123\uffe3\124\uffe3\125\uffe3\001" +
    "\002\000\102\003\uffe2\027\uffe2\033\uffe2\034\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2" +
    "\071\uffe2\073\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\104\uffe2\116\uffe2\117\uffe2\120\uffe2\123\uffe2\124\uffe2" +
    "\125\uffe2\001\002\000\004\023\111\001\002\000\056\003" +
    "\024\027\061\033\016\034\025\050\065\052\053\054\067" +
    "\056\056\060\071\061\ufff1\062\060\066\057\076\054\100" +
    "\051\102\076\104\073\116\020\117\023\120\017\123\015" +
    "\124\072\125\021\001\002\000\004\061\113\001\002\000" +
    "\102\003\uffec\027\uffec\033\uffec\034\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\066\uffec\071\uffec" +
    "\073\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\104" +
    "\uffec\116\uffec\117\uffec\120\uffec\123\uffec\124\uffec\125\uffec" +
    "\001\002\000\030\047\ufff8\051\ufff8\053\ufff8\055\ufff8\057" +
    "\ufff8\061\ufff8\063\ufff8\071\ufff8\073\ufff8\077\ufff8\101\ufff8" +
    "\001\002\000\004\023\116\001\002\000\056\003\024\027" +
    "\061\033\016\034\025\050\065\052\053\054\067\055\ufff1" +
    "\056\056\060\071\062\060\066\057\076\054\100\051\102" +
    "\076\104\073\116\020\117\023\120\017\123\015\124\072" +
    "\125\021\001\002\000\004\055\120\001\002\000\102\003" +
    "\uffee\027\uffee\033\uffee\034\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\066\uffee\071\uffee\073\uffee" +
    "\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\104\uffee\116" +
    "\uffee\117\uffee\120\uffee\123\uffee\124\uffee\125\uffee\001\002" +
    "\000\030\047\ufff2\051\ufff2\053\ufff2\055\ufff2\057\ufff2\061" +
    "\ufff2\063\ufff2\071\ufff2\073\ufff2\077\ufff2\101\ufff2\001\002" +
    "\000\004\023\123\001\002\000\056\003\024\027\061\033" +
    "\016\034\025\050\065\051\ufff1\052\053\054\067\056\056" +
    "\060\071\062\060\066\057\076\054\100\051\102\076\104" +
    "\073\116\020\117\023\120\017\123\015\124\072\125\021" +
    "\001\002\000\004\051\125\001\002\000\102\003\ufff0\027" +
    "\ufff0\033\ufff0\034\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\066\ufff0\071\ufff0\073\ufff0\076\ufff0" +
    "\077\ufff0\100\ufff0\101\ufff0\102\ufff0\104\ufff0\116\ufff0\117" +
    "\ufff0\120\ufff0\123\ufff0\124\ufff0\125\ufff0\001\002\000\030" +
    "\047\ufff6\051\ufff6\053\ufff6\055\ufff6\057\ufff6\061\ufff6\063" +
    "\ufff6\071\ufff6\073\ufff6\077\ufff6\101\ufff6\001\002\000\030" +
    "\047\ufff9\051\ufff9\053\ufff9\055\ufff9\057\ufff9\061\ufff9\063" +
    "\ufff9\071\ufff9\073\ufff9\077\ufff9\101\ufff9\001\002\000\004" +
    "\117\uffae\001\002\000\004\117\uffad\001\002\000\024\003" +
    "\140\027\uffd3\035\130\036\131\037\142\040\133\041\137" +
    "\107\141\117\uffcf\001\002\000\004\117\uffab\001\002\000" +
    "\004\027\223\001\002\000\004\117\216\001\002\000\004" +
    "\117\uffd0\001\002\000\004\117\uffaa\001\002\000\004\117" +
    "\uffa9\001\002\000\004\004\143\001\002\000\004\117\uffac" +
    "\001\002\000\050\003\024\004\144\005\uffbf\016\uffbf\017" +
    "\152\020\uffbf\021\uffbf\022\uffbf\030\uffbf\031\uffbf\032\151" +
    "\033\016\034\025\106\145\116\020\117\023\120\017\123" +
    "\015\125\021\001\002\000\050\003\024\004\144\005\uffbf" +
    "\016\uffbf\017\152\020\uffbf\021\uffbf\022\uffbf\030\uffbf\031" +
    "\uffbf\032\151\033\016\034\025\106\145\116\020\117\023" +
    "\120\017\123\015\125\021\001\002\000\004\015\176\001" +
    "\002\000\024\005\uffc9\013\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\030\uffc9\031\uffc9\001\002\000\046\003" +
    "\024\005\uffbf\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\030\uffbf\031\uffbf\033\016\034\025\106\145\116" +
    "\020\117\023\120\017\123\015\125\021\001\002\000\046" +
    "\003\024\005\uffbf\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\030\uffbf\031\uffbf\033\016\034\025\106\145" +
    "\116\020\117\023\120\017\123\015\125\021\001\002\000" +
    "\052\003\024\004\144\005\uffbf\013\uffbf\016\uffbf\017\152" +
    "\020\uffbf\021\uffbf\022\uffbf\030\uffbf\031\uffbf\032\151\033" +
    "\016\034\025\106\145\116\020\117\023\120\017\123\015" +
    "\125\021\001\002\000\052\003\024\004\144\005\uffbf\013" +
    "\uffbf\016\uffbf\017\152\020\uffbf\021\uffbf\022\uffbf\030\uffbf" +
    "\031\uffbf\032\151\033\016\034\025\106\145\116\020\117" +
    "\023\120\017\123\015\125\021\001\002\000\022\005\165" +
    "\016\156\017\163\020\157\021\161\022\162\030\154\031" +
    "\164\001\002\000\052\003\uffc3\004\uffc3\005\uffc3\013\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\106\uffc3\116\uffc3\117\uffc3" +
    "\120\uffc3\123\uffc3\125\uffc3\001\002\000\052\003\024\004" +
    "\144\005\uffbf\013\uffbf\016\uffbf\017\152\020\uffbf\021\uffbf" +
    "\022\uffbf\030\uffbf\031\uffbf\032\151\033\016\034\025\106" +
    "\145\116\020\117\023\120\017\123\015\125\021\001\002" +
    "\000\052\003\uffc8\004\uffc8\005\uffc8\013\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\106\uffc8\116\uffc8\117\uffc8\120\uffc8\123" +
    "\uffc8\125\uffc8\001\002\000\052\003\uffc6\004\uffc6\005\uffc6" +
    "\013\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\106\uffc6\116\uffc6" +
    "\117\uffc6\120\uffc6\123\uffc6\125\uffc6\001\002\000\052\003" +
    "\024\004\144\005\uffbf\013\uffbf\016\uffbf\017\152\020\uffbf" +
    "\021\uffbf\022\uffbf\030\uffbf\031\uffbf\032\151\033\016\034" +
    "\025\106\145\116\020\117\023\120\017\123\015\125\021" +
    "\001\002\000\052\003\uffc5\004\uffc5\005\uffc5\013\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\106\uffc5\116\uffc5\117\uffc5\120" +
    "\uffc5\123\uffc5\125\uffc5\001\002\000\052\003\uffc4\004\uffc4" +
    "\005\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\106\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\123\uffc4\125\uffc4\001\002\000" +
    "\052\003\uffc7\004\uffc7\005\uffc7\013\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\106\uffc7\116\uffc7\117\uffc7\120\uffc7\123\uffc7" +
    "\125\uffc7\001\002\000\052\003\uffc2\004\uffc2\005\uffc2\013" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\106\uffc2\116\uffc2\117" +
    "\uffc2\120\uffc2\123\uffc2\125\uffc2\001\002\000\004\013\166" +
    "\001\002\000\024\003\140\027\uffd3\035\130\036\131\037" +
    "\142\040\133\041\137\107\141\117\uffcf\001\002\000\004" +
    "\027\uffd4\001\002\000\024\005\uffcc\013\uffcc\016\156\017" +
    "\163\020\157\021\161\022\162\030\154\031\164\001\002" +
    "\000\024\005\uffca\013\uffca\016\156\017\163\020\157\021" +
    "\161\022\162\030\154\031\164\001\002\000\024\005\uffce" +
    "\013\uffce\016\uffce\017\uffce\020\157\021\161\022\162\030" +
    "\uffce\031\uffce\001\002\000\024\005\uffcb\013\uffcb\016\156" +
    "\017\163\020\157\021\161\022\162\030\uffcb\031\uffcb\001" +
    "\002\000\024\005\uffc0\013\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\030\uffc0\031\uffc0\001\002\000\024\005" +
    "\uffc1\013\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\030\uffc1\031\uffc1\001\002\000\012\110\202\111\200\114" +
    "\201\115\203\001\002\000\054\003\uffbd\005\uffbd\010\206" +
    "\013\uffbd\015\205\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\106\uffbd\113\204" +
    "\116\uffbd\117\uffbd\120\uffbd\123\uffbd\125\uffbd\001\002\000" +
    "\054\003\uffb9\005\uffb9\010\uffb9\013\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\030\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\106\uffb9\113\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\123\uffb9\125\uffb9\001\002\000\054\003\uffb8\005\uffb8\010" +
    "\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\106\uffb8\113" +
    "\uffb8\116\uffb8\117\uffb8\120\uffb8\123\uffb8\125\uffb8\001\002" +
    "\000\046\003\uffbe\005\uffbe\013\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\106\uffbe\116\uffbe\117\uffbe\120\uffbe\123\uffbe\125\uffbe\001" +
    "\002\000\054\003\uffb7\005\uffb7\010\uffb7\013\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\106\uffb7\113\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\123\uffb7\125\uffb7\001\002\000\046\003\uffba\005" +
    "\uffba\013\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\030\uffba\031\uffba\033\uffba\034\uffba\106\uffba\116\uffba\117" +
    "\uffba\120\uffba\123\uffba\125\uffba\001\002\000\004\112\213" +
    "\001\002\000\004\116\207\001\002\000\004\011\210\001" +
    "\002\000\004\015\211\001\002\000\004\112\212\001\002" +
    "\000\046\003\uffbc\005\uffbc\013\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\106\uffbc\116\uffbc\117\uffbc\120\uffbc\123\uffbc\125\uffbc\001" +
    "\002\000\046\003\uffbb\005\uffbb\013\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\106\uffbb\116\uffbb\117\uffbb\120\uffbb\123\uffbb\125\uffbb" +
    "\001\002\000\022\005\215\016\156\017\163\020\157\021" +
    "\161\022\162\030\154\031\164\001\002\000\024\005\uffcd" +
    "\013\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\030" +
    "\uffcd\031\uffcd\001\002\000\006\013\220\025\217\001\002" +
    "\000\050\003\024\004\144\013\uffbf\016\uffbf\017\152\020" +
    "\uffbf\021\uffbf\022\uffbf\030\uffbf\031\uffbf\032\151\033\016" +
    "\034\025\106\145\116\020\117\023\120\017\123\015\125" +
    "\021\001\002\000\024\003\uffd2\027\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\107\uffd2\117\uffd2\001\002\000" +
    "\022\013\222\016\156\017\163\020\157\021\161\022\162" +
    "\030\154\031\164\001\002\000\024\003\uffd1\027\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\107\uffd1\117\uffd1" +
    "\001\002\000\102\003\uffd6\027\uffd6\033\uffd6\034\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\066" +
    "\uffd6\071\uffd6\073\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\104\uffd6\116\uffd6\117\uffd6\120\uffd6\123\uffd6\124" +
    "\uffd6\125\uffd6\001\002\000\004\027\uffd5\001\002\000\004" +
    "\023\226\001\002\000\056\003\024\027\061\033\016\034" +
    "\025\050\065\052\053\054\067\056\056\060\071\062\060" +
    "\063\ufff1\066\057\076\054\100\051\102\076\104\073\116" +
    "\020\117\023\120\017\123\015\124\072\125\021\001\002" +
    "\000\004\063\230\001\002\000\102\003\uffeb\027\uffeb\033" +
    "\uffeb\034\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\066\uffeb\071\uffeb\073\uffeb\076\uffeb\077\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\104\uffeb\116\uffeb\117\uffeb\120" +
    "\uffeb\123\uffeb\124\uffeb\125\uffeb\001\002\000\004\023\232" +
    "\001\002\000\006\067\uffe8\074\234\001\002\000\004\067" +
    "\256\001\002\000\014\023\uffd9\126\007\127\011\130\013" +
    "\131\010\001\002\000\004\023\236\001\002\000\010\070" +
    "\237\072\241\075\uffe5\001\002\000\014\023\uffd9\126\007" +
    "\127\011\130\013\131\010\001\002\000\004\075\247\001" +
    "\002\000\014\023\uffd9\126\007\127\011\130\013\131\010" +
    "\001\002\000\004\023\243\001\002\000\056\003\024\027" +
    "\061\033\016\034\025\050\065\052\053\054\067\056\056" +
    "\060\071\062\060\066\057\073\ufff1\076\054\100\051\102" +
    "\076\104\073\116\020\117\023\120\017\123\015\124\072" +
    "\125\021\001\002\000\004\073\245\001\002\000\010\070" +
    "\237\072\241\075\uffe5\001\002\000\004\075\uffe7\001\002" +
    "\000\006\067\uffe8\074\234\001\002\000\004\067\uffe9\001" +
    "\002\000\004\023\252\001\002\000\056\003\024\027\061" +
    "\033\016\034\025\050\065\052\053\054\067\056\056\060" +
    "\071\062\060\066\057\071\ufff1\076\054\100\051\102\076" +
    "\104\073\116\020\117\023\120\017\123\015\124\072\125" +
    "\021\001\002\000\004\071\254\001\002\000\010\070\237" +
    "\072\241\075\uffe5\001\002\000\004\075\uffe6\001\002\000" +
    "\102\003\uffea\027\uffea\033\uffea\034\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea\071\uffea" +
    "\073\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\104" +
    "\uffea\116\uffea\117\uffea\120\uffea\123\uffea\124\uffea\125\uffea" +
    "\001\002\000\004\023\260\001\002\000\056\003\024\027" +
    "\061\033\016\034\025\050\065\052\053\054\067\056\056" +
    "\057\ufff1\060\071\062\060\066\057\076\054\100\051\102" +
    "\076\104\073\116\020\117\023\120\017\123\015\124\072" +
    "\125\021\001\002\000\004\057\262\001\002\000\102\003" +
    "\uffed\027\uffed\033\uffed\034\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\066\uffed\071\uffed\073\uffed" +
    "\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\104\uffed\116" +
    "\uffed\117\uffed\120\uffed\123\uffed\124\uffed\125\uffed\001\002" +
    "\000\004\043\ufffd\001\002\000\004\023\265\001\002\000" +
    "\056\003\024\027\061\033\016\034\025\050\065\052\053" +
    "\054\067\056\056\060\071\062\060\066\057\076\054\077" +
    "\ufff1\100\051\102\076\104\073\116\020\117\023\120\017" +
    "\123\015\124\072\125\021\001\002\000\004\077\267\001" +
    "\002\000\102\003\uffe4\027\uffe4\033\uffe4\034\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4" +
    "\071\uffe4\073\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102" +
    "\uffe4\104\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4\124\uffe4" +
    "\125\uffe4\001\002\000\004\023\271\001\002\000\056\003" +
    "\024\027\061\033\016\034\025\050\065\052\053\053\ufff1" +
    "\054\067\056\056\060\071\062\060\066\057\076\054\100" +
    "\051\102\076\104\073\116\020\117\023\120\017\123\015" +
    "\124\072\125\021\001\002\000\004\053\273\001\002\000" +
    "\102\003\uffef\027\uffef\033\uffef\034\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\066\uffef\071\uffef" +
    "\073\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\104" +
    "\uffef\116\uffef\117\uffef\120\uffef\123\uffef\124\uffef\125\uffef" +
    "\001\002\000\004\023\275\001\002\000\056\003\024\027" +
    "\061\033\016\034\025\050\065\052\053\054\067\056\056" +
    "\060\071\062\060\066\057\076\054\100\051\101\ufff1\102" +
    "\076\104\073\116\020\117\023\120\017\123\015\124\072" +
    "\125\021\001\002\000\004\101\277\001\002\000\102\003" +
    "\uffde\027\uffde\033\uffde\034\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\066\uffde\071\uffde\073\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\104\uffde\116" +
    "\uffde\117\uffde\120\uffde\123\uffde\124\uffde\125\uffde\001\002" +
    "\000\030\047\ufff7\051\ufff7\053\ufff7\055\ufff7\057\ufff7\061" +
    "\ufff7\063\ufff7\071\ufff7\073\ufff7\077\ufff7\101\ufff7\001\002" +
    "\000\022\003\024\033\016\034\025\116\020\117\023\120" +
    "\017\123\015\125\021\001\002\000\014\023\uffd9\126\007" +
    "\127\011\130\013\131\010\001\002\000\004\023\uffdc\001" +
    "\002\000\022\003\024\033\016\034\025\116\020\117\023" +
    "\120\017\123\015\125\021\001\002\000\014\023\uffd9\126" +
    "\007\127\011\130\013\131\010\001\002\000\004\023\uffda" +
    "\001\002\000\022\003\024\033\016\034\025\116\020\117" +
    "\023\120\017\123\015\125\021\001\002\000\014\023\uffd9" +
    "\126\007\127\011\130\013\131\010\001\002\000\004\023" +
    "\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\002\004\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\027\001\001\000\004\007\043\001\001\000\004" +
    "\005\031\001\001\000\002\001\001\000\004\010\033\001" +
    "\001\000\002\001\001\000\004\005\035\001\001\000\002" +
    "\001\001\000\004\004\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\061\011\062\014\067\015\063\016\047\017\074" +
    "\020\073\021\076\022\065\023\051\031\054\001\001\000" +
    "\030\004\061\011\062\014\067\015\063\016\047\017\074" +
    "\020\073\021\076\022\065\023\051\031\277\001\001\000" +
    "\004\005\273\001\001\000\002\001\001\000\004\005\267" +
    "\001\001\000\004\005\263\001\001\000\002\001\001\000" +
    "\004\005\256\001\001\000\004\005\230\001\001\000\004" +
    "\005\224\001\001\000\012\003\135\024\133\025\131\026" +
    "\134\001\001\000\002\001\001\000\030\004\061\011\062" +
    "\014\067\015\063\016\047\017\074\020\073\021\076\022" +
    "\065\023\051\031\126\001\001\000\030\004\061\011\062" +
    "\014\067\015\063\016\047\017\074\020\073\021\076\022" +
    "\065\023\051\031\125\001\001\000\004\005\121\001\001" +
    "\000\030\004\061\011\062\014\067\015\063\016\047\017" +
    "\074\020\073\021\076\022\065\023\051\031\120\001\001" +
    "\000\004\005\114\001\001\000\030\004\061\011\062\014" +
    "\067\015\063\016\047\017\074\020\073\021\076\022\065" +
    "\023\051\031\113\001\001\000\004\005\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\061\011\062" +
    "\014\067\015\063\016\047\017\074\020\073\021\076\022" +
    "\065\023\051\031\103\001\001\000\030\004\061\011\062" +
    "\014\067\015\063\016\047\017\074\020\073\021\076\022" +
    "\065\023\051\031\102\001\001\000\002\001\001\000\030" +
    "\004\061\011\062\014\067\015\063\016\047\017\074\020" +
    "\073\021\076\022\065\023\051\031\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\061\011" +
    "\062\014\067\015\063\016\047\017\074\020\073\021\076" +
    "\022\065\023\051\031\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\061\011\062\014\067\015\063\016\047\017\074\020" +
    "\073\021\076\022\065\023\051\031\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\061\011\062\014\067\015\063\016\047" +
    "\017\074\020\073\021\076\022\065\023\051\031\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\135\024\223\025\131\026\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\146\027\152\030\145\032" +
    "\147\001\001\000\012\004\146\027\213\030\145\032\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\146\030\174\032\147\001\001\000\010\004\146\030\173" +
    "\032\147\001\001\000\012\004\146\027\172\030\145\032" +
    "\147\001\001\000\012\004\146\027\171\030\145\032\147" +
    "\001\001\000\006\033\157\035\154\001\001\000\002\001" +
    "\001\000\012\004\146\027\170\030\145\032\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\146\027" +
    "\167\030\145\032\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\135\024\166\025\131\026\134\001\001" +
    "\000\002\001\001\000\006\033\157\035\154\001\001\000" +
    "\006\033\157\035\154\001\001\000\006\033\157\035\154" +
    "\001\001\000\006\033\157\035\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\157\035\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\146\027\220\030\145\032\147\001\001" +
    "\000\002\001\001\000\006\033\157\035\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\061\011\062\014\067\015\063\016" +
    "\047\017\074\020\073\021\076\022\065\023\051\031\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\232\001\001\000\002\001\001\000\004" +
    "\005\234\001\001\000\002\001\001\000\004\013\237\001" +
    "\001\000\004\005\250\001\001\000\002\001\001\000\004" +
    "\005\241\001\001\000\002\001\001\000\030\004\061\011" +
    "\062\014\067\015\063\016\047\017\074\020\073\021\076" +
    "\022\065\023\051\031\243\001\001\000\002\001\001\000" +
    "\004\013\245\001\001\000\002\001\001\000\004\012\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\061\011\062\014\067\015\063\016\047\017\074\020\073" +
    "\021\076\022\065\023\051\031\252\001\001\000\002\001" +
    "\001\000\004\013\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\061\011\062\014" +
    "\067\015\063\016\047\017\074\020\073\021\076\022\065" +
    "\023\051\031\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\061" +
    "\011\062\014\067\015\063\016\047\017\074\020\073\021" +
    "\076\022\065\023\051\031\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\061\011" +
    "\062\014\067\015\063\016\047\017\074\020\073\021\076" +
    "\022\065\023\051\031\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\061\011\062" +
    "\014\067\015\063\016\047\017\074\020\073\021\076\022" +
    "\065\023\051\031\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\301\001\001\000" +
    "\004\005\302\001\001\000\002\001\001\000\004\004\304" +
    "\001\001\000\004\005\305\001\001\000\002\001\001\000" +
    "\004\004\307\001\001\000\004\005\310\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserh$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserh$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserh$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public String ER="";
    public String EN="";
    public int id = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) +" " + s.value);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserh$actions {

//Codigo de usuario
    String tmp="";
    String id1 = "";
    String id2 = "";
    int x1;
    int x2;
    int y1, y2;
    int x = 0;
    int y = 0;

  private final parserh parser;

  /** Constructor */
  CUP$parserh$actions(parserh parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action_part00000000(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserh$result;

      /* select the action based on the action number */
      switch (CUP$parserh$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserh$stack.elementAt(CUP$parserh$top-1)).value;
		RESULT = start_val;
              CUP$parserh$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserh$parser.done_parsing();
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HTML_I ATRIB MAYOR ENCABE CUERPO HTML_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABE ::= HEAD_I ATRIB MAYOR TITULO HEAD_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABE ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ENCABE",4, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= BODY_I ATRIB MAYOR VARIOS BODY_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TITULO ::= TITLE_I ATRIB MAYOR VALORES TITLE_F 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TITULO ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIOS ::= TABLA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIOS ::= DIVID VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIOS ::= PHR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIOS ::= COMEN VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIOS ::= PBR VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIOS ::= PARRA VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIOS ::= LASH VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIOS ::= TEXTO VARIOS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIOS ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VARIOS",23, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LASH ::= H1_I ATRIB MAYOR VARIOS H1_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LASH ::= H2_I ATRIB MAYOR VARIOS H2_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LASH ::= H3_I ATRIB MAYOR VARIOS H3_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LASH ::= H4_I ATRIB MAYOR VARIOS H4_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LASH ::= H5_I ATRIB MAYOR VARIOS H5_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LASH ::= H6_I ATRIB MAYOR VARIOS H6_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LASH",15, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TABLA ::= TABLE_I ATRIB MAYOR PROPTA TABLE_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TABLA",7, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROPTA ::= TR_I ATRIB MAYOR PROPT2 TR_F PROPTA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROPTA ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPTA",8, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROPT2 ::= TD_I ATRIB MAYOR VARIOS TD_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROPT2 ::= TH_I ATRIB MAYOR VARIOS TH_F PROPT2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROPT2 ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PROPT2",9, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIVID ::= DIV_I ATRIB MAYOR VARIOS DIV_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DIVID",10, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PHR ::= HR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PHR ::= HR_I MAYOR HR_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PHR",12, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMEN ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("COMEN",11, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PBR ::= BR_I MAYOR 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PBR ::= BR_I CLOSE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PBR",13, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARRA ::= P_I ATRIB MAYOR VARIOS P_F 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("PARRA",14, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIB ::= COLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIB ::= TCOLOR IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIB ::= ALIGN IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIB ::= FONT IGUAL VALORES ATRIB 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRIB ::= 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= VALORES 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO ::= LENGUAJE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LENGUAJE ::= CPREP CAN CPREP 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LENGUAJE",17, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAN ::= DECLA CAN 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAN ::= PRINT PAR_A EXPRE PAR_C PYCOMA CAN 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-5)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAN ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("CAN",18, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLA ::= VALT ID PYCOMA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLA ::= VALT ID IGUAL EXPRE PYCOMA 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("DECLA",19, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALT ::= TIPO 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALT ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALT",20, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRE ::= RESTA EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRE ::= PAR_A EXPRE PAR_C 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRE ::= EXPRE OPERACION EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRE ::= NOT EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRE ::= EXPRE LOGICO EXPRE 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRE ::= VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("EXPRE",21, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= SUMA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= RESTA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION ::= MULTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= DIVIS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= MODS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OPERACION",25, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOGICO ::= AND 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGICO",27, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOGICO ::= OR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("LOGICO",27, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL2 ::= VALORES VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL2 ::= RESULTADO VAL2 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-1)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL2 ::= 
            {
              Object RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VAL2",22, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RESULTADO ::= RESUL PUNTO SCORE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RESULTADO ::= RESUL PUNTO OTRO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-2)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RESULTADO ::= RESUL PUNTO OTRO COR_A ENTERO COR_C PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-7)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RESULTADO ::= RESUL PUNTO OTRO PUNTO NOMBR 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-4)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RESULTADO ::= RESUL PUNTO OTRO CANTI 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("RESULTADO",24, ((java_cup.runtime.Symbol)CUP$parserh$stack.elementAt(CUP$parserh$top-3)), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OTRO ::= VARIA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OTRO ::= METOD 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OTRO ::= CLASE 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("OTRO",26, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALORES ::= ENTERO 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALORES ::= DECIMAL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALORES ::= ID 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALORES ::= CADENA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES ::= CADENA2 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES ::= FALS 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORES ::= TRU 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORES ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= INT 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO ::= BOOLEA 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= STRIN 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= CARAC 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= DOUBL 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$parserh$result = parser.getSymbolFactory().newSymbol("TIPO",1, ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserh$stack.peek()), RESULT);
            }
          return CUP$parserh$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserh$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserh$do_action(
    int                        CUP$parserh$act_num,
    java_cup.runtime.lr_parser CUP$parserh$parser,
    java.util.Stack            CUP$parserh$stack,
    int                        CUP$parserh$top)
    throws java.lang.Exception
    {
              return CUP$parserh$do_action_part00000000(
                               CUP$parserh$act_num,
                               CUP$parserh$parser,
                               CUP$parserh$stack,
                               CUP$parserh$top);
    }
}

}
